// $ANTLR 3.4 /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g 2015-01-14 22:31:43

package org.apache.pig.parser;

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pig.parser.PigMacro;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.base.Joiner;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
 * Parser file for Pig Parser
 *
 * NOTE: THIS FILE IS THE BASE FOR A FEW TREE PARSER FILES, such as AstValidator.g,
 *       SO IF YOU CHANGE THIS FILE, YOU WILL PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO
 *       THOSE FILES AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class QueryParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AMPERSAND", "AND", "ARROBA", "AS", "ASC", "ASSERT", "BAG", "BIGDECIMAL", "BIGDECIMALNUMBER", "BIGINTEGER", "BIGINTEGERNUMBER", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CASE", "CHARARRAY", "CHUNKSIZE", "COGROUP", "COLON", "COMMA", "CROSS", "CUBE", "DATETIME", "DCOLON", "DEFINE", "DENSE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "ELSE", "END", "EQUAL", "EXECCOMMAND", "FALSE", "FAT_ARROW", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER", "IF", "IMPORT", "IN", "INNER", "INPUT", "INT", "INTEGER", "INTO", "INVOKE", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NULL", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PIVOT", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RANK", "RATE", "REGISTER", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "ROLLUP", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THEN", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WHEN", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "BOOL_COND", "CASE_COND", "CASE_EXPR", "CASE_EXPR_LHS", "CASE_EXPR_RHS", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "INVOKER_FUNC_EVAL", "IN_LHS", "IN_RHS", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "PARAMS", "QUERY", "REALIAS", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AMPERSAND=5;
    public static final int AND=6;
    public static final int ARROBA=7;
    public static final int AS=8;
    public static final int ASC=9;
    public static final int ASSERT=10;
    public static final int BAG=11;
    public static final int BIGDECIMAL=12;
    public static final int BIGDECIMALNUMBER=13;
    public static final int BIGINTEGER=14;
    public static final int BIGINTEGERNUMBER=15;
    public static final int BOOLEAN=16;
    public static final int BY=17;
    public static final int BYTEARRAY=18;
    public static final int CACHE=19;
    public static final int CASE=20;
    public static final int CHARARRAY=21;
    public static final int CHUNKSIZE=22;
    public static final int COGROUP=23;
    public static final int COLON=24;
    public static final int COMMA=25;
    public static final int CROSS=26;
    public static final int CUBE=27;
    public static final int DATETIME=28;
    public static final int DCOLON=29;
    public static final int DEFINE=30;
    public static final int DENSE=31;
    public static final int DESC=32;
    public static final int DIGIT=33;
    public static final int DISTINCT=34;
    public static final int DIV=35;
    public static final int DOLLAR=36;
    public static final int DOLLARVAR=37;
    public static final int DOUBLE=38;
    public static final int DOUBLENUMBER=39;
    public static final int DOUBLE_PERIOD=40;
    public static final int ELSE=41;
    public static final int END=42;
    public static final int EQUAL=43;
    public static final int EXECCOMMAND=44;
    public static final int FALSE=45;
    public static final int FAT_ARROW=46;
    public static final int FILTER=47;
    public static final int FLATTEN=48;
    public static final int FLOAT=49;
    public static final int FLOATINGPOINT=50;
    public static final int FLOATNUMBER=51;
    public static final int FOREACH=52;
    public static final int FULL=53;
    public static final int GENERATE=54;
    public static final int GROUP=55;
    public static final int ID=56;
    public static final int IDENTIFIER=57;
    public static final int IF=58;
    public static final int IMPORT=59;
    public static final int IN=60;
    public static final int INNER=61;
    public static final int INPUT=62;
    public static final int INT=63;
    public static final int INTEGER=64;
    public static final int INTO=65;
    public static final int INVOKE=66;
    public static final int IS=67;
    public static final int JOIN=68;
    public static final int LEFT=69;
    public static final int LEFT_BRACKET=70;
    public static final int LEFT_CURLY=71;
    public static final int LEFT_PAREN=72;
    public static final int LETTER=73;
    public static final int LIMIT=74;
    public static final int LOAD=75;
    public static final int LONG=76;
    public static final int LONGINTEGER=77;
    public static final int MAP=78;
    public static final int MAPREDUCE=79;
    public static final int MINUS=80;
    public static final int ML_COMMENT=81;
    public static final int MULTILINE_QUOTEDSTRING=82;
    public static final int NOT=83;
    public static final int NULL=84;
    public static final int NUM_OP_EQ=85;
    public static final int NUM_OP_GT=86;
    public static final int NUM_OP_GTE=87;
    public static final int NUM_OP_LT=88;
    public static final int NUM_OP_LTE=89;
    public static final int NUM_OP_NE=90;
    public static final int ONSCHEMA=91;
    public static final int OR=92;
    public static final int ORDER=93;
    public static final int OTHERWISE=94;
    public static final int OUTER=95;
    public static final int OUTPUT=96;
    public static final int PARALLEL=97;
    public static final int PARTITION=98;
    public static final int PERCENT=99;
    public static final int PERIOD=100;
    public static final int PIVOT=101;
    public static final int PLUS=102;
    public static final int POUND=103;
    public static final int QMARK=104;
    public static final int QUOTEDSTRING=105;
    public static final int RANK=106;
    public static final int RATE=107;
    public static final int REGISTER=108;
    public static final int RETURNS=109;
    public static final int RIGHT=110;
    public static final int RIGHT_BRACKET=111;
    public static final int RIGHT_CURLY=112;
    public static final int RIGHT_PAREN=113;
    public static final int ROLLUP=114;
    public static final int SAMPLE=115;
    public static final int SEMI_COLON=116;
    public static final int SHIP=117;
    public static final int SL_COMMENT=118;
    public static final int SPECIALCHAR=119;
    public static final int SPLIT=120;
    public static final int STAR=121;
    public static final int STDERROR=122;
    public static final int STDIN=123;
    public static final int STDOUT=124;
    public static final int STORE=125;
    public static final int STREAM=126;
    public static final int STR_OP_EQ=127;
    public static final int STR_OP_GT=128;
    public static final int STR_OP_GTE=129;
    public static final int STR_OP_LT=130;
    public static final int STR_OP_LTE=131;
    public static final int STR_OP_MATCHES=132;
    public static final int STR_OP_NE=133;
    public static final int THEN=134;
    public static final int THROUGH=135;
    public static final int TRUE=136;
    public static final int TUPLE=137;
    public static final int UNION=138;
    public static final int USING=139;
    public static final int VOID=140;
    public static final int WHEN=141;
    public static final int WS=142;
    public static final int ANY=143;
    public static final int BAG_TYPE=144;
    public static final int BAG_TYPE_CAST=145;
    public static final int BAG_VAL=146;
    public static final int BIN_EXPR=147;
    public static final int BOOL=148;
    public static final int BOOL_COND=149;
    public static final int CASE_COND=150;
    public static final int CASE_EXPR=151;
    public static final int CASE_EXPR_LHS=152;
    public static final int CASE_EXPR_RHS=153;
    public static final int CAST_EXPR=154;
    public static final int COL_RANGE=155;
    public static final int EXPR_IN_PAREN=156;
    public static final int FIELD_DEF=157;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=158;
    public static final int FOREACH_PLAN_COMPLEX=159;
    public static final int FOREACH_PLAN_SIMPLE=160;
    public static final int FUNC=161;
    public static final int FUNC_EVAL=162;
    public static final int FUNC_REF=163;
    public static final int INVOKER_FUNC_EVAL=164;
    public static final int IN_LHS=165;
    public static final int IN_RHS=166;
    public static final int JOIN_ITEM=167;
    public static final int KEY_VAL_PAIR=168;
    public static final int MACRO_BODY=169;
    public static final int MACRO_DEF=170;
    public static final int MACRO_INLINE=171;
    public static final int MAP_TYPE=172;
    public static final int MAP_VAL=173;
    public static final int NEG=174;
    public static final int NESTED_CMD=175;
    public static final int NESTED_CMD_ASSI=176;
    public static final int NESTED_PROJ=177;
    public static final int PARAMS=178;
    public static final int QUERY=179;
    public static final int REALIAS=180;
    public static final int RETURN_VAL=181;
    public static final int SPLIT_BRANCH=182;
    public static final int STATEMENT=183;
    public static final int TOBAG=184;
    public static final int TOMAP=185;
    public static final int TOTUPLE=186;
    public static final int TUPLE_TYPE=187;
    public static final int TUPLE_TYPE_CAST=188;
    public static final int TUPLE_VAL=189;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public QueryParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public QueryParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return QueryParser.tokenNames; }
    public String getGrammarFileName() { return "/home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g"; }


    private static Log log = LogFactory.getLog( QueryParser.class );

    private Set<String> memory = new HashSet<String>();

    // Make a deep copy of the given node
    private static Tree deepCopy(Tree tree) {
        Tree copy = tree.dupNode();
        for (int i = 0; i < tree.getChildCount(); i++) {
            Tree child = deepCopy(tree.getChild(i));
            child.setParent(copy);
            copy.addChild(child);
        }
        return copy;
    }

    @Override
    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
    throws RecognitionException {
        throw new MismatchedTokenException( ttype, input );
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    throws RecognitionException {
        throw e;
    }

    @Override
    public String getErrorMessage(RecognitionException e, String[] tokenNames ) {
        if( !log.isDebugEnabled() ) {
            if( e instanceof NoViableAltException ) {
                return "Syntax error, unexpected symbol at or near " + getTokenErrorDisplay( e.token );
            } else {
                return super.getErrorMessage( e, tokenNames );
            }
        }

        List stack =  getRuleInvocationStack( e, this.getClass().getName() );
        String msg = null;
        if( e instanceof NoViableAltException ) {
            NoViableAltException nvae = (NoViableAltException)e;
            msg = " no viable alt; token = " + e.token + " (decision=" + nvae.decisionNumber + " state " + nvae.stateNumber + ")" +
                " decision=<<" + nvae.grammarDecisionDescription + ">>";
        } else {
            msg =  super.getErrorMessage( e, tokenNames );
        }
        return stack + " " + msg;
    }

    @Override
    public String getTokenErrorDisplay(Token t) {
        return "'" + t.getText() + "'";
    }

    @Override
    public String getErrorHeader(RecognitionException ex) {
    	return QueryParserUtils.generateErrorHeader( ex, this.getSourceName() );
    }

    private static final Map<Integer, Integer> FUNC_TO_LITERAL = ImmutableMap.of(
        TOBAG, BAG_VAL,
        TOMAP, MAP_VAL,
        TOTUPLE, TUPLE_VAL);

    private static final Set<Integer> BOOLEAN_TOKENS = ImmutableSet.of(
        STR_OP_EQ,
        STR_OP_NE,
        STR_OP_GT,
        STR_OP_LT,
        STR_OP_GTE,
        STR_OP_LTE,
        STR_OP_MATCHES,
        AND,
        OR,
        NOT,
        NULL,
        NUM_OP_EQ,
        NUM_OP_NE,
        NUM_OP_GT,
        NUM_OP_GTE,
        NUM_OP_LT,
        NUM_OP_LTE);

    private static final Set<Integer> LITERAL_TOKENS = ImmutableSet.of(
        INTEGER,
        LONGINTEGER,
        FLOATNUMBER,
        DOUBLENUMBER,
        QUOTEDSTRING,
        NULL,
        TRUE,
        FALSE,
        MAP_VAL,
        BAG_VAL,
        TUPLE_VAL,
        PERIOD,
        POUND);



    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:212:1: query : ( statement )* EOF -> ^( QUERY ( statement )* ) ;
    public final QueryParser.query_return query() throws RecognitionException {
        QueryParser.query_return retval = new QueryParser.query_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF2=null;
        QueryParser.statement_return statement1 =null;


        Object EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:212:7: ( ( statement )* EOF -> ^( QUERY ( statement )* ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:212:9: ( statement )* EOF
            {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:212:9: ( statement )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==ASSERT||LA1_0==COGROUP||(LA1_0 >= CROSS && LA1_0 <= CUBE)||LA1_0==DEFINE||LA1_0==DISTINCT||(LA1_0 >= ELSE && LA1_0 <= END)||(LA1_0 >= FAT_ARROW && LA1_0 <= FILTER)||LA1_0==FOREACH||LA1_0==GROUP||LA1_0==IDENTIFIER||(LA1_0 >= IMPORT && LA1_0 <= IN)||LA1_0==JOIN||LA1_0==LEFT_PAREN||(LA1_0 >= LIMIT && LA1_0 <= LOAD)||LA1_0==MAPREDUCE||LA1_0==ORDER||LA1_0==RANK||LA1_0==REGISTER||(LA1_0 >= SAMPLE && LA1_0 <= SEMI_COLON)||LA1_0==SPLIT||(LA1_0 >= STORE && LA1_0 <= STREAM)||LA1_0==THEN||LA1_0==UNION||LA1_0==WHEN) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:212:9: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_query426);
            	    statement1=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_query429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);


            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 212:24: -> ^( QUERY ( statement )* )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:212:27: ^( QUERY ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUERY, "QUERY")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:212:36: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class schema_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "schema"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:215:1: schema : field_def_list EOF ;
    public final QueryParser.schema_return schema() throws RecognitionException {
        QueryParser.schema_return retval = new QueryParser.schema_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF4=null;
        QueryParser.field_def_list_return field_def_list3 =null;


        Object EOF4_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:215:7: ( field_def_list EOF )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:215:9: field_def_list EOF
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_def_list_in_schema448);
            field_def_list3=field_def_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list3.getTree());

            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_schema450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF4_tree = 
            (Object)adaptor.create(EOF4)
            ;
            adaptor.addChild(root_0, EOF4_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "schema"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:220:1: statement : ( SEMI_COLON !| general_statement SEMI_COLON !| split_clause SEMI_COLON !| inline_clause SEMI_COLON !| import_clause SEMI_COLON !| realias_clause SEMI_COLON !| register_clause SEMI_COLON !| assert_clause SEMI_COLON !| foreach_statement );
    public final QueryParser.statement_return statement() throws RecognitionException {
        QueryParser.statement_return retval = new QueryParser.statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON5=null;
        Token SEMI_COLON7=null;
        Token SEMI_COLON9=null;
        Token SEMI_COLON11=null;
        Token SEMI_COLON13=null;
        Token SEMI_COLON15=null;
        Token SEMI_COLON17=null;
        Token SEMI_COLON19=null;
        QueryParser.general_statement_return general_statement6 =null;

        QueryParser.split_clause_return split_clause8 =null;

        QueryParser.inline_clause_return inline_clause10 =null;

        QueryParser.import_clause_return import_clause12 =null;

        QueryParser.realias_clause_return realias_clause14 =null;

        QueryParser.register_clause_return register_clause16 =null;

        QueryParser.assert_clause_return assert_clause18 =null;

        QueryParser.foreach_statement_return foreach_statement20 =null;


        Object SEMI_COLON5_tree=null;
        Object SEMI_COLON7_tree=null;
        Object SEMI_COLON9_tree=null;
        Object SEMI_COLON11_tree=null;
        Object SEMI_COLON13_tree=null;
        Object SEMI_COLON15_tree=null;
        Object SEMI_COLON17_tree=null;
        Object SEMI_COLON19_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:220:11: ( SEMI_COLON !| general_statement SEMI_COLON !| split_clause SEMI_COLON !| inline_clause SEMI_COLON !| import_clause SEMI_COLON !| realias_clause SEMI_COLON !| register_clause SEMI_COLON !| assert_clause SEMI_COLON !| foreach_statement )
            int alt2=9;
            switch ( input.LA(1) ) {
            case SEMI_COLON:
                {
                alt2=1;
                }
                break;
            case FAT_ARROW:
                {
                int LA2_2 = input.LA(2);

                if ( (LA2_2==FOREACH) ) {
                    alt2=9;
                }
                else if ( (LA2_2==COGROUP||(LA2_2 >= CROSS && LA2_2 <= CUBE)||LA2_2==DEFINE||LA2_2==DISTINCT||LA2_2==FILTER||LA2_2==GROUP||LA2_2==JOIN||LA2_2==LEFT_PAREN||(LA2_2 >= LIMIT && LA2_2 <= LOAD)||LA2_2==MAPREDUCE||LA2_2==ORDER||LA2_2==RANK||LA2_2==SAMPLE||(LA2_2 >= STORE && LA2_2 <= STREAM)||LA2_2==UNION) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA2_3 = input.LA(2);

                if ( (LA2_3==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_16 = input.LA(5);

                            if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 16, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_20 = input.LA(4);

                        if ( (LA2_20==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_20==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=9;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_3==COMMA||LA2_3==LEFT_PAREN) ) {
                    alt2=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 3, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_16 = input.LA(5);

                            if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 16, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_20 = input.LA(4);

                        if ( (LA2_20==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_20==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=9;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 13, input);

                        throw nvae;

                    }

                    }
                    break;
                case ARROBA:
                case CUBE:
                case ELSE:
                case END:
                case IDENTIFIER:
                case IN:
                case RANK:
                case THEN:
                case WHEN:
                    {
                    alt2=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    int LA2_15 = input.LA(3);

                    if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                        alt2=2;
                    }
                    else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                        alt2=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 15, input);

                        throw nvae;

                    }
                    }
                    break;
                case COMMA:
                    {
                    alt2=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }

                }
                break;
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DISTINCT:
            case FILTER:
            case GROUP:
            case JOIN:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case ORDER:
            case SAMPLE:
            case STORE:
            case STREAM:
            case UNION:
                {
                alt2=2;
                }
                break;
            case RANK:
                {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_16 = input.LA(5);

                            if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 16, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_20 = input.LA(4);

                        if ( (LA2_20==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_20==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=9;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 13, input);

                        throw nvae;

                    }

                    }
                    break;
                case ARROBA:
                case CUBE:
                case ELSE:
                case END:
                case IDENTIFIER:
                case IN:
                case RANK:
                case THEN:
                case WHEN:
                    {
                    alt2=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    int LA2_16 = input.LA(3);

                    if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                        alt2=2;
                    }
                    else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                        alt2=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 16, input);

                        throw nvae;

                    }
                    }
                    break;
                case COMMA:
                    {
                    alt2=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 6, input);

                    throw nvae;

                }

                }
                break;
            case ELSE:
            case END:
            case IN:
            case THEN:
            case WHEN:
                {
                int LA2_7 = input.LA(2);

                if ( (LA2_7==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_16 = input.LA(5);

                            if ( (LA2_16==COGROUP||(LA2_16 >= CROSS && LA2_16 <= CUBE)||LA2_16==DEFINE||LA2_16==DISTINCT||LA2_16==FILTER||LA2_16==FOREACH||LA2_16==GROUP||LA2_16==JOIN||(LA2_16 >= LIMIT && LA2_16 <= LOAD)||LA2_16==MAPREDUCE||LA2_16==ORDER||LA2_16==RANK||LA2_16==SAMPLE||(LA2_16 >= STORE && LA2_16 <= STREAM)||LA2_16==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_16==BIGDECIMALNUMBER||LA2_16==BIGINTEGERNUMBER||LA2_16==DOLLARVAR||LA2_16==DOUBLENUMBER||LA2_16==IDENTIFIER||LA2_16==INTEGER||LA2_16==QUOTEDSTRING||LA2_16==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 16, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_20 = input.LA(4);

                        if ( (LA2_20==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_20==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=9;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_7==COMMA||LA2_7==LEFT_PAREN) ) {
                    alt2=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 7, input);

                    throw nvae;

                }
                }
                break;
            case SPLIT:
                {
                alt2=3;
                }
                break;
            case IMPORT:
                {
                alt2=5;
                }
                break;
            case REGISTER:
                {
                alt2=7;
                }
                break;
            case ASSERT:
                {
                alt2=8;
                }
                break;
            case FOREACH:
                {
                alt2=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:220:13: SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMI_COLON5=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement461); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:221:13: general_statement SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_general_statement_in_statement476);
                    general_statement6=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_statement6.getTree());

                    SEMI_COLON7=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement478); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:222:13: split_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_split_clause_in_statement493);
                    split_clause8=split_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_clause8.getTree());

                    SEMI_COLON9=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement495); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:223:13: inline_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_clause_in_statement510);
                    inline_clause10=inline_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_clause10.getTree());

                    SEMI_COLON11=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement512); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:224:13: import_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_clause_in_statement527);
                    import_clause12=import_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_clause12.getTree());

                    SEMI_COLON13=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement529); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:225:13: realias_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_realias_clause_in_statement544);
                    realias_clause14=realias_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, realias_clause14.getTree());

                    SEMI_COLON15=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement546); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:226:13: register_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_register_clause_in_statement561);
                    register_clause16=register_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, register_clause16.getTree());

                    SEMI_COLON17=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement563); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:227:13: assert_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_assert_clause_in_statement578);
                    assert_clause18=assert_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assert_clause18.getTree());

                    SEMI_COLON19=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement580); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:231:13: foreach_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_statement_in_statement628);
                    foreach_statement20=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_statement20.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class nested_op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:234:1: nested_op_clause : ( LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !| LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? );
    public final QueryParser.nested_op_clause_return nested_op_clause() throws RecognitionException {
        QueryParser.nested_op_clause_return retval = new QueryParser.nested_op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN21=null;
        Token RIGHT_PAREN24=null;
        Token LEFT_PAREN25=null;
        Token FOREACH26=null;
        Token RIGHT_PAREN31=null;
        QueryParser.op_clause_return op_clause22 =null;

        QueryParser.parallel_clause_return parallel_clause23 =null;

        QueryParser.rel_return rel27 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex28 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple29 =null;

        QueryParser.parallel_clause_return parallel_clause30 =null;


        Object LEFT_PAREN21_tree=null;
        Object RIGHT_PAREN24_tree=null;
        Object LEFT_PAREN25_tree=null;
        Object FOREACH26_tree=null;
        Object RIGHT_PAREN31_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_foreach_plan_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_simple");
        RewriteRuleSubtreeStream stream_foreach_plan_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_complex");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:234:18: ( LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !| LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LEFT_PAREN) ) {
                int LA6_1 = input.LA(2);

                if ( (LA6_1==FOREACH) ) {
                    alt6=2;
                }
                else if ( (LA6_1==COGROUP||(LA6_1 >= CROSS && LA6_1 <= CUBE)||LA6_1==DEFINE||LA6_1==DISTINCT||LA6_1==FILTER||LA6_1==GROUP||LA6_1==JOIN||(LA6_1 >= LIMIT && LA6_1 <= LOAD)||LA6_1==MAPREDUCE||LA6_1==ORDER||LA6_1==RANK||LA6_1==SAMPLE||(LA6_1 >= STORE && LA6_1 <= STREAM)||LA6_1==UNION) ) {
                    alt6=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:234:20: LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN21=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_nested_op_clause637); if (state.failed) return retval;

                    pushFollow(FOLLOW_op_clause_in_nested_op_clause640);
                    op_clause22=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_clause22.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:234:42: ( parallel_clause )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==PARALLEL) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:234:42: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_nested_op_clause642);
                            parallel_clause23=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, parallel_clause23.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN24=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_nested_op_clause645); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:235:20: LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN
                    {
                    LEFT_PAREN25=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_nested_op_clause667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN25);


                    FOREACH26=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_op_clause669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH26);


                    pushFollow(FOLLOW_rel_in_nested_op_clause671);
                    rel27=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel27.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:235:43: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) )
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==LEFT_CURLY) ) {
                        alt5=1;
                    }
                    else if ( (LA5_0==GENERATE) ) {
                        alt5=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 5, 0, input);

                        throw nvae;

                    }
                    switch (alt5) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:235:45: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_nested_op_clause675);
                            foreach_plan_complex28=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex28.getTree());

                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:235:68: ( foreach_plan_simple ( parallel_clause )? )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:235:68: ( foreach_plan_simple ( parallel_clause )? )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:235:70: foreach_plan_simple ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_nested_op_clause681);
                            foreach_plan_simple29=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple29.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:235:90: ( parallel_clause )?
                            int alt4=2;
                            int LA4_0 = input.LA(1);

                            if ( (LA4_0==PARALLEL) ) {
                                alt4=1;
                            }
                            switch (alt4) {
                                case 1 :
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:235:90: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_nested_op_clause683);
                                    parallel_clause30=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause30.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    RIGHT_PAREN31=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_nested_op_clause690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN31);


                    // AST REWRITE
                    // elements: foreach_plan_simple, rel, FOREACH, parallel_clause, foreach_plan_complex
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 236:21: -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )?
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:236:24: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_rel.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:236:39: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_1, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:236:61: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_1, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:236:84: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_0, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_clause"


    public static class general_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:1: general_statement : ( FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) | ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) );
    public final QueryParser.general_statement_return general_statement() throws RecognitionException {
        QueryParser.general_statement_return retval = new QueryParser.general_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FAT_ARROW32=null;
        Token EQUAL37=null;
        QueryParser.op_clause_return op_clause33 =null;

        QueryParser.parallel_clause_return parallel_clause34 =null;

        QueryParser.nested_op_clause_return nested_op_clause35 =null;

        QueryParser.identifier_plus_return identifier_plus36 =null;

        QueryParser.op_clause_return op_clause38 =null;

        QueryParser.parallel_clause_return parallel_clause39 =null;

        QueryParser.nested_op_clause_return nested_op_clause40 =null;


        Object FAT_ARROW32_tree=null;
        Object EQUAL37_tree=null;
        RewriteRuleTokenStream stream_FAT_ARROW=new RewriteRuleTokenStream(adaptor,"token FAT_ARROW");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule op_clause");
        RewriteRuleSubtreeStream stream_nested_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_clause");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:19: ( FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) | ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==FAT_ARROW) ) {
                alt12=1;
            }
            else if ( (LA12_0==COGROUP||(LA12_0 >= CROSS && LA12_0 <= CUBE)||LA12_0==DEFINE||LA12_0==DISTINCT||(LA12_0 >= ELSE && LA12_0 <= END)||LA12_0==FILTER||LA12_0==GROUP||LA12_0==IDENTIFIER||LA12_0==IN||LA12_0==JOIN||LA12_0==LEFT_PAREN||(LA12_0 >= LIMIT && LA12_0 <= LOAD)||LA12_0==MAPREDUCE||LA12_0==ORDER||LA12_0==RANK||LA12_0==SAMPLE||(LA12_0 >= STORE && LA12_0 <= STREAM)||LA12_0==THEN||LA12_0==UNION||LA12_0==WHEN) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:21: FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    {
                    FAT_ARROW32=(Token)match(input,FAT_ARROW,FOLLOW_FAT_ARROW_in_general_statement738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAT_ARROW.add(FAT_ARROW32);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:31: ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==COGROUP||(LA8_0 >= CROSS && LA8_0 <= CUBE)||LA8_0==DEFINE||LA8_0==DISTINCT||LA8_0==FILTER||LA8_0==GROUP||LA8_0==JOIN||(LA8_0 >= LIMIT && LA8_0 <= LOAD)||LA8_0==MAPREDUCE||LA8_0==ORDER||LA8_0==RANK||LA8_0==SAMPLE||(LA8_0 >= STORE && LA8_0 <= STREAM)||LA8_0==UNION) ) {
                        alt8=1;
                    }
                    else if ( (LA8_0==LEFT_PAREN) ) {
                        alt8=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 8, 0, input);

                        throw nvae;

                    }
                    switch (alt8) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:33: ( op_clause ( parallel_clause )? )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:33: ( op_clause ( parallel_clause )? )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:35: op_clause ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_op_clause_in_general_statement744);
                            op_clause33=op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_clause.add(op_clause33.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:45: ( parallel_clause )?
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==PARALLEL) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:45: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_general_statement746);
                                    parallel_clause34=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause34.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:66: nested_op_clause
                            {
                            pushFollow(FOLLOW_nested_op_clause_in_general_statement753);
                            nested_op_clause35=nested_op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_op_clause.add(nested_op_clause35.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: parallel_clause, nested_op_clause, op_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 239:85: -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:88: ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(IDENTIFIER, "____RESERVED____")
                        );

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:132: ( op_clause )?
                        if ( stream_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_clause.nextTree());

                        }
                        stream_op_clause.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:143: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:239:160: ( nested_op_clause )?
                        if ( stream_nested_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_nested_op_clause.nextTree());

                        }
                        stream_nested_op_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:21: ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:21: ( identifier_plus EQUAL )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case THEN:
                        case WHEN:
                            {
                            alt9=1;
                            }
                            break;
                        case CUBE:
                            {
                            int LA9_2 = input.LA(2);

                            if ( (LA9_2==EQUAL) ) {
                                alt9=1;
                            }
                            }
                            break;
                        case RANK:
                            {
                            int LA9_4 = input.LA(2);

                            if ( (LA9_4==EQUAL) ) {
                                alt9=1;
                            }
                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:23: identifier_plus EQUAL
                            {
                            pushFollow(FOLLOW_identifier_plus_in_general_statement799);
                            identifier_plus36=identifier_plus();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus36.getTree());

                            EQUAL37=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_general_statement801); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL37);


                            }
                            break;

                    }


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:48: ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==COGROUP||(LA11_0 >= CROSS && LA11_0 <= CUBE)||LA11_0==DEFINE||LA11_0==DISTINCT||LA11_0==FILTER||LA11_0==GROUP||LA11_0==JOIN||(LA11_0 >= LIMIT && LA11_0 <= LOAD)||LA11_0==MAPREDUCE||LA11_0==ORDER||LA11_0==RANK||LA11_0==SAMPLE||(LA11_0 >= STORE && LA11_0 <= STREAM)||LA11_0==UNION) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==LEFT_PAREN) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;

                    }
                    switch (alt11) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:50: ( op_clause ( parallel_clause )? )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:50: ( op_clause ( parallel_clause )? )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:52: op_clause ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_op_clause_in_general_statement810);
                            op_clause38=op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_clause.add(op_clause38.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:62: ( parallel_clause )?
                            int alt10=2;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==PARALLEL) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:62: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_general_statement812);
                                    parallel_clause39=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause39.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:83: nested_op_clause
                            {
                            pushFollow(FOLLOW_nested_op_clause_in_general_statement819);
                            nested_op_clause40=nested_op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_op_clause.add(nested_op_clause40.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: identifier_plus, nested_op_clause, parallel_clause, op_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 240:102: -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:105: ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:118: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:135: ( op_clause )?
                        if ( stream_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_clause.nextTree());

                        }
                        stream_op_clause.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:146: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:240:163: ( nested_op_clause )?
                        if ( stream_nested_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_nested_op_clause.nextTree());

                        }
                        stream_nested_op_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_statement"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:1: foreach_statement : ( FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) | ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) );
    public final QueryParser.foreach_statement_return foreach_statement() throws RecognitionException {
        QueryParser.foreach_statement_return retval = new QueryParser.foreach_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FAT_ARROW41=null;
        Token FOREACH42=null;
        Token SEMI_COLON47=null;
        Token EQUAL49=null;
        Token FOREACH50=null;
        Token SEMI_COLON55=null;
        QueryParser.rel_return rel43 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex44 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple45 =null;

        QueryParser.parallel_clause_return parallel_clause46 =null;

        QueryParser.identifier_plus_return identifier_plus48 =null;

        QueryParser.rel_return rel51 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex52 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple53 =null;

        QueryParser.parallel_clause_return parallel_clause54 =null;


        Object FAT_ARROW41_tree=null;
        Object FOREACH42_tree=null;
        Object SEMI_COLON47_tree=null;
        Object EQUAL49_tree=null;
        Object FOREACH50_tree=null;
        Object SEMI_COLON55_tree=null;
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_FAT_ARROW=new RewriteRuleTokenStream(adaptor,"token FAT_ARROW");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_foreach_plan_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_simple");
        RewriteRuleSubtreeStream stream_foreach_plan_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_complex");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:19: ( FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) | ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FAT_ARROW) ) {
                alt18=1;
            }
            else if ( (LA18_0==CUBE||(LA18_0 >= ELSE && LA18_0 <= END)||LA18_0==FOREACH||LA18_0==IDENTIFIER||LA18_0==IN||LA18_0==RANK||LA18_0==THEN||LA18_0==WHEN) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:21: FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    {
                    FAT_ARROW41=(Token)match(input,FAT_ARROW,FOLLOW_FAT_ARROW_in_foreach_statement854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAT_ARROW.add(FAT_ARROW41);


                    FOREACH42=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH42);


                    pushFollow(FOLLOW_rel_in_foreach_statement858);
                    rel43=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel43.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:43: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==LEFT_CURLY) ) {
                        alt14=1;
                    }
                    else if ( (LA14_0==GENERATE) ) {
                        alt14=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 14, 0, input);

                        throw nvae;

                    }
                    switch (alt14) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:45: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_statement862);
                            foreach_plan_complex44=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex44.getTree());

                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:68: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:68: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:70: foreach_plan_simple ( parallel_clause )? SEMI_COLON
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_statement868);
                            foreach_plan_simple45=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple45.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:90: ( parallel_clause )?
                            int alt13=2;
                            int LA13_0 = input.LA(1);

                            if ( (LA13_0==PARALLEL) ) {
                                alt13=1;
                            }
                            switch (alt13) {
                                case 1 :
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:247:90: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_foreach_statement870);
                                    parallel_clause46=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause46.getTree());

                                    }
                                    break;

                            }


                            SEMI_COLON47=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_statement873); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON47);


                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: rel, parallel_clause, foreach_plan_complex, foreach_plan_simple, FOREACH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 248:5: -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:248:8: ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(IDENTIFIER, "____RESERVED____")
                        );

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:248:52: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, stream_rel.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:248:67: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:248:89: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:248:112: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:21: ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:21: ( identifier_plus EQUAL )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==CUBE||(LA15_0 >= ELSE && LA15_0 <= END)||LA15_0==IDENTIFIER||LA15_0==IN||LA15_0==RANK||LA15_0==THEN||LA15_0==WHEN) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:23: identifier_plus EQUAL
                            {
                            pushFollow(FOLLOW_identifier_plus_in_foreach_statement933);
                            identifier_plus48=identifier_plus();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus48.getTree());

                            EQUAL49=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_statement935); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL49);


                            }
                            break;

                    }


                    FOREACH50=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH50);


                    pushFollow(FOLLOW_rel_in_foreach_statement942);
                    rel51=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel51.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:60: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==LEFT_CURLY) ) {
                        alt17=1;
                    }
                    else if ( (LA17_0==GENERATE) ) {
                        alt17=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 17, 0, input);

                        throw nvae;

                    }
                    switch (alt17) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:62: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_statement946);
                            foreach_plan_complex52=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex52.getTree());

                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:85: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:85: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:87: foreach_plan_simple ( parallel_clause )? SEMI_COLON
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_statement952);
                            foreach_plan_simple53=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple53.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:107: ( parallel_clause )?
                            int alt16=2;
                            int LA16_0 = input.LA(1);

                            if ( (LA16_0==PARALLEL) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:249:107: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_foreach_statement954);
                                    parallel_clause54=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause54.getTree());

                                    }
                                    break;

                            }


                            SEMI_COLON55=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_statement957); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON55);


                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: parallel_clause, foreach_plan_complex, foreach_plan_simple, identifier_plus, rel, FOREACH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 250:5: -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:250:8: ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:250:21: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:250:38: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, stream_rel.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:250:53: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:250:75: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:250:98: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class foreach_plan_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_complex"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:253:1: foreach_plan_complex : LEFT_CURLY nested_blk RIGHT_CURLY -> ^( FOREACH_PLAN_COMPLEX nested_blk ) ;
    public final QueryParser.foreach_plan_complex_return foreach_plan_complex() throws RecognitionException {
        QueryParser.foreach_plan_complex_return retval = new QueryParser.foreach_plan_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY56=null;
        Token RIGHT_CURLY58=null;
        QueryParser.nested_blk_return nested_blk57 =null;


        Object LEFT_CURLY56_tree=null;
        Object RIGHT_CURLY58_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_nested_blk=new RewriteRuleSubtreeStream(adaptor,"rule nested_blk");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:253:22: ( LEFT_CURLY nested_blk RIGHT_CURLY -> ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:253:24: LEFT_CURLY nested_blk RIGHT_CURLY
            {
            LEFT_CURLY56=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_foreach_plan_complex1002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY56);


            pushFollow(FOLLOW_nested_blk_in_foreach_plan_complex1004);
            nested_blk57=nested_blk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_blk.add(nested_blk57.getTree());

            RIGHT_CURLY58=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_foreach_plan_complex1006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY58);


            // AST REWRITE
            // elements: nested_blk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:58: -> ^( FOREACH_PLAN_COMPLEX nested_blk )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:253:61: ^( FOREACH_PLAN_COMPLEX nested_blk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_COMPLEX, "FOREACH_PLAN_COMPLEX")
                , root_1);

                adaptor.addChild(root_1, stream_nested_blk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_complex"


    public static class foreach_plan_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_simple"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:256:1: foreach_plan_simple : GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) ) ;
    public final QueryParser.foreach_plan_simple_return foreach_plan_simple() throws RecognitionException {
        QueryParser.foreach_plan_simple_return retval = new QueryParser.foreach_plan_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GENERATE59=null;
        Token COMMA61=null;
        QueryParser.flatten_generated_item_return flatten_generated_item60 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item62 =null;


        Object GENERATE59_tree=null;
        Object COMMA61_tree=null;
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:256:21: ( GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:256:23: GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            GENERATE59=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_foreach_plan_simple1025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE59);


            pushFollow(FOLLOW_flatten_generated_item_in_foreach_plan_simple1027);
            flatten_generated_item60=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item60.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:256:55: ( COMMA flatten_generated_item )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==COMMA) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:256:57: COMMA flatten_generated_item
            	    {
            	    COMMA61=(Token)match(input,COMMA,FOLLOW_COMMA_in_foreach_plan_simple1031); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA61);


            	    pushFollow(FOLLOW_flatten_generated_item_in_foreach_plan_simple1033);
            	    flatten_generated_item62=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item62.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            // AST REWRITE
            // elements: GENERATE, flatten_generated_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:89: -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:256:92: ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_SIMPLE, "FOREACH_PLAN_SIMPLE")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:256:115: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_2);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_2, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_simple"


    public static class macro_content_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_content"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:261:1: macro_content : LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY ;
    public final QueryParser.macro_content_return macro_content() throws RecognitionException {
        QueryParser.macro_content_return retval = new QueryParser.macro_content_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY63=null;
        Token set65=null;
        Token RIGHT_CURLY66=null;
        QueryParser.macro_content_return macro_content64 =null;


        Object LEFT_CURLY63_tree=null;
        Object set65_tree=null;
        Object RIGHT_CURLY66_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:261:15: ( LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:261:17: LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY63=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_macro_content1064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY63_tree = 
            (Object)adaptor.create(LEFT_CURLY63)
            ;
            adaptor.addChild(root_0, LEFT_CURLY63_tree);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:261:28: ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )*
            loop20:
            do {
                int alt20=3;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==LEFT_CURLY) ) {
                    alt20=1;
                }
                else if ( ((LA20_0 >= ALL && LA20_0 <= LEFT_BRACKET)||(LA20_0 >= LEFT_PAREN && LA20_0 <= RIGHT_BRACKET)||(LA20_0 >= RIGHT_PAREN && LA20_0 <= TUPLE_VAL)) ) {
                    alt20=2;
                }


                switch (alt20) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:261:30: macro_content
            	    {
            	    pushFollow(FOLLOW_macro_content_in_macro_content1068);
            	    macro_content64=macro_content();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_content64.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:261:46: ~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    set65=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ALL && input.LA(1) <= LEFT_BRACKET)||(input.LA(1) >= LEFT_PAREN && input.LA(1) <= RIGHT_BRACKET)||(input.LA(1) >= RIGHT_PAREN && input.LA(1) <= TUPLE_VAL) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set65)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            RIGHT_CURLY66=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_macro_content1084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY66_tree = 
            (Object)adaptor.create(RIGHT_CURLY66)
            ;
            adaptor.addChild(root_0, RIGHT_CURLY66_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_content"


    public static class macro_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_param_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:264:1: macro_param_clause : LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN -> ^( PARAMS ( identifier_plus )* ) ;
    public final QueryParser.macro_param_clause_return macro_param_clause() throws RecognitionException {
        QueryParser.macro_param_clause_return retval = new QueryParser.macro_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN67=null;
        Token COMMA69=null;
        Token RIGHT_PAREN71=null;
        QueryParser.identifier_plus_return identifier_plus68 =null;

        QueryParser.identifier_plus_return identifier_plus70 =null;


        Object LEFT_PAREN67_tree=null;
        Object COMMA69_tree=null;
        Object RIGHT_PAREN71_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:264:20: ( LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN -> ^( PARAMS ( identifier_plus )* ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:264:22: LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN
            {
            LEFT_PAREN67=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_macro_param_clause1093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN67);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:264:33: ( identifier_plus ( COMMA identifier_plus )* )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==CUBE||(LA22_0 >= ELSE && LA22_0 <= END)||LA22_0==IDENTIFIER||LA22_0==IN||LA22_0==RANK||LA22_0==THEN||LA22_0==WHEN) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:264:35: identifier_plus ( COMMA identifier_plus )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_macro_param_clause1097);
                    identifier_plus68=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus68.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:264:51: ( COMMA identifier_plus )*
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==COMMA) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:264:52: COMMA identifier_plus
                    	    {
                    	    COMMA69=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_param_clause1100); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA69);


                    	    pushFollow(FOLLOW_identifier_plus_in_macro_param_clause1102);
                    	    identifier_plus70=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus70.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN71=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_macro_param_clause1109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN71);


            // AST REWRITE
            // elements: identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:5: -> ^( PARAMS ( identifier_plus )* )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:265:8: ^( PARAMS ( identifier_plus )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:265:17: ( identifier_plus )*
                while ( stream_identifier_plus.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                }
                stream_identifier_plus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_param_clause"


    public static class macro_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_return_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:268:1: macro_return_clause : RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID ) -> ^( RETURN_VAL ( identifier_plus )* ) ;
    public final QueryParser.macro_return_clause_return macro_return_clause() throws RecognitionException {
        QueryParser.macro_return_clause_return retval = new QueryParser.macro_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RETURNS72=null;
        Token COMMA74=null;
        Token VOID76=null;
        QueryParser.identifier_plus_return identifier_plus73 =null;

        QueryParser.identifier_plus_return identifier_plus75 =null;


        Object RETURNS72_tree=null;
        Object COMMA74_tree=null;
        Object VOID76_tree=null;
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RETURNS=new RewriteRuleTokenStream(adaptor,"token RETURNS");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:5: ( RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID ) -> ^( RETURN_VAL ( identifier_plus )* ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:7: RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID )
            {
            RETURNS72=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_macro_return_clause1135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURNS.add(RETURNS72);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:15: ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==CUBE||(LA24_0 >= ELSE && LA24_0 <= END)||LA24_0==IDENTIFIER||LA24_0==IN||LA24_0==RANK||LA24_0==THEN||LA24_0==WHEN) ) {
                alt24=1;
            }
            else if ( (LA24_0==VOID) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }
            switch (alt24) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:16: ( identifier_plus ( COMMA identifier_plus )* )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:16: ( identifier_plus ( COMMA identifier_plus )* )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:17: identifier_plus ( COMMA identifier_plus )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_macro_return_clause1139);
                    identifier_plus73=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus73.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:33: ( COMMA identifier_plus )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:34: COMMA identifier_plus
                    	    {
                    	    COMMA74=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_return_clause1142); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA74);


                    	    pushFollow(FOLLOW_identifier_plus_in_macro_return_clause1144);
                    	    identifier_plus75=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus75.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:269:61: VOID
                    {
                    VOID76=(Token)match(input,VOID,FOLLOW_VOID_in_macro_return_clause1151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID76);


                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 270:9: -> ^( RETURN_VAL ( identifier_plus )* )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:270:12: ^( RETURN_VAL ( identifier_plus )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:270:25: ( identifier_plus )*
                while ( stream_identifier_plus.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                }
                stream_identifier_plus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_return_clause"


    public static class macro_body_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_body_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:273:1: macro_body_clause : macro_content -> ^( MACRO_BODY ) ;
    public final QueryParser.macro_body_clause_return macro_body_clause() throws RecognitionException {
        QueryParser.macro_body_clause_return retval = new QueryParser.macro_body_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_content_return macro_content77 =null;


        RewriteRuleSubtreeStream stream_macro_content=new RewriteRuleSubtreeStream(adaptor,"rule macro_content");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:273:19: ( macro_content -> ^( MACRO_BODY ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:273:21: macro_content
            {
            pushFollow(FOLLOW_macro_content_in_macro_body_clause1178);
            macro_content77=macro_content();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_content.add(macro_content77.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 273:35: -> ^( MACRO_BODY )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:273:38: ^( MACRO_BODY )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_BODY, "MACRO_BODY")
                , root_1);

                adaptor.addChild(root_1,  new PigParserNode(new CommonToken(1, (macro_content77!=null?input.toString(macro_content77.start,macro_content77.stop):null)), this.getSourceName(), (macro_content77!=null?((Token)macro_content77.start):null)) );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_body_clause"


    public static class macro_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:276:1: macro_clause : macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) ;
    public final QueryParser.macro_clause_return macro_clause() throws RecognitionException {
        QueryParser.macro_clause_return retval = new QueryParser.macro_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_param_clause_return macro_param_clause78 =null;

        QueryParser.macro_return_clause_return macro_return_clause79 =null;

        QueryParser.macro_body_clause_return macro_body_clause80 =null;


        RewriteRuleSubtreeStream stream_macro_body_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_body_clause");
        RewriteRuleSubtreeStream stream_macro_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_param_clause");
        RewriteRuleSubtreeStream stream_macro_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_return_clause");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:276:14: ( macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:276:16: macro_param_clause macro_return_clause macro_body_clause
            {
            pushFollow(FOLLOW_macro_param_clause_in_macro_clause1196);
            macro_param_clause78=macro_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_param_clause.add(macro_param_clause78.getTree());

            pushFollow(FOLLOW_macro_return_clause_in_macro_clause1198);
            macro_return_clause79=macro_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_return_clause.add(macro_return_clause79.getTree());

            pushFollow(FOLLOW_macro_body_clause_in_macro_clause1200);
            macro_body_clause80=macro_body_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_body_clause.add(macro_body_clause80.getTree());

            // AST REWRITE
            // elements: macro_body_clause, macro_return_clause, macro_param_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:5: -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:277:8: ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_DEF, "MACRO_DEF")
                , root_1);

                adaptor.addChild(root_1, stream_macro_param_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_return_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_body_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_clause"


    public static class inline_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_return_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:280:1: inline_return_clause : ( identifier_plus EQUAL -> ^( RETURN_VAL identifier_plus ) | identifier_plus ( COMMA identifier_plus )+ EQUAL -> ^( RETURN_VAL ( identifier_plus )+ ) | -> ^( RETURN_VAL ) );
    public final QueryParser.inline_return_clause_return inline_return_clause() throws RecognitionException {
        QueryParser.inline_return_clause_return retval = new QueryParser.inline_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL82=null;
        Token COMMA84=null;
        Token EQUAL86=null;
        QueryParser.identifier_plus_return identifier_plus81 =null;

        QueryParser.identifier_plus_return identifier_plus83 =null;

        QueryParser.identifier_plus_return identifier_plus85 =null;


        Object EQUAL82_tree=null;
        Object COMMA84_tree=null;
        Object EQUAL86_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:281:5: ( identifier_plus EQUAL -> ^( RETURN_VAL identifier_plus ) | identifier_plus ( COMMA identifier_plus )+ EQUAL -> ^( RETURN_VAL ( identifier_plus )+ ) | -> ^( RETURN_VAL ) )
            int alt26=3;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==IDENTIFIER) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt26=1;
                    }
                    break;
                case COMMA:
                    {
                    alt26=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt26=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA26_0==CUBE||(LA26_0 >= ELSE && LA26_0 <= END)||LA26_0==IN||LA26_0==RANK||LA26_0==THEN||LA26_0==WHEN) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt26=1;
                    }
                    break;
                case COMMA:
                    {
                    alt26=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt26=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 2, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }
            switch (alt26) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:281:7: identifier_plus EQUAL
                    {
                    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1229);
                    identifier_plus81=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus81.getTree());

                    EQUAL82=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL82);


                    // AST REWRITE
                    // elements: identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 281:29: -> ^( RETURN_VAL identifier_plus )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:281:32: ^( RETURN_VAL identifier_plus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:282:4: identifier_plus ( COMMA identifier_plus )+ EQUAL
                    {
                    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1244);
                    identifier_plus83=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus83.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:282:20: ( COMMA identifier_plus )+
                    int cnt25=0;
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==COMMA) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:282:21: COMMA identifier_plus
                    	    {
                    	    COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_return_clause1247); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA84);


                    	    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1249);
                    	    identifier_plus85=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus85.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt25 >= 1 ) break loop25;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(25, input);
                                throw eee;
                        }
                        cnt25++;
                    } while (true);


                    EQUAL86=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL86);


                    // AST REWRITE
                    // elements: identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 282:51: -> ^( RETURN_VAL ( identifier_plus )+ )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:282:54: ^( RETURN_VAL ( identifier_plus )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        if ( !(stream_identifier_plus.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:283:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 283:4: -> ^( RETURN_VAL )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:283:7: ^( RETURN_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_return_clause"


    public static class parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:286:1: parameter : ( IDENTIFIER | INTEGER | DOUBLENUMBER | BIGDECIMALNUMBER | BIGINTEGERNUMBER | QUOTEDSTRING | DOLLARVAR );
    public final QueryParser.parameter_return parameter() throws RecognitionException {
        QueryParser.parameter_return retval = new QueryParser.parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set87=null;

        Object set87_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:287:5: ( IDENTIFIER | INTEGER | DOUBLENUMBER | BIGDECIMALNUMBER | BIGINTEGERNUMBER | QUOTEDSTRING | DOLLARVAR )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set87=(Token)input.LT(1);

            if ( input.LA(1)==BIGDECIMALNUMBER||input.LA(1)==BIGINTEGERNUMBER||input.LA(1)==DOLLARVAR||input.LA(1)==DOUBLENUMBER||input.LA(1)==IDENTIFIER||input.LA(1)==INTEGER||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set87)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter"


    public static class inline_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_param_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:296:1: inline_param_clause : LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) ;
    public final QueryParser.inline_param_clause_return inline_param_clause() throws RecognitionException {
        QueryParser.inline_param_clause_return retval = new QueryParser.inline_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN88=null;
        Token COMMA90=null;
        Token RIGHT_PAREN92=null;
        QueryParser.parameter_return parameter89 =null;

        QueryParser.parameter_return parameter91 =null;


        Object LEFT_PAREN88_tree=null;
        Object COMMA90_tree=null;
        Object RIGHT_PAREN92_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:296:21: ( LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:296:23: LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN
            {
            LEFT_PAREN88=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inline_param_clause1341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN88);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:296:34: ( parameter ( COMMA parameter )* )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==BIGDECIMALNUMBER||LA28_0==BIGINTEGERNUMBER||LA28_0==DOLLARVAR||LA28_0==DOUBLENUMBER||LA28_0==IDENTIFIER||LA28_0==INTEGER||LA28_0==QUOTEDSTRING) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:296:36: parameter ( COMMA parameter )*
                    {
                    pushFollow(FOLLOW_parameter_in_inline_param_clause1345);
                    parameter89=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter89.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:296:46: ( COMMA parameter )*
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==COMMA) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:296:47: COMMA parameter
                    	    {
                    	    COMMA90=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_param_clause1348); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA90);


                    	    pushFollow(FOLLOW_parameter_in_inline_param_clause1350);
                    	    parameter91=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter91.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN92=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inline_param_clause1357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN92);


            // AST REWRITE
            // elements: parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:5: -> ^( PARAMS ( parameter )* )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:297:8: ^( PARAMS ( parameter )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:297:17: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_param_clause"


    public static class inline_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:300:1: inline_clause : inline_return_clause identifier_plus inline_param_clause -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause ) ;
    public final QueryParser.inline_clause_return inline_clause() throws RecognitionException {
        QueryParser.inline_clause_return retval = new QueryParser.inline_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.inline_return_clause_return inline_return_clause93 =null;

        QueryParser.identifier_plus_return identifier_plus94 =null;

        QueryParser.inline_param_clause_return inline_param_clause95 =null;


        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_inline_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_return_clause");
        RewriteRuleSubtreeStream stream_inline_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_param_clause");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:300:15: ( inline_return_clause identifier_plus inline_param_clause -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:300:17: inline_return_clause identifier_plus inline_param_clause
            {
            pushFollow(FOLLOW_inline_return_clause_in_inline_clause1379);
            inline_return_clause93=inline_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_return_clause.add(inline_return_clause93.getTree());

            pushFollow(FOLLOW_identifier_plus_in_inline_clause1381);
            identifier_plus94=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus94.getTree());

            pushFollow(FOLLOW_inline_param_clause_in_inline_clause1383);
            inline_param_clause95=inline_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_param_clause.add(inline_param_clause95.getTree());

            // AST REWRITE
            // elements: identifier_plus, inline_param_clause, inline_return_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:5: -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:301:8: ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_INLINE, "MACRO_INLINE")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_inline_return_clause.nextTree());

                adaptor.addChild(root_1, stream_inline_param_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_clause"


    public static class simple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:306:1: simple_type : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | DATETIME | BIGINTEGER | BIGDECIMAL | CHARARRAY | BYTEARRAY );
    public final QueryParser.simple_type_return simple_type() throws RecognitionException {
        QueryParser.simple_type_return retval = new QueryParser.simple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set96=null;

        Object set96_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:306:13: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | DATETIME | BIGINTEGER | BIGDECIMAL | CHARARRAY | BYTEARRAY )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set96=(Token)input.LT(1);

            if ( input.LA(1)==BIGDECIMAL||input.LA(1)==BIGINTEGER||input.LA(1)==BOOLEAN||input.LA(1)==BYTEARRAY||input.LA(1)==CHARARRAY||input.LA(1)==DATETIME||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set96)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class implicit_tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_tuple_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:309:1: implicit_tuple_type : LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final QueryParser.implicit_tuple_type_return implicit_tuple_type() throws RecognitionException {
        QueryParser.implicit_tuple_type_return retval = new QueryParser.implicit_tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN97=null;
        Token RIGHT_PAREN99=null;
        QueryParser.field_def_list_return field_def_list98 =null;


        Object LEFT_PAREN97_tree=null;
        Object RIGHT_PAREN99_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_field_def_list=new RewriteRuleSubtreeStream(adaptor,"rule field_def_list");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:309:21: ( LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:309:23: LEFT_PAREN ( field_def_list )? RIGHT_PAREN
            {
            LEFT_PAREN97=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_implicit_tuple_type1455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN97);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:309:34: ( field_def_list )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( ((LA29_0 >= BAG && LA29_0 <= BIGDECIMAL)||LA29_0==BIGINTEGER||LA29_0==BOOLEAN||LA29_0==BYTEARRAY||LA29_0==CHARARRAY||(LA29_0 >= CUBE && LA29_0 <= DATETIME)||LA29_0==DOUBLE||(LA29_0 >= ELSE && LA29_0 <= END)||LA29_0==FLOAT||LA29_0==IDENTIFIER||LA29_0==IN||LA29_0==INT||(LA29_0 >= LEFT_BRACKET && LA29_0 <= LEFT_PAREN)||LA29_0==LONG||LA29_0==MAP||LA29_0==RANK||LA29_0==THEN||LA29_0==TUPLE||LA29_0==WHEN) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:309:34: field_def_list
                    {
                    pushFollow(FOLLOW_field_def_list_in_implicit_tuple_type1457);
                    field_def_list98=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_def_list.add(field_def_list98.getTree());

                    }
                    break;

            }


            RIGHT_PAREN99=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_implicit_tuple_type1460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN99);


            // AST REWRITE
            // elements: field_def_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:62: -> ^( TUPLE_TYPE ( field_def_list )? )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:309:65: ^( TUPLE_TYPE ( field_def_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE, "TUPLE_TYPE")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:309:79: ( field_def_list )?
                if ( stream_field_def_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_field_def_list.nextTree());

                }
                stream_field_def_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_tuple_type"


    public static class explicit_tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_tuple_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:312:1: explicit_tuple_type : TUPLE ! implicit_tuple_type ;
    public final QueryParser.explicit_tuple_type_return explicit_tuple_type() throws RecognitionException {
        QueryParser.explicit_tuple_type_return retval = new QueryParser.explicit_tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE100=null;
        QueryParser.implicit_tuple_type_return implicit_tuple_type101 =null;


        Object TUPLE100_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:312:21: ( TUPLE ! implicit_tuple_type )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:312:23: TUPLE ! implicit_tuple_type
            {
            root_0 = (Object)adaptor.nil();


            TUPLE100=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_explicit_tuple_type1480); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_tuple_type_in_explicit_tuple_type1483);
            implicit_tuple_type101=implicit_tuple_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type101.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_tuple_type"


    public static class explicit_tuple_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_tuple_type_cast"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:315:1: explicit_tuple_type_cast : TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* ) ;
    public final QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast() throws RecognitionException {
        QueryParser.explicit_tuple_type_cast_return retval = new QueryParser.explicit_tuple_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE102=null;
        Token LEFT_PAREN103=null;
        Token COMMA105=null;
        Token RIGHT_PAREN107=null;
        QueryParser.explicit_type_cast_return explicit_type_cast104 =null;

        QueryParser.explicit_type_cast_return explicit_type_cast106 =null;


        Object TUPLE102_tree=null;
        Object LEFT_PAREN103_tree=null;
        Object COMMA105_tree=null;
        Object RIGHT_PAREN107_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_explicit_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type_cast");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:315:26: ( TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:315:28: TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN
            {
            TUPLE102=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_explicit_tuple_type_cast1492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE102);


            LEFT_PAREN103=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_explicit_tuple_type_cast1494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN103);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:315:45: ( explicit_type_cast ( COMMA explicit_type_cast )* )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0 >= BAG && LA31_0 <= BIGDECIMAL)||LA31_0==BIGINTEGER||LA31_0==BOOLEAN||LA31_0==BYTEARRAY||LA31_0==CHARARRAY||LA31_0==DATETIME||LA31_0==DOUBLE||LA31_0==FLOAT||LA31_0==INT||LA31_0==LONG||LA31_0==MAP||LA31_0==TUPLE) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:315:47: explicit_type_cast ( COMMA explicit_type_cast )*
                    {
                    pushFollow(FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1498);
                    explicit_type_cast104=explicit_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast104.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:315:66: ( COMMA explicit_type_cast )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==COMMA) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:315:68: COMMA explicit_type_cast
                    	    {
                    	    COMMA105=(Token)match(input,COMMA,FOLLOW_COMMA_in_explicit_tuple_type_cast1502); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA105);


                    	    pushFollow(FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1504);
                    	    explicit_type_cast106=explicit_type_cast();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast106.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN107=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_explicit_tuple_type_cast1512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN107);


            // AST REWRITE
            // elements: explicit_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:5: -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:316:8: ^( TUPLE_TYPE_CAST ( explicit_type_cast )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE_CAST, "TUPLE_TYPE_CAST")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:316:27: ( explicit_type_cast )*
                while ( stream_explicit_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_explicit_type_cast.nextTree());

                }
                stream_explicit_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_tuple_type_cast"


    public static class tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:319:1: tuple_type : ( implicit_tuple_type | explicit_tuple_type );
    public final QueryParser.tuple_type_return tuple_type() throws RecognitionException {
        QueryParser.tuple_type_return retval = new QueryParser.tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_tuple_type_return implicit_tuple_type108 =null;

        QueryParser.explicit_tuple_type_return explicit_tuple_type109 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:319:12: ( implicit_tuple_type | explicit_tuple_type )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==LEFT_PAREN) ) {
                alt32=1;
            }
            else if ( (LA32_0==TUPLE) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:319:14: implicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_tuple_type_in_tuple_type1536);
                    implicit_tuple_type108=implicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type108.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:319:36: explicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_in_tuple_type1540);
                    explicit_tuple_type109=explicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type109.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class implicit_bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_bag_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:322:1: implicit_bag_type : ( LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? ) );
    public final QueryParser.implicit_bag_type_return implicit_bag_type() throws RecognitionException {
        QueryParser.implicit_bag_type_return retval = new QueryParser.implicit_bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY110=null;
        Token NULL111=null;
        Token COLON112=null;
        Token RIGHT_CURLY114=null;
        Token LEFT_CURLY115=null;
        Token COLON117=null;
        Token RIGHT_CURLY119=null;
        QueryParser.tuple_type_return tuple_type113 =null;

        QueryParser.identifier_plus_return identifier_plus116 =null;

        QueryParser.tuple_type_return tuple_type118 =null;


        Object LEFT_CURLY110_tree=null;
        Object NULL111_tree=null;
        Object COLON112_tree=null;
        Object RIGHT_CURLY114_tree=null;
        Object LEFT_CURLY115_tree=null;
        Object COLON117_tree=null;
        Object RIGHT_CURLY119_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_NULL=new RewriteRuleTokenStream(adaptor,"token NULL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_tuple_type=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:322:19: ( LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==LEFT_CURLY) ) {
                int LA36_1 = input.LA(2);

                if ( (LA36_1==NULL) ) {
                    alt36=1;
                }
                else if ( (LA36_1==CUBE||(LA36_1 >= ELSE && LA36_1 <= END)||LA36_1==IDENTIFIER||LA36_1==IN||LA36_1==LEFT_PAREN||LA36_1==RANK||LA36_1==RIGHT_CURLY||LA36_1==THEN||LA36_1==TUPLE||LA36_1==WHEN) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:322:21: LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY
                    {
                    LEFT_CURLY110=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_implicit_bag_type1549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY110);


                    NULL111=(Token)match(input,NULL,FOLLOW_NULL_in_implicit_bag_type1551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NULL.add(NULL111);


                    COLON112=(Token)match(input,COLON,FOLLOW_COLON_in_implicit_bag_type1553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON112);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:322:43: ( tuple_type )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==LEFT_PAREN||LA33_0==TUPLE) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:322:43: tuple_type
                            {
                            pushFollow(FOLLOW_tuple_type_in_implicit_bag_type1555);
                            tuple_type113=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type113.getTree());

                            }
                            break;

                    }


                    RIGHT_CURLY114=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_implicit_bag_type1558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY114);


                    // AST REWRITE
                    // elements: tuple_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 322:67: -> ^( BAG_TYPE ( tuple_type )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:322:70: ^( BAG_TYPE ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:322:82: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:323:21: LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY
                    {
                    LEFT_CURLY115=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_implicit_bag_type1591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY115);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:323:32: ( ( identifier_plus COLON )? tuple_type )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==CUBE||(LA35_0 >= ELSE && LA35_0 <= END)||LA35_0==IDENTIFIER||LA35_0==IN||LA35_0==LEFT_PAREN||LA35_0==RANK||LA35_0==THEN||LA35_0==TUPLE||LA35_0==WHEN) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:323:34: ( identifier_plus COLON )? tuple_type
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:323:34: ( identifier_plus COLON )?
                            int alt34=2;
                            int LA34_0 = input.LA(1);

                            if ( (LA34_0==CUBE||(LA34_0 >= ELSE && LA34_0 <= END)||LA34_0==IDENTIFIER||LA34_0==IN||LA34_0==RANK||LA34_0==THEN||LA34_0==WHEN) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:323:36: identifier_plus COLON
                                    {
                                    pushFollow(FOLLOW_identifier_plus_in_implicit_bag_type1597);
                                    identifier_plus116=identifier_plus();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus116.getTree());

                                    COLON117=(Token)match(input,COLON,FOLLOW_COLON_in_implicit_bag_type1599); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(COLON117);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_tuple_type_in_implicit_bag_type1604);
                            tuple_type118=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type118.getTree());

                            }
                            break;

                    }


                    RIGHT_CURLY119=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_implicit_bag_type1609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY119);


                    // AST REWRITE
                    // elements: tuple_type, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 323:87: -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:323:90: ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:323:102: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:323:119: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_bag_type"


    public static class explicit_bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_bag_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:326:1: explicit_bag_type : BAG ! implicit_bag_type ;
    public final QueryParser.explicit_bag_type_return explicit_bag_type() throws RecognitionException {
        QueryParser.explicit_bag_type_return retval = new QueryParser.explicit_bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG120=null;
        QueryParser.implicit_bag_type_return implicit_bag_type121 =null;


        Object BAG120_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:326:19: ( BAG ! implicit_bag_type )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:326:21: BAG ! implicit_bag_type
            {
            root_0 = (Object)adaptor.nil();


            BAG120=(Token)match(input,BAG,FOLLOW_BAG_in_explicit_bag_type1632); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_bag_type_in_explicit_bag_type1635);
            implicit_bag_type121=implicit_bag_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_bag_type121.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_bag_type"


    public static class explicit_bag_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_bag_type_cast"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:329:1: explicit_bag_type_cast : BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? ) ;
    public final QueryParser.explicit_bag_type_cast_return explicit_bag_type_cast() throws RecognitionException {
        QueryParser.explicit_bag_type_cast_return retval = new QueryParser.explicit_bag_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG122=null;
        Token LEFT_CURLY123=null;
        Token RIGHT_CURLY125=null;
        QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast124 =null;


        Object BAG122_tree=null;
        Object LEFT_CURLY123_tree=null;
        Object RIGHT_CURLY125_tree=null;
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_explicit_tuple_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_tuple_type_cast");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:329:24: ( BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:329:26: BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY
            {
            BAG122=(Token)match(input,BAG,FOLLOW_BAG_in_explicit_bag_type_cast1644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BAG.add(BAG122);


            LEFT_CURLY123=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_explicit_bag_type_cast1646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY123);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:329:41: ( explicit_tuple_type_cast )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==TUPLE) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:329:41: explicit_tuple_type_cast
                    {
                    pushFollow(FOLLOW_explicit_tuple_type_cast_in_explicit_bag_type_cast1648);
                    explicit_tuple_type_cast124=explicit_tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_tuple_type_cast.add(explicit_tuple_type_cast124.getTree());

                    }
                    break;

            }


            RIGHT_CURLY125=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_explicit_bag_type_cast1651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY125);


            // AST REWRITE
            // elements: explicit_tuple_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:79: -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:329:82: ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BAG_TYPE_CAST, "BAG_TYPE_CAST")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:329:99: ( explicit_tuple_type_cast )?
                if ( stream_explicit_tuple_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_explicit_tuple_type_cast.nextTree());

                }
                stream_explicit_tuple_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_bag_type_cast"


    public static class implicit_map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_map_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:332:1: implicit_map_type : LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) ;
    public final QueryParser.implicit_map_type_return implicit_map_type() throws RecognitionException {
        QueryParser.implicit_map_type_return retval = new QueryParser.implicit_map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET126=null;
        Token RIGHT_BRACKET128=null;
        QueryParser.type_return type127 =null;


        Object LEFT_BRACKET126_tree=null;
        Object RIGHT_BRACKET128_tree=null;
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:332:19: ( LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:332:21: LEFT_BRACKET ( type )? RIGHT_BRACKET
            {
            LEFT_BRACKET126=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_implicit_map_type1671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET126);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:332:34: ( type )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( ((LA38_0 >= BAG && LA38_0 <= BIGDECIMAL)||LA38_0==BIGINTEGER||LA38_0==BOOLEAN||LA38_0==BYTEARRAY||LA38_0==CHARARRAY||LA38_0==DATETIME||LA38_0==DOUBLE||LA38_0==FLOAT||LA38_0==INT||(LA38_0 >= LEFT_BRACKET && LA38_0 <= LEFT_PAREN)||LA38_0==LONG||LA38_0==MAP||LA38_0==TUPLE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:332:34: type
                    {
                    pushFollow(FOLLOW_type_in_implicit_map_type1673);
                    type127=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type127.getTree());

                    }
                    break;

            }


            RIGHT_BRACKET128=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_implicit_map_type1676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET128);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:54: -> ^( MAP_TYPE ( type )? )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:332:57: ^( MAP_TYPE ( type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MAP_TYPE, "MAP_TYPE")
                , root_1);

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:332:69: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_map_type"


    public static class explicit_map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_map_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:335:1: explicit_map_type : MAP ! implicit_map_type ;
    public final QueryParser.explicit_map_type_return explicit_map_type() throws RecognitionException {
        QueryParser.explicit_map_type_return retval = new QueryParser.explicit_map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAP129=null;
        QueryParser.implicit_map_type_return implicit_map_type130 =null;


        Object MAP129_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:335:19: ( MAP ! implicit_map_type )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:335:21: MAP ! implicit_map_type
            {
            root_0 = (Object)adaptor.nil();


            MAP129=(Token)match(input,MAP,FOLLOW_MAP_in_explicit_map_type1696); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_map_type_in_explicit_map_type1699);
            implicit_map_type130=implicit_map_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type130.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_map_type"


    public static class map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:338:1: map_type : ( implicit_map_type | explicit_map_type );
    public final QueryParser.map_type_return map_type() throws RecognitionException {
        QueryParser.map_type_return retval = new QueryParser.map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_map_type_return implicit_map_type131 =null;

        QueryParser.explicit_map_type_return explicit_map_type132 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:338:10: ( implicit_map_type | explicit_map_type )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==LEFT_BRACKET) ) {
                alt39=1;
            }
            else if ( (LA39_0==MAP) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:338:12: implicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_map_type_in_map_type1708);
                    implicit_map_type131=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type131.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:338:32: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_map_type1712);
                    explicit_map_type132=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type132.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class explicit_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:341:1: explicit_type : ( simple_type | explicit_tuple_type | explicit_bag_type | explicit_map_type );
    public final QueryParser.explicit_type_return explicit_type() throws RecognitionException {
        QueryParser.explicit_type_return retval = new QueryParser.explicit_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type133 =null;

        QueryParser.explicit_tuple_type_return explicit_tuple_type134 =null;

        QueryParser.explicit_bag_type_return explicit_bag_type135 =null;

        QueryParser.explicit_map_type_return explicit_map_type136 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:341:15: ( simple_type | explicit_tuple_type | explicit_bag_type | explicit_map_type )
            int alt40=4;
            switch ( input.LA(1) ) {
            case BIGDECIMAL:
            case BIGINTEGER:
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DATETIME:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt40=1;
                }
                break;
            case TUPLE:
                {
                alt40=2;
                }
                break;
            case BAG:
                {
                alt40=3;
                }
                break;
            case MAP:
                {
                alt40=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }

            switch (alt40) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:341:17: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_explicit_type1721);
                    simple_type133=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type133.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:341:31: explicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_in_explicit_type1725);
                    explicit_tuple_type134=explicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type134.getTree());

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:341:53: explicit_bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_bag_type_in_explicit_type1729);
                    explicit_bag_type135=explicit_bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_bag_type135.getTree());

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:341:73: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_explicit_type1733);
                    explicit_map_type136=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type136.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_type"


    public static class implicit_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:344:1: implicit_type : ( implicit_tuple_type | implicit_bag_type | implicit_map_type );
    public final QueryParser.implicit_type_return implicit_type() throws RecognitionException {
        QueryParser.implicit_type_return retval = new QueryParser.implicit_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_tuple_type_return implicit_tuple_type137 =null;

        QueryParser.implicit_bag_type_return implicit_bag_type138 =null;

        QueryParser.implicit_map_type_return implicit_map_type139 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:344:15: ( implicit_tuple_type | implicit_bag_type | implicit_map_type )
            int alt41=3;
            switch ( input.LA(1) ) {
            case LEFT_PAREN:
                {
                alt41=1;
                }
                break;
            case LEFT_CURLY:
                {
                alt41=2;
                }
                break;
            case LEFT_BRACKET:
                {
                alt41=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }

            switch (alt41) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:344:17: implicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_tuple_type_in_implicit_type1742);
                    implicit_tuple_type137=implicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type137.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:344:39: implicit_bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_bag_type_in_implicit_type1746);
                    implicit_bag_type138=implicit_bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_bag_type138.getTree());

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:344:59: implicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_map_type_in_implicit_type1750);
                    implicit_map_type139=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type139.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_type"


    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:347:1: type : ( explicit_type | implicit_type );
    public final QueryParser.type_return type() throws RecognitionException {
        QueryParser.type_return retval = new QueryParser.type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.explicit_type_return explicit_type140 =null;

        QueryParser.implicit_type_return implicit_type141 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:347:6: ( explicit_type | implicit_type )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( ((LA42_0 >= BAG && LA42_0 <= BIGDECIMAL)||LA42_0==BIGINTEGER||LA42_0==BOOLEAN||LA42_0==BYTEARRAY||LA42_0==CHARARRAY||LA42_0==DATETIME||LA42_0==DOUBLE||LA42_0==FLOAT||LA42_0==INT||LA42_0==LONG||LA42_0==MAP||LA42_0==TUPLE) ) {
                alt42=1;
            }
            else if ( ((LA42_0 >= LEFT_BRACKET && LA42_0 <= LEFT_PAREN)) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:347:8: explicit_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_type_in_type1759);
                    explicit_type140=explicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_type140.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:347:24: implicit_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_type_in_type1763);
                    implicit_type141=implicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_type141.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class explicit_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_type_cast"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:350:1: explicit_type_cast : ( simple_type | explicit_map_type | explicit_tuple_type_cast | explicit_bag_type_cast );
    public final QueryParser.explicit_type_cast_return explicit_type_cast() throws RecognitionException {
        QueryParser.explicit_type_cast_return retval = new QueryParser.explicit_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type142 =null;

        QueryParser.explicit_map_type_return explicit_map_type143 =null;

        QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast144 =null;

        QueryParser.explicit_bag_type_cast_return explicit_bag_type_cast145 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:350:20: ( simple_type | explicit_map_type | explicit_tuple_type_cast | explicit_bag_type_cast )
            int alt43=4;
            switch ( input.LA(1) ) {
            case BIGDECIMAL:
            case BIGINTEGER:
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DATETIME:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt43=1;
                }
                break;
            case MAP:
                {
                alt43=2;
                }
                break;
            case TUPLE:
                {
                alt43=3;
                }
                break;
            case BAG:
                {
                alt43=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }

            switch (alt43) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:350:22: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_explicit_type_cast1772);
                    simple_type142=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type142.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:350:36: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_explicit_type_cast1776);
                    explicit_map_type143=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type143.getTree());

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:350:56: explicit_tuple_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_cast_in_explicit_type_cast1780);
                    explicit_tuple_type_cast144=explicit_tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type_cast144.getTree());

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:350:83: explicit_bag_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_bag_type_cast_in_explicit_type_cast1784);
                    explicit_bag_type_cast145=explicit_bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_bag_type_cast145.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_type_cast"


    public static class import_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:355:1: import_clause : IMPORT ^ QUOTEDSTRING ;
    public final QueryParser.import_clause_return import_clause() throws RecognitionException {
        QueryParser.import_clause_return retval = new QueryParser.import_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT146=null;
        Token QUOTEDSTRING147=null;

        Object IMPORT146_tree=null;
        Object QUOTEDSTRING147_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:355:15: ( IMPORT ^ QUOTEDSTRING )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:355:17: IMPORT ^ QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            IMPORT146=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_import_clause1795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT146_tree = 
            (Object)adaptor.create(IMPORT146)
            ;
            root_0 = (Object)adaptor.becomeRoot(IMPORT146_tree, root_0);
            }

            QUOTEDSTRING147=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_import_clause1798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING147_tree = 
            (Object)adaptor.create(QUOTEDSTRING147)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING147_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_clause"


    public static class register_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "register_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:358:1: register_clause : REGISTER ^ QUOTEDSTRING ( USING identifier_plus AS identifier_plus )? ;
    public final QueryParser.register_clause_return register_clause() throws RecognitionException {
        QueryParser.register_clause_return retval = new QueryParser.register_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGISTER148=null;
        Token QUOTEDSTRING149=null;
        Token USING150=null;
        Token AS152=null;
        QueryParser.identifier_plus_return identifier_plus151 =null;

        QueryParser.identifier_plus_return identifier_plus153 =null;


        Object REGISTER148_tree=null;
        Object QUOTEDSTRING149_tree=null;
        Object USING150_tree=null;
        Object AS152_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:358:17: ( REGISTER ^ QUOTEDSTRING ( USING identifier_plus AS identifier_plus )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:358:19: REGISTER ^ QUOTEDSTRING ( USING identifier_plus AS identifier_plus )?
            {
            root_0 = (Object)adaptor.nil();


            REGISTER148=(Token)match(input,REGISTER,FOLLOW_REGISTER_in_register_clause1807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGISTER148_tree = 
            (Object)adaptor.create(REGISTER148)
            ;
            root_0 = (Object)adaptor.becomeRoot(REGISTER148_tree, root_0);
            }

            QUOTEDSTRING149=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_register_clause1810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING149_tree = 
            (Object)adaptor.create(QUOTEDSTRING149)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING149_tree);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:358:42: ( USING identifier_plus AS identifier_plus )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==USING) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:358:43: USING identifier_plus AS identifier_plus
                    {
                    USING150=(Token)match(input,USING,FOLLOW_USING_in_register_clause1813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING150_tree = 
                    (Object)adaptor.create(USING150)
                    ;
                    adaptor.addChild(root_0, USING150_tree);
                    }

                    pushFollow(FOLLOW_identifier_plus_in_register_clause1815);
                    identifier_plus151=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus151.getTree());

                    AS152=(Token)match(input,AS,FOLLOW_AS_in_register_clause1817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS152_tree = 
                    (Object)adaptor.create(AS152)
                    ;
                    adaptor.addChild(root_0, AS152_tree);
                    }

                    pushFollow(FOLLOW_identifier_plus_in_register_clause1819);
                    identifier_plus153=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus153.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "register_clause"


    public static class define_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:361:1: define_clause : DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause ) ;
    public final QueryParser.define_clause_return define_clause() throws RecognitionException {
        QueryParser.define_clause_return retval = new QueryParser.define_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE154=null;
        Token IDENTIFIER155=null;
        QueryParser.cmd_return cmd156 =null;

        QueryParser.func_clause_return func_clause157 =null;

        QueryParser.macro_clause_return macro_clause158 =null;


        Object DEFINE154_tree=null;
        Object IDENTIFIER155_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:361:15: ( DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:361:17: DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause )
            {
            root_0 = (Object)adaptor.nil();


            DEFINE154=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause1830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE154_tree = 
            (Object)adaptor.create(DEFINE154)
            ;
            root_0 = (Object)adaptor.becomeRoot(DEFINE154_tree, root_0);
            }

            IDENTIFIER155=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_define_clause1833); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER155_tree = 
            (Object)adaptor.create(IDENTIFIER155)
            ;
            adaptor.addChild(root_0, IDENTIFIER155_tree);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:361:36: ( cmd | func_clause | macro_clause )
            int alt45=3;
            switch ( input.LA(1) ) {
            case EXECCOMMAND:
                {
                alt45=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case ASSERT:
            case BAG:
            case BIGDECIMAL:
            case BIGINTEGER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case CUBE:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case NOT:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case REGISTER:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt45=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt45=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }

            switch (alt45) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:361:38: cmd
                    {
                    pushFollow(FOLLOW_cmd_in_define_clause1837);
                    cmd156=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cmd156.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:361:44: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_define_clause1841);
                    func_clause157=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause157.getTree());

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:361:58: macro_clause
                    {
                    pushFollow(FOLLOW_macro_clause_in_define_clause1845);
                    macro_clause158=macro_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_clause158.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class realias_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "realias_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:364:1: realias_clause : identifier_plus EQUAL identifier_plus -> ^( REALIAS identifier_plus identifier_plus ) ;
    public final QueryParser.realias_clause_return realias_clause() throws RecognitionException {
        QueryParser.realias_clause_return retval = new QueryParser.realias_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL160=null;
        QueryParser.identifier_plus_return identifier_plus159 =null;

        QueryParser.identifier_plus_return identifier_plus161 =null;


        Object EQUAL160_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:364:16: ( identifier_plus EQUAL identifier_plus -> ^( REALIAS identifier_plus identifier_plus ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:364:18: identifier_plus EQUAL identifier_plus
            {
            pushFollow(FOLLOW_identifier_plus_in_realias_clause1855);
            identifier_plus159=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus159.getTree());

            EQUAL160=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_realias_clause1857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL160);


            pushFollow(FOLLOW_identifier_plus_in_realias_clause1859);
            identifier_plus161=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus161.getTree());

            // AST REWRITE
            // elements: identifier_plus, identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:56: -> ^( REALIAS identifier_plus identifier_plus )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:364:59: ^( REALIAS identifier_plus identifier_plus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(REALIAS, "REALIAS")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "realias_clause"


    public static class parallel_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:367:1: parallel_clause : PARALLEL ^ INTEGER ;
    public final QueryParser.parallel_clause_return parallel_clause() throws RecognitionException {
        QueryParser.parallel_clause_return retval = new QueryParser.parallel_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARALLEL162=null;
        Token INTEGER163=null;

        Object PARALLEL162_tree=null;
        Object INTEGER163_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:367:17: ( PARALLEL ^ INTEGER )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:367:19: PARALLEL ^ INTEGER
            {
            root_0 = (Object)adaptor.nil();


            PARALLEL162=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause1878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL162_tree = 
            (Object)adaptor.create(PARALLEL162)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARALLEL162_tree, root_0);
            }

            INTEGER163=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause1881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER163_tree = 
            (Object)adaptor.create(INTEGER163)
            ;
            adaptor.addChild(root_0, INTEGER163_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:370:1: op_clause : ( define_clause | load_clause | group_clause | cube_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | rank_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause );
    public final QueryParser.op_clause_return op_clause() throws RecognitionException {
        QueryParser.op_clause_return retval = new QueryParser.op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.define_clause_return define_clause164 =null;

        QueryParser.load_clause_return load_clause165 =null;

        QueryParser.group_clause_return group_clause166 =null;

        QueryParser.cube_clause_return cube_clause167 =null;

        QueryParser.store_clause_return store_clause168 =null;

        QueryParser.filter_clause_return filter_clause169 =null;

        QueryParser.distinct_clause_return distinct_clause170 =null;

        QueryParser.limit_clause_return limit_clause171 =null;

        QueryParser.sample_clause_return sample_clause172 =null;

        QueryParser.order_clause_return order_clause173 =null;

        QueryParser.rank_clause_return rank_clause174 =null;

        QueryParser.cross_clause_return cross_clause175 =null;

        QueryParser.join_clause_return join_clause176 =null;

        QueryParser.union_clause_return union_clause177 =null;

        QueryParser.stream_clause_return stream_clause178 =null;

        QueryParser.mr_clause_return mr_clause179 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:370:11: ( define_clause | load_clause | group_clause | cube_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | rank_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause )
            int alt46=16;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt46=1;
                }
                break;
            case LOAD:
                {
                alt46=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt46=3;
                }
                break;
            case CUBE:
                {
                alt46=4;
                }
                break;
            case STORE:
                {
                alt46=5;
                }
                break;
            case FILTER:
                {
                alt46=6;
                }
                break;
            case DISTINCT:
                {
                alt46=7;
                }
                break;
            case LIMIT:
                {
                alt46=8;
                }
                break;
            case SAMPLE:
                {
                alt46=9;
                }
                break;
            case ORDER:
                {
                alt46=10;
                }
                break;
            case RANK:
                {
                alt46=11;
                }
                break;
            case CROSS:
                {
                alt46=12;
                }
                break;
            case JOIN:
                {
                alt46=13;
                }
                break;
            case UNION:
                {
                alt46=14;
                }
                break;
            case STREAM:
                {
                alt46=15;
                }
                break;
            case MAPREDUCE:
                {
                alt46=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:370:13: define_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_clause_in_op_clause1890);
                    define_clause164=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_clause164.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:371:13: load_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_load_clause_in_op_clause1904);
                    load_clause165=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause165.getTree());

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:372:13: group_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_group_clause_in_op_clause1918);
                    group_clause166=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause166.getTree());

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:373:13: cube_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cube_clause_in_op_clause1932);
                    cube_clause167=cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cube_clause167.getTree());

                    }
                    break;
                case 5 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:374:13: store_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_store_clause_in_op_clause1946);
                    store_clause168=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause168.getTree());

                    }
                    break;
                case 6 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:375:13: filter_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_filter_clause_in_op_clause1960);
                    filter_clause169=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter_clause169.getTree());

                    }
                    break;
                case 7 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:376:13: distinct_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_distinct_clause_in_op_clause1974);
                    distinct_clause170=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_clause170.getTree());

                    }
                    break;
                case 8 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:377:13: limit_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_limit_clause_in_op_clause1988);
                    limit_clause171=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause171.getTree());

                    }
                    break;
                case 9 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:378:13: sample_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sample_clause_in_op_clause2002);
                    sample_clause172=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sample_clause172.getTree());

                    }
                    break;
                case 10 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:379:13: order_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_clause_in_op_clause2016);
                    order_clause173=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_clause173.getTree());

                    }
                    break;
                case 11 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:380:13: rank_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rank_clause_in_op_clause2030);
                    rank_clause174=rank_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_clause174.getTree());

                    }
                    break;
                case 12 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:381:13: cross_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cross_clause_in_op_clause2044);
                    cross_clause175=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cross_clause175.getTree());

                    }
                    break;
                case 13 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:382:13: join_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_clause_in_op_clause2058);
                    join_clause176=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause176.getTree());

                    }
                    break;
                case 14 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:383:13: union_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_clause_in_op_clause2072);
                    union_clause177=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, union_clause177.getTree());

                    }
                    break;
                case 15 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:384:13: stream_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stream_clause_in_op_clause2086);
                    stream_clause178=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_clause178.getTree());

                    }
                    break;
                case 16 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:385:13: mr_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_mr_clause_in_op_clause2100);
                    mr_clause179=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mr_clause179.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class ship_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:388:1: ship_clause : SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !;
    public final QueryParser.ship_clause_return ship_clause() throws RecognitionException {
        QueryParser.ship_clause_return retval = new QueryParser.ship_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SHIP180=null;
        Token LEFT_PAREN181=null;
        Token RIGHT_PAREN183=null;
        QueryParser.path_list_return path_list182 =null;


        Object SHIP180_tree=null;
        Object LEFT_PAREN181_tree=null;
        Object RIGHT_PAREN183_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:388:13: ( SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !)
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:388:15: SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            SHIP180=(Token)match(input,SHIP,FOLLOW_SHIP_in_ship_clause2109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP180_tree = 
            (Object)adaptor.create(SHIP180)
            ;
            root_0 = (Object)adaptor.becomeRoot(SHIP180_tree, root_0);
            }

            LEFT_PAREN181=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ship_clause2112); if (state.failed) return retval;

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:388:33: ( path_list )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==QUOTEDSTRING) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:388:33: path_list
                    {
                    pushFollow(FOLLOW_path_list_in_ship_clause2115);
                    path_list182=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list182.getTree());

                    }
                    break;

            }


            RIGHT_PAREN183=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ship_clause2118); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:391:1: path_list : QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ ;
    public final QueryParser.path_list_return path_list() throws RecognitionException {
        QueryParser.path_list_return retval = new QueryParser.path_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING184=null;
        Token COMMA185=null;
        Token QUOTEDSTRING186=null;

        Object QUOTEDSTRING184_tree=null;
        Object COMMA185_tree=null;
        Object QUOTEDSTRING186_tree=null;
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:391:11: ( QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:391:13: QUOTEDSTRING ( COMMA QUOTEDSTRING )*
            {
            QUOTEDSTRING184=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list2128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING184);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:391:26: ( COMMA QUOTEDSTRING )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==COMMA) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:391:28: COMMA QUOTEDSTRING
            	    {
            	    COMMA185=(Token)match(input,COMMA,FOLLOW_COMMA_in_path_list2132); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA185);


            	    QUOTEDSTRING186=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list2134); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING186);


            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            // AST REWRITE
            // elements: QUOTEDSTRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:50: -> ( QUOTEDSTRING )+
            {
                if ( !(stream_QUOTEDSTRING.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_QUOTEDSTRING.hasNext() ) {
                    adaptor.addChild(root_0, 
                    stream_QUOTEDSTRING.nextNode()
                    );

                }
                stream_QUOTEDSTRING.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:394:1: cache_clause : CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !;
    public final QueryParser.cache_clause_return cache_clause() throws RecognitionException {
        QueryParser.cache_clause_return retval = new QueryParser.cache_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CACHE187=null;
        Token LEFT_PAREN188=null;
        Token RIGHT_PAREN190=null;
        QueryParser.path_list_return path_list189 =null;


        Object CACHE187_tree=null;
        Object LEFT_PAREN188_tree=null;
        Object RIGHT_PAREN190_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:394:14: ( CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !)
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:394:16: CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            CACHE187=(Token)match(input,CACHE,FOLLOW_CACHE_in_cache_clause2151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE187_tree = 
            (Object)adaptor.create(CACHE187)
            ;
            root_0 = (Object)adaptor.becomeRoot(CACHE187_tree, root_0);
            }

            LEFT_PAREN188=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cache_clause2154); if (state.failed) return retval;

            pushFollow(FOLLOW_path_list_in_cache_clause2157);
            path_list189=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list189.getTree());

            RIGHT_PAREN190=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cache_clause2159); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:397:1: input_clause : INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.input_clause_return input_clause() throws RecognitionException {
        QueryParser.input_clause_return retval = new QueryParser.input_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INPUT191=null;
        Token LEFT_PAREN192=null;
        Token RIGHT_PAREN194=null;
        QueryParser.stream_cmd_list_return stream_cmd_list193 =null;


        Object INPUT191_tree=null;
        Object LEFT_PAREN192_tree=null;
        Object RIGHT_PAREN194_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:397:14: ( INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:397:16: INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            INPUT191=(Token)match(input,INPUT,FOLLOW_INPUT_in_input_clause2169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT191_tree = 
            (Object)adaptor.create(INPUT191)
            ;
            root_0 = (Object)adaptor.becomeRoot(INPUT191_tree, root_0);
            }

            LEFT_PAREN192=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_input_clause2172); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_input_clause2175);
            stream_cmd_list193=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list193.getTree());

            RIGHT_PAREN194=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_input_clause2177); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class output_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:400:1: output_clause : OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.output_clause_return output_clause() throws RecognitionException {
        QueryParser.output_clause_return retval = new QueryParser.output_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OUTPUT195=null;
        Token LEFT_PAREN196=null;
        Token RIGHT_PAREN198=null;
        QueryParser.stream_cmd_list_return stream_cmd_list197 =null;


        Object OUTPUT195_tree=null;
        Object LEFT_PAREN196_tree=null;
        Object RIGHT_PAREN198_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:400:15: ( OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:400:17: OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            OUTPUT195=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause2187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT195_tree = 
            (Object)adaptor.create(OUTPUT195)
            ;
            root_0 = (Object)adaptor.becomeRoot(OUTPUT195_tree, root_0);
            }

            LEFT_PAREN196=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_output_clause2190); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_output_clause2193);
            stream_cmd_list197=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list197.getTree());

            RIGHT_PAREN198=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_output_clause2195); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:403:1: error_clause : STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !;
    public final QueryParser.error_clause_return error_clause() throws RecognitionException {
        QueryParser.error_clause_return retval = new QueryParser.error_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STDERROR199=null;
        Token LEFT_PAREN200=null;
        Token QUOTEDSTRING201=null;
        Token LIMIT202=null;
        Token INTEGER203=null;
        Token RIGHT_PAREN204=null;

        Object STDERROR199_tree=null;
        Object LEFT_PAREN200_tree=null;
        Object QUOTEDSTRING201_tree=null;
        Object LIMIT202_tree=null;
        Object INTEGER203_tree=null;
        Object RIGHT_PAREN204_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:403:14: ( STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !)
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:403:16: STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            STDERROR199=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause2205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR199_tree = 
            (Object)adaptor.create(STDERROR199)
            ;
            root_0 = (Object)adaptor.becomeRoot(STDERROR199_tree, root_0);
            }

            LEFT_PAREN200=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_error_clause2208); if (state.failed) return retval;

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:403:38: ( QUOTEDSTRING ( LIMIT ! INTEGER )? )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==QUOTEDSTRING) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:403:40: QUOTEDSTRING ( LIMIT ! INTEGER )?
                    {
                    QUOTEDSTRING201=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause2213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING201_tree = 
                    (Object)adaptor.create(QUOTEDSTRING201)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING201_tree);
                    }

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:403:53: ( LIMIT ! INTEGER )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==LIMIT) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:403:55: LIMIT ! INTEGER
                            {
                            LIMIT202=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_error_clause2217); if (state.failed) return retval;

                            INTEGER203=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause2220); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INTEGER203_tree = 
                            (Object)adaptor.create(INTEGER203)
                            ;
                            adaptor.addChild(root_0, INTEGER203_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            RIGHT_PAREN204=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_error_clause2228); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:406:1: load_clause : LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )? ;
    public final QueryParser.load_clause_return load_clause() throws RecognitionException {
        QueryParser.load_clause_return retval = new QueryParser.load_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LOAD205=null;
        Token QUOTEDSTRING206=null;
        Token USING207=null;
        QueryParser.func_clause_return func_clause208 =null;

        QueryParser.as_clause_return as_clause209 =null;


        Object LOAD205_tree=null;
        Object QUOTEDSTRING206_tree=null;
        Object USING207_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:406:13: ( LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:406:15: LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            LOAD205=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_clause2238); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD205_tree = 
            (Object)adaptor.create(LOAD205)
            ;
            root_0 = (Object)adaptor.becomeRoot(LOAD205_tree, root_0);
            }

            QUOTEDSTRING206=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_load_clause2241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING206_tree = 
            (Object)adaptor.create(QUOTEDSTRING206)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING206_tree);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:406:34: ( USING ! func_clause )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==USING) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:406:36: USING ! func_clause
                    {
                    USING207=(Token)match(input,USING,FOLLOW_USING_in_load_clause2245); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_load_clause2248);
                    func_clause208=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause208.getTree());

                    }
                    break;

            }


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:406:58: ( as_clause )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==AS) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:406:58: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_load_clause2253);
                    as_clause209=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause209.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class func_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:409:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );
    public final QueryParser.func_clause_return func_clause() throws RecognitionException {
        QueryParser.func_clause_return retval = new QueryParser.func_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN212=null;
        Token RIGHT_PAREN214=null;
        QueryParser.func_name_return func_name210 =null;

        QueryParser.func_name_return func_name211 =null;

        QueryParser.func_args_return func_args213 =null;


        Object LEFT_PAREN212_tree=null;
        Object RIGHT_PAREN214_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:409:13: ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) )
            int alt54=2;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:409:15: func_name
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2263);
                    func_name210=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name210.getTree());

                    // AST REWRITE
                    // elements: func_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 410:12: -> ^( FUNC_REF func_name )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:410:15: ^( FUNC_REF func_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_REF, "FUNC_REF")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:411:15: func_name LEFT_PAREN ( func_args )? RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2300);
                    func_name211=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name211.getTree());

                    LEFT_PAREN212=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_clause2302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN212);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:411:36: ( func_args )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==MULTILINE_QUOTEDSTRING||LA53_0==QUOTEDSTRING) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:411:36: func_args
                            {
                            pushFollow(FOLLOW_func_args_in_func_clause2304);
                            func_args213=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_args.add(func_args213.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN214=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_clause2307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN214);


                    // AST REWRITE
                    // elements: func_name, func_args
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 412:12: -> ^( FUNC func_name ( func_args )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:412:15: ^( FUNC func_name ( func_args )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC, "FUNC")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:412:33: ( func_args )?
                        if ( stream_func_args.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_args.nextTree());

                        }
                        stream_func_args.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_without_columns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name_without_columns"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:416:1: func_name_without_columns : eid_without_columns ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_without_columns_return func_name_without_columns() throws RecognitionException {
        QueryParser.func_name_without_columns_return retval = new QueryParser.func_name_without_columns_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set216=null;
        QueryParser.eid_without_columns_return eid_without_columns215 =null;

        QueryParser.eid_return eid217 =null;


        Object set216_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:416:27: ( eid_without_columns ( ( PERIOD | DOLLAR ) eid )* )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:416:29: eid_without_columns ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_without_columns_in_func_name_without_columns2341);
            eid_without_columns215=eid_without_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid_without_columns215.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:416:49: ( ( PERIOD | DOLLAR ) eid )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==DOLLAR||LA55_0==PERIOD) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:416:51: ( PERIOD | DOLLAR ) eid
            	    {
            	    set216=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set216)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name_without_columns2355);
            	    eid217=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid217.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name_without_columns"


    public static class func_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:419:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_return func_name() throws RecognitionException {
        QueryParser.func_name_return retval = new QueryParser.func_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set219=null;
        QueryParser.eid_return eid218 =null;

        QueryParser.eid_return eid220 =null;


        Object set219_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:419:11: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:419:13: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_in_func_name2367);
            eid218=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid218.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:419:17: ( ( PERIOD | DOLLAR ) eid )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==DOLLAR||LA56_0==PERIOD) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:419:19: ( PERIOD | DOLLAR ) eid
            	    {
            	    set219=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set219)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name2381);
            	    eid220=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid220.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args_string"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:422:1: func_args_string : ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING );
    public final QueryParser.func_args_string_return func_args_string() throws RecognitionException {
        QueryParser.func_args_string_return retval = new QueryParser.func_args_string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set221=null;

        Object set221_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:422:18: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set221=(Token)input.LT(1);

            if ( input.LA(1)==MULTILINE_QUOTEDSTRING||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set221)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args_string"


    public static class func_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:425:1: func_args : func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ ;
    public final QueryParser.func_args_return func_args() throws RecognitionException {
        QueryParser.func_args_return retval = new QueryParser.func_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA223=null;
        QueryParser.func_args_string_return func_args_string222 =null;

        QueryParser.func_args_string_return func_args_string224 =null;


        Object COMMA223_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_func_args_string=new RewriteRuleSubtreeStream(adaptor,"rule func_args_string");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:425:11: ( func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:425:13: func_args_string ( COMMA func_args_string )*
            {
            pushFollow(FOLLOW_func_args_string_in_func_args2406);
            func_args_string222=func_args_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string222.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:425:30: ( COMMA func_args_string )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==COMMA) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:425:32: COMMA func_args_string
            	    {
            	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_args2410); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA223);


            	    pushFollow(FOLLOW_func_args_string_in_func_args2412);
            	    func_args_string224=func_args_string();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string224.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            // AST REWRITE
            // elements: func_args_string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:10: -> ( func_args_string )+
            {
                if ( !(stream_func_args_string.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_func_args_string.hasNext() ) {
                    adaptor.addChild(root_0, stream_func_args_string.nextTree());

                }
                stream_func_args_string.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:429:1: group_clause : ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )? ;
    public final QueryParser.group_clause_return group_clause() throws RecognitionException {
        QueryParser.group_clause_return retval = new QueryParser.group_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set225=null;
        Token USING227=null;
        Token QUOTEDSTRING228=null;
        QueryParser.group_item_list_return group_item_list226 =null;

        QueryParser.partition_clause_return partition_clause229 =null;


        Object set225_tree=null;
        Object USING227_tree=null;
        Object QUOTEDSTRING228_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:429:14: ( ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:429:16: ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set225=(Token)input.LT(1);

            set225=(Token)input.LT(1);

            if ( input.LA(1)==COGROUP||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set225)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_group_item_list_in_group_clause2449);
            group_item_list226=group_item_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_item_list226.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:429:53: ( USING ! QUOTEDSTRING )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==USING) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:429:55: USING ! QUOTEDSTRING
                    {
                    USING227=(Token)match(input,USING,FOLLOW_USING_in_group_clause2453); if (state.failed) return retval;

                    QUOTEDSTRING228=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_clause2456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING228_tree = 
                    (Object)adaptor.create(QUOTEDSTRING228)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING228_tree);
                    }

                    }
                    break;

            }


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:429:78: ( partition_clause )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==PARTITION) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:429:78: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_group_clause2461);
                    partition_clause229=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause229.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:432:1: group_item_list : group_item ( COMMA group_item )* -> ( group_item )+ ;
    public final QueryParser.group_item_list_return group_item_list() throws RecognitionException {
        QueryParser.group_item_list_return retval = new QueryParser.group_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA231=null;
        QueryParser.group_item_return group_item230 =null;

        QueryParser.group_item_return group_item232 =null;


        Object COMMA231_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_group_item=new RewriteRuleSubtreeStream(adaptor,"rule group_item");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:432:17: ( group_item ( COMMA group_item )* -> ( group_item )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:432:19: group_item ( COMMA group_item )*
            {
            pushFollow(FOLLOW_group_item_in_group_item_list2471);
            group_item230=group_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_item.add(group_item230.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:432:30: ( COMMA group_item )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:432:32: COMMA group_item
            	    {
            	    COMMA231=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_item_list2475); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA231);


            	    pushFollow(FOLLOW_group_item_in_group_item_list2477);
            	    group_item232=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_group_item.add(group_item232.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            // AST REWRITE
            // elements: group_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:16: -> ( group_item )+
            {
                if ( !(stream_group_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_group_item.hasNext() ) {
                    adaptor.addChild(root_0, stream_group_item.nextTree());

                }
                stream_group_item.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item_list"


    public static class group_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:436:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final QueryParser.group_item_return group_item() throws RecognitionException {
        QueryParser.group_item_return retval = new QueryParser.group_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ALL235=null;
        Token ANY236=null;
        Token set237=null;
        QueryParser.rel_return rel233 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause234 =null;


        Object ALL235_tree=null;
        Object ANY236_tree=null;
        Object set237_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:436:12: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:436:14: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_rel_in_group_item2509);
            rel233=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel233.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:436:18: ( join_group_by_clause | ALL | ANY )
            int alt61=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt61=1;
                }
                break;
            case ALL:
                {
                alt61=2;
                }
                break;
            case ANY:
                {
                alt61=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }

            switch (alt61) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:436:20: join_group_by_clause
                    {
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item2513);
                    join_group_by_clause234=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_clause234.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:436:43: ALL
                    {
                    ALL235=(Token)match(input,ALL,FOLLOW_ALL_in_group_item2517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL235_tree = 
                    (Object)adaptor.create(ALL235)
                    ;
                    adaptor.addChild(root_0, ALL235_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:436:49: ANY
                    {
                    ANY236=(Token)match(input,ANY,FOLLOW_ANY_in_group_item2521); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY236_tree = 
                    (Object)adaptor.create(ANY236)
                    ;
                    adaptor.addChild(root_0, ANY236_tree);
                    }

                    }
                    break;

            }


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:436:55: ( INNER | OUTER )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==INNER||LA62_0==OUTER) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
                    {
                    set237=(Token)input.LT(1);

                    if ( input.LA(1)==INNER||input.LA(1)==OUTER ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set237)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class identifier_plus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier_plus"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:441:1: identifier_plus : ( IDENTIFIER | reserved_identifier_whitelist -> IDENTIFIER[$reserved_identifier_whitelist.text] );
    public final QueryParser.identifier_plus_return identifier_plus() throws RecognitionException {
        QueryParser.identifier_plus_return retval = new QueryParser.identifier_plus_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER238=null;
        QueryParser.reserved_identifier_whitelist_return reserved_identifier_whitelist239 =null;


        Object IDENTIFIER238_tree=null;
        RewriteRuleSubtreeStream stream_reserved_identifier_whitelist=new RewriteRuleSubtreeStream(adaptor,"rule reserved_identifier_whitelist");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:441:17: ( IDENTIFIER | reserved_identifier_whitelist -> IDENTIFIER[$reserved_identifier_whitelist.text] )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==IDENTIFIER) ) {
                alt63=1;
            }
            else if ( (LA63_0==CUBE||(LA63_0 >= ELSE && LA63_0 <= END)||LA63_0==IN||LA63_0==RANK||LA63_0==THEN||LA63_0==WHEN) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:441:19: IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();


                    IDENTIFIER238=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier_plus2545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER238_tree = 
                    (Object)adaptor.create(IDENTIFIER238)
                    ;
                    adaptor.addChild(root_0, IDENTIFIER238_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:441:32: reserved_identifier_whitelist
                    {
                    pushFollow(FOLLOW_reserved_identifier_whitelist_in_identifier_plus2549);
                    reserved_identifier_whitelist239=reserved_identifier_whitelist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reserved_identifier_whitelist.add(reserved_identifier_whitelist239.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 441:62: -> IDENTIFIER[$reserved_identifier_whitelist.text]
                    {
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(IDENTIFIER, (reserved_identifier_whitelist239!=null?input.toString(reserved_identifier_whitelist239.start,reserved_identifier_whitelist239.stop):null))
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "identifier_plus"


    public static class explicit_field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_field_def"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:444:1: explicit_field_def : ( identifier_plus ( COLON type )? -> ^( FIELD_DEF identifier_plus ( type )? ) | explicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type ) );
    public final QueryParser.explicit_field_def_return explicit_field_def() throws RecognitionException {
        QueryParser.explicit_field_def_return retval = new QueryParser.explicit_field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON241=null;
        QueryParser.identifier_plus_return identifier_plus240 =null;

        QueryParser.type_return type242 =null;

        QueryParser.explicit_type_return explicit_type243 =null;


        Object COLON241_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_explicit_type=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:444:20: ( identifier_plus ( COLON type )? -> ^( FIELD_DEF identifier_plus ( type )? ) | explicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type ) )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==CUBE||(LA65_0 >= ELSE && LA65_0 <= END)||LA65_0==IDENTIFIER||LA65_0==IN||LA65_0==RANK||LA65_0==THEN||LA65_0==WHEN) ) {
                alt65=1;
            }
            else if ( ((LA65_0 >= BAG && LA65_0 <= BIGDECIMAL)||LA65_0==BIGINTEGER||LA65_0==BOOLEAN||LA65_0==BYTEARRAY||LA65_0==CHARARRAY||LA65_0==DATETIME||LA65_0==DOUBLE||LA65_0==FLOAT||LA65_0==INT||LA65_0==LONG||LA65_0==MAP||LA65_0==TUPLE) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:444:22: identifier_plus ( COLON type )?
                    {
                    pushFollow(FOLLOW_identifier_plus_in_explicit_field_def2563);
                    identifier_plus240=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus240.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:444:38: ( COLON type )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==COLON) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:444:40: COLON type
                            {
                            COLON241=(Token)match(input,COLON,FOLLOW_COLON_in_explicit_field_def2567); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON241);


                            pushFollow(FOLLOW_type_in_explicit_field_def2569);
                            type242=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type242.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: identifier_plus, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 444:54: -> ^( FIELD_DEF identifier_plus ( type )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:444:57: ^( FIELD_DEF identifier_plus ( type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF, "FIELD_DEF")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:444:86: ( type )?
                        if ( stream_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_type.nextTree());

                        }
                        stream_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:445:22: explicit_type
                    {
                    pushFollow(FOLLOW_explicit_type_in_explicit_field_def2608);
                    explicit_type243=explicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type.add(explicit_type243.getTree());

                    // AST REWRITE
                    // elements: explicit_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 445:36: -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:445:39: ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF_WITHOUT_IDENTIFIER, "FIELD_DEF_WITHOUT_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_explicit_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_field_def"


    public static class field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:448:1: field_def : ( explicit_field_def | implicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type ) );
    public final QueryParser.field_def_return field_def() throws RecognitionException {
        QueryParser.field_def_return retval = new QueryParser.field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.explicit_field_def_return explicit_field_def244 =null;

        QueryParser.implicit_type_return implicit_type245 =null;


        RewriteRuleSubtreeStream stream_implicit_type=new RewriteRuleSubtreeStream(adaptor,"rule implicit_type");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:448:11: ( explicit_field_def | implicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( ((LA66_0 >= BAG && LA66_0 <= BIGDECIMAL)||LA66_0==BIGINTEGER||LA66_0==BOOLEAN||LA66_0==BYTEARRAY||LA66_0==CHARARRAY||(LA66_0 >= CUBE && LA66_0 <= DATETIME)||LA66_0==DOUBLE||(LA66_0 >= ELSE && LA66_0 <= END)||LA66_0==FLOAT||LA66_0==IDENTIFIER||LA66_0==IN||LA66_0==INT||LA66_0==LONG||LA66_0==MAP||LA66_0==RANK||LA66_0==THEN||LA66_0==TUPLE||LA66_0==WHEN) ) {
                alt66=1;
            }
            else if ( ((LA66_0 >= LEFT_BRACKET && LA66_0 <= LEFT_PAREN)) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:448:13: explicit_field_def
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_field_def_in_field_def2627);
                    explicit_field_def244=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def244.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:449:13: implicit_type
                    {
                    pushFollow(FOLLOW_implicit_type_in_field_def2641);
                    implicit_type245=implicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implicit_type.add(implicit_type245.getTree());

                    // AST REWRITE
                    // elements: implicit_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 449:27: -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:449:30: ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF_WITHOUT_IDENTIFIER, "FIELD_DEF_WITHOUT_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_implicit_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:452:1: field_def_list : field_def ( COMMA ! field_def )* ;
    public final QueryParser.field_def_list_return field_def_list() throws RecognitionException {
        QueryParser.field_def_list_return retval = new QueryParser.field_def_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA247=null;
        QueryParser.field_def_return field_def246 =null;

        QueryParser.field_def_return field_def248 =null;


        Object COMMA247_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:452:16: ( field_def ( COMMA ! field_def )* )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:452:18: field_def ( COMMA ! field_def )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_def_in_field_def_list2660);
            field_def246=field_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def246.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:452:28: ( COMMA ! field_def )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==COMMA) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:452:30: COMMA ! field_def
            	    {
            	    COMMA247=(Token)match(input,COMMA,FOLLOW_COMMA_in_field_def_list2664); if (state.failed) return retval;

            	    pushFollow(FOLLOW_field_def_in_field_def_list2667);
            	    field_def248=field_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def248.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:1: as_clause : AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) ) ;
    public final QueryParser.as_clause_return as_clause() throws RecognitionException {
        QueryParser.as_clause_return retval = new QueryParser.as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS249=null;
        Token LEFT_PAREN251=null;
        Token RIGHT_PAREN253=null;
        QueryParser.explicit_field_def_return explicit_field_def250 =null;

        QueryParser.field_def_list_return field_def_list252 =null;


        Object AS249_tree=null;
        Object LEFT_PAREN251_tree=null;
        Object RIGHT_PAREN253_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:11: ( AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:13: AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) )
            {
            root_0 = (Object)adaptor.nil();


            AS249=(Token)match(input,AS,FOLLOW_AS_in_as_clause2682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS249_tree = 
            (Object)adaptor.create(AS249)
            ;
            root_0 = (Object)adaptor.becomeRoot(AS249_tree, root_0);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:17: ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( ((LA69_0 >= BAG && LA69_0 <= BIGDECIMAL)||LA69_0==BIGINTEGER||LA69_0==BOOLEAN||LA69_0==BYTEARRAY||LA69_0==CHARARRAY||(LA69_0 >= CUBE && LA69_0 <= DATETIME)||LA69_0==DOUBLE||(LA69_0 >= ELSE && LA69_0 <= END)||LA69_0==FLOAT||LA69_0==IDENTIFIER||LA69_0==IN||LA69_0==INT||LA69_0==LONG||LA69_0==MAP||LA69_0==RANK||LA69_0==THEN||LA69_0==TUPLE||LA69_0==WHEN) ) {
                alt69=1;
            }
            else if ( (LA69_0==LEFT_PAREN) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:19: explicit_field_def
                    {
                    pushFollow(FOLLOW_explicit_field_def_in_as_clause2687);
                    explicit_field_def250=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def250.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:40: ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !)
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:40: ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !)
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:42: LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !
                    {
                    LEFT_PAREN251=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_as_clause2693); if (state.failed) return retval;

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:54: ( field_def_list )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( ((LA68_0 >= BAG && LA68_0 <= BIGDECIMAL)||LA68_0==BIGINTEGER||LA68_0==BOOLEAN||LA68_0==BYTEARRAY||LA68_0==CHARARRAY||(LA68_0 >= CUBE && LA68_0 <= DATETIME)||LA68_0==DOUBLE||(LA68_0 >= ELSE && LA68_0 <= END)||LA68_0==FLOAT||LA68_0==IDENTIFIER||LA68_0==IN||LA68_0==INT||(LA68_0 >= LEFT_BRACKET && LA68_0 <= LEFT_PAREN)||LA68_0==LONG||LA68_0==MAP||LA68_0==RANK||LA68_0==THEN||LA68_0==TUPLE||LA68_0==WHEN) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:458:54: field_def_list
                            {
                            pushFollow(FOLLOW_field_def_list_in_as_clause2696);
                            field_def_list252=field_def_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list252.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN253=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_as_clause2699); if (state.failed) return retval;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class stream_cmd_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:463:1: stream_cmd_list : stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ ;
    public final QueryParser.stream_cmd_list_return stream_cmd_list() throws RecognitionException {
        QueryParser.stream_cmd_list_return retval = new QueryParser.stream_cmd_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA255=null;
        QueryParser.stream_cmd_return stream_cmd254 =null;

        QueryParser.stream_cmd_return stream_cmd256 =null;


        Object COMMA255_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_stream_cmd=new RewriteRuleSubtreeStream(adaptor,"rule stream_cmd");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:463:17: ( stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:463:19: stream_cmd ( COMMA stream_cmd )*
            {
            pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list2715);
            stream_cmd254=stream_cmd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd254.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:463:30: ( COMMA stream_cmd )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:463:32: COMMA stream_cmd
            	    {
            	    COMMA255=(Token)match(input,COMMA,FOLLOW_COMMA_in_stream_cmd_list2719); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA255);


            	    pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list2721);
            	    stream_cmd256=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd256.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            // AST REWRITE
            // elements: stream_cmd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:52: -> ( stream_cmd )+
            {
                if ( !(stream_stream_cmd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stream_cmd.hasNext() ) {
                    adaptor.addChild(root_0, stream_stream_cmd.nextTree());

                }
                stream_stream_cmd.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd_list"


    public static class stream_cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:466:1: stream_cmd : ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )? ;
    public final QueryParser.stream_cmd_return stream_cmd() throws RecognitionException {
        QueryParser.stream_cmd_return retval = new QueryParser.stream_cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set257=null;
        Token USING258=null;
        QueryParser.func_clause_return func_clause259 =null;


        Object set257_tree=null;
        Object USING258_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:466:12: ( ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:466:14: ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set257=(Token)input.LT(1);

            set257=(Token)input.LT(1);

            if ( input.LA(1)==QUOTEDSTRING||(input.LA(1) >= STDIN && input.LA(1) <= STDOUT) ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set257)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:466:49: ( USING ! func_clause )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==USING) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:466:51: USING ! func_clause
                    {
                    USING258=(Token)match(input,USING,FOLLOW_USING_in_stream_cmd2755); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_stream_cmd2758);
                    func_clause259=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause259.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:1: cmd : EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ;
    public final QueryParser.cmd_return cmd() throws RecognitionException {
        QueryParser.cmd_return retval = new QueryParser.cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXECCOMMAND260=null;
        QueryParser.ship_clause_return ship_clause261 =null;

        QueryParser.cache_clause_return cache_clause262 =null;

        QueryParser.input_clause_return input_clause263 =null;

        QueryParser.output_clause_return output_clause264 =null;

        QueryParser.error_clause_return error_clause265 =null;


        Object EXECCOMMAND260_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:5: ( EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:7: EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            {
            root_0 = (Object)adaptor.nil();


            EXECCOMMAND260=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd2770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND260_tree = 
            (Object)adaptor.create(EXECCOMMAND260)
            ;
            root_0 = (Object)adaptor.becomeRoot(EXECCOMMAND260_tree, root_0);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:20: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            loop72:
            do {
                int alt72=6;
                switch ( input.LA(1) ) {
                case SHIP:
                    {
                    alt72=1;
                    }
                    break;
                case CACHE:
                    {
                    alt72=2;
                    }
                    break;
                case INPUT:
                    {
                    alt72=3;
                    }
                    break;
                case OUTPUT:
                    {
                    alt72=4;
                    }
                    break;
                case STDERROR:
                    {
                    alt72=5;
                    }
                    break;

                }

                switch (alt72) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:22: ship_clause
            	    {
            	    pushFollow(FOLLOW_ship_clause_in_cmd2775);
            	    ship_clause261=ship_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ship_clause261.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:36: cache_clause
            	    {
            	    pushFollow(FOLLOW_cache_clause_in_cmd2779);
            	    cache_clause262=cache_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cache_clause262.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:51: input_clause
            	    {
            	    pushFollow(FOLLOW_input_clause_in_cmd2783);
            	    input_clause263=input_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, input_clause263.getTree());

            	    }
            	    break;
            	case 4 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:66: output_clause
            	    {
            	    pushFollow(FOLLOW_output_clause_in_cmd2787);
            	    output_clause264=output_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, output_clause264.getTree());

            	    }
            	    break;
            	case 5 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:469:82: error_clause
            	    {
            	    pushFollow(FOLLOW_error_clause_in_cmd2791);
            	    error_clause265=error_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, error_clause265.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:472:1: rel : ( identifier_plus | previous_rel | nested_op_clause );
    public final QueryParser.rel_return rel() throws RecognitionException {
        QueryParser.rel_return retval = new QueryParser.rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.identifier_plus_return identifier_plus266 =null;

        QueryParser.previous_rel_return previous_rel267 =null;

        QueryParser.nested_op_clause_return nested_op_clause268 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:472:5: ( identifier_plus | previous_rel | nested_op_clause )
            int alt73=3;
            switch ( input.LA(1) ) {
            case CUBE:
            case ELSE:
            case END:
            case IDENTIFIER:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                alt73=1;
                }
                break;
            case ARROBA:
                {
                alt73=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt73=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }

            switch (alt73) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:472:7: identifier_plus
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_rel2803);
                    identifier_plus266=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus266.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:472:25: previous_rel
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_previous_rel_in_rel2807);
                    previous_rel267=previous_rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, previous_rel267.getTree());

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:472:40: nested_op_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_op_clause_in_rel2811);
                    nested_op_clause268=nested_op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_clause268.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class previous_rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "previous_rel"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:475:1: previous_rel : ARROBA ;
    public final QueryParser.previous_rel_return previous_rel() throws RecognitionException {
        QueryParser.previous_rel_return retval = new QueryParser.previous_rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ARROBA269=null;

        Object ARROBA269_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:475:14: ( ARROBA )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:475:16: ARROBA
            {
            root_0 = (Object)adaptor.nil();


            ARROBA269=(Token)match(input,ARROBA,FOLLOW_ARROBA_in_previous_rel2820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ARROBA269_tree = 
            (Object)adaptor.create(ARROBA269)
            ;
            adaptor.addChild(root_0, ARROBA269_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "previous_rel"


    public static class store_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:478:1: store_clause : STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )? ;
    public final QueryParser.store_clause_return store_clause() throws RecognitionException {
        QueryParser.store_clause_return retval = new QueryParser.store_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STORE270=null;
        Token INTO272=null;
        Token QUOTEDSTRING273=null;
        Token USING274=null;
        QueryParser.rel_return rel271 =null;

        QueryParser.func_clause_return func_clause275 =null;


        Object STORE270_tree=null;
        Object INTO272_tree=null;
        Object QUOTEDSTRING273_tree=null;
        Object USING274_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:478:14: ( STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:478:16: STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STORE270=(Token)match(input,STORE,FOLLOW_STORE_in_store_clause2829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE270_tree = 
            (Object)adaptor.create(STORE270)
            ;
            root_0 = (Object)adaptor.becomeRoot(STORE270_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_store_clause2832);
            rel271=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel271.getTree());

            INTO272=(Token)match(input,INTO,FOLLOW_INTO_in_store_clause2834); if (state.failed) return retval;

            QUOTEDSTRING273=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_store_clause2837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING273_tree = 
            (Object)adaptor.create(QUOTEDSTRING273)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING273_tree);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:478:46: ( USING ! func_clause )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==USING) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:478:48: USING ! func_clause
                    {
                    USING274=(Token)match(input,USING,FOLLOW_USING_in_store_clause2841); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_store_clause2844);
                    func_clause275=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause275.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class assert_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assert_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:481:1: assert_clause : ASSERT ^ rel BY ! cond ( COMMA ! QUOTEDSTRING )? ;
    public final QueryParser.assert_clause_return assert_clause() throws RecognitionException {
        QueryParser.assert_clause_return retval = new QueryParser.assert_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSERT276=null;
        Token BY278=null;
        Token COMMA280=null;
        Token QUOTEDSTRING281=null;
        QueryParser.rel_return rel277 =null;

        QueryParser.cond_return cond279 =null;


        Object ASSERT276_tree=null;
        Object BY278_tree=null;
        Object COMMA280_tree=null;
        Object QUOTEDSTRING281_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:481:15: ( ASSERT ^ rel BY ! cond ( COMMA ! QUOTEDSTRING )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:481:17: ASSERT ^ rel BY ! cond ( COMMA ! QUOTEDSTRING )?
            {
            root_0 = (Object)adaptor.nil();


            ASSERT276=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_assert_clause2856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSERT276_tree = 
            (Object)adaptor.create(ASSERT276)
            ;
            root_0 = (Object)adaptor.becomeRoot(ASSERT276_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_assert_clause2859);
            rel277=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel277.getTree());

            BY278=(Token)match(input,BY,FOLLOW_BY_in_assert_clause2861); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_assert_clause2864);
            cond279=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond279.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:481:38: ( COMMA ! QUOTEDSTRING )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==COMMA) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:481:40: COMMA ! QUOTEDSTRING
                    {
                    COMMA280=(Token)match(input,COMMA,FOLLOW_COMMA_in_assert_clause2868); if (state.failed) return retval;

                    QUOTEDSTRING281=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_assert_clause2871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING281_tree = 
                    (Object)adaptor.create(QUOTEDSTRING281)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING281_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assert_clause"


    public static class filter_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:484:1: filter_clause : FILTER ^ rel BY ! cond ;
    public final QueryParser.filter_clause_return filter_clause() throws RecognitionException {
        QueryParser.filter_clause_return retval = new QueryParser.filter_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER282=null;
        Token BY284=null;
        QueryParser.rel_return rel283 =null;

        QueryParser.cond_return cond285 =null;


        Object FILTER282_tree=null;
        Object BY284_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:484:15: ( FILTER ^ rel BY ! cond )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:484:17: FILTER ^ rel BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER282=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter_clause2883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER282_tree = 
            (Object)adaptor.create(FILTER282)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER282_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_filter_clause2886);
            rel283=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel283.getTree());

            BY284=(Token)match(input,BY,FOLLOW_BY_in_filter_clause2888); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_filter_clause2891);
            cond285=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond285.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class stream_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:487:1: stream_clause : STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )? ;
    public final QueryParser.stream_clause_return stream_clause() throws RecognitionException {
        QueryParser.stream_clause_return retval = new QueryParser.stream_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STREAM286=null;
        Token THROUGH288=null;
        Token EXECCOMMAND289=null;
        QueryParser.rel_return rel287 =null;

        QueryParser.identifier_plus_return identifier_plus290 =null;

        QueryParser.as_clause_return as_clause291 =null;


        Object STREAM286_tree=null;
        Object THROUGH288_tree=null;
        Object EXECCOMMAND289_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:487:15: ( STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:487:17: STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STREAM286=(Token)match(input,STREAM,FOLLOW_STREAM_in_stream_clause2900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM286_tree = 
            (Object)adaptor.create(STREAM286)
            ;
            root_0 = (Object)adaptor.becomeRoot(STREAM286_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_stream_clause2903);
            rel287=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel287.getTree());

            THROUGH288=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_stream_clause2905); if (state.failed) return retval;

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:487:38: ( EXECCOMMAND | identifier_plus )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==EXECCOMMAND) ) {
                alt76=1;
            }
            else if ( (LA76_0==CUBE||(LA76_0 >= ELSE && LA76_0 <= END)||LA76_0==IDENTIFIER||LA76_0==IN||LA76_0==RANK||LA76_0==THEN||LA76_0==WHEN) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }
            switch (alt76) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:487:40: EXECCOMMAND
                    {
                    EXECCOMMAND289=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_stream_clause2910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND289_tree = 
                    (Object)adaptor.create(EXECCOMMAND289)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND289_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:487:54: identifier_plus
                    {
                    pushFollow(FOLLOW_identifier_plus_in_stream_clause2914);
                    identifier_plus290=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus290.getTree());

                    }
                    break;

            }


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:487:72: ( as_clause )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==AS) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:487:72: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_stream_clause2918);
                    as_clause291=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause291.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:490:1: mr_clause : MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? ;
    public final QueryParser.mr_clause_return mr_clause() throws RecognitionException {
        QueryParser.mr_clause_return retval = new QueryParser.mr_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAPREDUCE292=null;
        Token QUOTEDSTRING293=null;
        Token LEFT_PAREN294=null;
        Token RIGHT_PAREN296=null;
        Token EXECCOMMAND299=null;
        QueryParser.path_list_return path_list295 =null;

        QueryParser.store_clause_return store_clause297 =null;

        QueryParser.load_clause_return load_clause298 =null;


        Object MAPREDUCE292_tree=null;
        Object QUOTEDSTRING293_tree=null;
        Object LEFT_PAREN294_tree=null;
        Object RIGHT_PAREN296_tree=null;
        Object EXECCOMMAND299_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:490:11: ( MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:490:13: MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )?
            {
            root_0 = (Object)adaptor.nil();


            MAPREDUCE292=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause2928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE292_tree = 
            (Object)adaptor.create(MAPREDUCE292)
            ;
            root_0 = (Object)adaptor.becomeRoot(MAPREDUCE292_tree, root_0);
            }

            QUOTEDSTRING293=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause2931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING293_tree = 
            (Object)adaptor.create(QUOTEDSTRING293)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING293_tree);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:490:37: ( LEFT_PAREN ! path_list RIGHT_PAREN !)?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==LEFT_PAREN) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:490:39: LEFT_PAREN ! path_list RIGHT_PAREN !
                    {
                    LEFT_PAREN294=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_mr_clause2935); if (state.failed) return retval;

                    pushFollow(FOLLOW_path_list_in_mr_clause2938);
                    path_list295=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list295.getTree());

                    RIGHT_PAREN296=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_mr_clause2940); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_store_clause_in_mr_clause2946);
            store_clause297=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause297.getTree());

            pushFollow(FOLLOW_load_clause_in_mr_clause2948);
            load_clause298=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause298.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:490:102: ( EXECCOMMAND )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==EXECCOMMAND) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:490:102: EXECCOMMAND
                    {
                    EXECCOMMAND299=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause2950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND299_tree = 
                    (Object)adaptor.create(EXECCOMMAND299)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND299_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:493:1: split_clause : SPLIT ^ rel INTO ! split_branch split_branches ;
    public final QueryParser.split_clause_return split_clause() throws RecognitionException {
        QueryParser.split_clause_return retval = new QueryParser.split_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SPLIT300=null;
        Token INTO302=null;
        QueryParser.rel_return rel301 =null;

        QueryParser.split_branch_return split_branch303 =null;

        QueryParser.split_branches_return split_branches304 =null;


        Object SPLIT300_tree=null;
        Object INTO302_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:493:14: ( SPLIT ^ rel INTO ! split_branch split_branches )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:493:16: SPLIT ^ rel INTO ! split_branch split_branches
            {
            root_0 = (Object)adaptor.nil();


            SPLIT300=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause2960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT300_tree = 
            (Object)adaptor.create(SPLIT300)
            ;
            root_0 = (Object)adaptor.becomeRoot(SPLIT300_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_split_clause2963);
            rel301=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel301.getTree());

            INTO302=(Token)match(input,INTO,FOLLOW_INTO_in_split_clause2965); if (state.failed) return retval;

            pushFollow(FOLLOW_split_branch_in_split_clause2968);
            split_branch303=split_branch();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branch303.getTree());

            pushFollow(FOLLOW_split_branches_in_split_clause2970);
            split_branches304=split_branches();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branches304.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:496:1: split_branch : identifier_plus IF cond -> ^( SPLIT_BRANCH identifier_plus cond ) ;
    public final QueryParser.split_branch_return split_branch() throws RecognitionException {
        QueryParser.split_branch_return retval = new QueryParser.split_branch_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IF306=null;
        QueryParser.identifier_plus_return identifier_plus305 =null;

        QueryParser.cond_return cond307 =null;


        Object IF306_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:496:14: ( identifier_plus IF cond -> ^( SPLIT_BRANCH identifier_plus cond ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:496:16: identifier_plus IF cond
            {
            pushFollow(FOLLOW_identifier_plus_in_split_branch2979);
            identifier_plus305=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus305.getTree());

            IF306=(Token)match(input,IF,FOLLOW_IF_in_split_branch2981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF306);


            pushFollow(FOLLOW_cond_in_split_branch2983);
            cond307=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond307.getTree());

            // AST REWRITE
            // elements: identifier_plus, cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:40: -> ^( SPLIT_BRANCH identifier_plus cond )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:496:43: ^( SPLIT_BRANCH identifier_plus cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SPLIT_BRANCH, "SPLIT_BRANCH")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:499:1: split_otherwise : identifier_plus OTHERWISE ^;
    public final QueryParser.split_otherwise_return split_otherwise() throws RecognitionException {
        QueryParser.split_otherwise_return retval = new QueryParser.split_otherwise_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OTHERWISE309=null;
        QueryParser.identifier_plus_return identifier_plus308 =null;


        Object OTHERWISE309_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:499:17: ( identifier_plus OTHERWISE ^)
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:499:19: identifier_plus OTHERWISE ^
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_plus_in_split_otherwise3004);
            identifier_plus308=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus308.getTree());

            OTHERWISE309=(Token)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise3006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OTHERWISE309_tree = 
            (Object)adaptor.create(OTHERWISE309)
            ;
            root_0 = (Object)adaptor.becomeRoot(OTHERWISE309_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class split_branches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branches"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:502:1: split_branches : ( COMMA ! split_branch ( split_branches )? | COMMA ! split_otherwise );
    public final QueryParser.split_branches_return split_branches() throws RecognitionException {
        QueryParser.split_branches_return retval = new QueryParser.split_branches_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA310=null;
        Token COMMA313=null;
        QueryParser.split_branch_return split_branch311 =null;

        QueryParser.split_branches_return split_branches312 =null;

        QueryParser.split_otherwise_return split_otherwise314 =null;


        Object COMMA310_tree=null;
        Object COMMA313_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:502:16: ( COMMA ! split_branch ( split_branches )? | COMMA ! split_otherwise )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==COMMA) ) {
                int LA81_1 = input.LA(2);

                if ( (LA81_1==IDENTIFIER) ) {
                    int LA81_2 = input.LA(3);

                    if ( (LA81_2==IF) ) {
                        alt81=1;
                    }
                    else if ( (LA81_2==OTHERWISE) ) {
                        alt81=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA81_1==CUBE||(LA81_1 >= ELSE && LA81_1 <= END)||LA81_1==IN||LA81_1==RANK||LA81_1==THEN||LA81_1==WHEN) ) {
                    int LA81_3 = input.LA(3);

                    if ( (LA81_3==IF) ) {
                        alt81=1;
                    }
                    else if ( (LA81_3==OTHERWISE) ) {
                        alt81=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:502:18: COMMA ! split_branch ( split_branches )?
                    {
                    root_0 = (Object)adaptor.nil();


                    COMMA310=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_branches3016); if (state.failed) return retval;

                    pushFollow(FOLLOW_split_branch_in_split_branches3019);
                    split_branch311=split_branch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branch311.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:502:38: ( split_branches )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==COMMA) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:502:38: split_branches
                            {
                            pushFollow(FOLLOW_split_branches_in_split_branches3021);
                            split_branches312=split_branches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branches312.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:503:18: COMMA ! split_otherwise
                    {
                    root_0 = (Object)adaptor.nil();


                    COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_branches3041); if (state.failed) return retval;

                    pushFollow(FOLLOW_split_otherwise_in_split_branches3044);
                    split_otherwise314=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_otherwise314.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branches"


    public static class limit_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:506:1: limit_clause : LIMIT ^ rel expr ;
    public final QueryParser.limit_clause_return limit_clause() throws RecognitionException {
        QueryParser.limit_clause_return retval = new QueryParser.limit_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT315=null;
        QueryParser.rel_return rel316 =null;

        QueryParser.expr_return expr317 =null;


        Object LIMIT315_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:506:14: ( LIMIT ^ rel expr )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:506:16: LIMIT ^ rel expr
            {
            root_0 = (Object)adaptor.nil();


            LIMIT315=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause3053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT315_tree = 
            (Object)adaptor.create(LIMIT315)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT315_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_limit_clause3056);
            rel316=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel316.getTree());

            pushFollow(FOLLOW_expr_in_limit_clause3058);
            expr317=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr317.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:509:1: sample_clause : SAMPLE ^ rel expr ;
    public final QueryParser.sample_clause_return sample_clause() throws RecognitionException {
        QueryParser.sample_clause_return retval = new QueryParser.sample_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SAMPLE318=null;
        QueryParser.rel_return rel319 =null;

        QueryParser.expr_return expr320 =null;


        Object SAMPLE318_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:509:15: ( SAMPLE ^ rel expr )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:509:17: SAMPLE ^ rel expr
            {
            root_0 = (Object)adaptor.nil();


            SAMPLE318=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause3067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE318_tree = 
            (Object)adaptor.create(SAMPLE318)
            ;
            root_0 = (Object)adaptor.becomeRoot(SAMPLE318_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_sample_clause3070);
            rel319=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel319.getTree());

            pushFollow(FOLLOW_expr_in_sample_clause3072);
            expr320=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr320.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class rank_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:512:1: rank_clause : RANK ^ rel ( rank_by_statement )? ;
    public final QueryParser.rank_clause_return rank_clause() throws RecognitionException {
        QueryParser.rank_clause_return retval = new QueryParser.rank_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RANK321=null;
        QueryParser.rel_return rel322 =null;

        QueryParser.rank_by_statement_return rank_by_statement323 =null;


        Object RANK321_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:512:13: ( RANK ^ rel ( rank_by_statement )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:512:15: RANK ^ rel ( rank_by_statement )?
            {
            root_0 = (Object)adaptor.nil();


            RANK321=(Token)match(input,RANK,FOLLOW_RANK_in_rank_clause3081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RANK321_tree = 
            (Object)adaptor.create(RANK321)
            ;
            root_0 = (Object)adaptor.becomeRoot(RANK321_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_rank_clause3084);
            rel322=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel322.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:512:25: ( rank_by_statement )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==BY) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:512:27: rank_by_statement
                    {
                    pushFollow(FOLLOW_rank_by_statement_in_rank_clause3088);
                    rank_by_statement323=rank_by_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_by_statement323.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_clause"


    public static class rank_by_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_by_statement"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:515:1: rank_by_statement : BY ^ rank_by_clause ( DENSE )? ;
    public final QueryParser.rank_by_statement_return rank_by_statement() throws RecognitionException {
        QueryParser.rank_by_statement_return retval = new QueryParser.rank_by_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY324=null;
        Token DENSE326=null;
        QueryParser.rank_by_clause_return rank_by_clause325 =null;


        Object BY324_tree=null;
        Object DENSE326_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:515:19: ( BY ^ rank_by_clause ( DENSE )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:515:21: BY ^ rank_by_clause ( DENSE )?
            {
            root_0 = (Object)adaptor.nil();


            BY324=(Token)match(input,BY,FOLLOW_BY_in_rank_by_statement3100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY324_tree = 
            (Object)adaptor.create(BY324)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY324_tree, root_0);
            }

            pushFollow(FOLLOW_rank_by_clause_in_rank_by_statement3103);
            rank_by_clause325=rank_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_by_clause325.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:515:40: ( DENSE )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==DENSE) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:515:40: DENSE
                    {
                    DENSE326=(Token)match(input,DENSE,FOLLOW_DENSE_in_rank_by_statement3105); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DENSE326_tree = 
                    (Object)adaptor.create(DENSE326)
                    ;
                    adaptor.addChild(root_0, DENSE326_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_by_statement"


    public static class rank_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_by_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:518:1: rank_by_clause : ( STAR ( ASC | DESC )? | rank_list );
    public final QueryParser.rank_by_clause_return rank_by_clause() throws RecognitionException {
        QueryParser.rank_by_clause_return retval = new QueryParser.rank_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR327=null;
        Token set328=null;
        QueryParser.rank_list_return rank_list329 =null;


        Object STAR327_tree=null;
        Object set328_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:518:16: ( STAR ( ASC | DESC )? | rank_list )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==STAR) ) {
                alt85=1;
            }
            else if ( (LA85_0==CUBE||LA85_0==DOLLARVAR||(LA85_0 >= DOUBLE_PERIOD && LA85_0 <= END)||LA85_0==GROUP||LA85_0==IDENTIFIER||LA85_0==IN||LA85_0==RANK||LA85_0==THEN||LA85_0==WHEN) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:518:18: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR327=(Token)match(input,STAR,FOLLOW_STAR_in_rank_by_clause3115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR327_tree = 
                    (Object)adaptor.create(STAR327)
                    ;
                    adaptor.addChild(root_0, STAR327_tree);
                    }

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:518:23: ( ASC | DESC )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==ASC||LA84_0==DESC) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set328=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set328)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:519:18: rank_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rank_list_in_rank_by_clause3145);
                    rank_list329=rank_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_list329.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_by_clause"


    public static class rank_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:522:1: rank_list : rank_col ( COMMA rank_col )* -> ( rank_col )+ ;
    public final QueryParser.rank_list_return rank_list() throws RecognitionException {
        QueryParser.rank_list_return retval = new QueryParser.rank_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA331=null;
        QueryParser.rank_col_return rank_col330 =null;

        QueryParser.rank_col_return rank_col332 =null;


        Object COMMA331_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rank_col=new RewriteRuleSubtreeStream(adaptor,"rule rank_col");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:522:11: ( rank_col ( COMMA rank_col )* -> ( rank_col )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:522:13: rank_col ( COMMA rank_col )*
            {
            pushFollow(FOLLOW_rank_col_in_rank_list3154);
            rank_col330=rank_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rank_col.add(rank_col330.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:522:22: ( COMMA rank_col )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==COMMA) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:522:24: COMMA rank_col
            	    {
            	    COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_rank_list3158); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA331);


            	    pushFollow(FOLLOW_rank_col_in_rank_list3160);
            	    rank_col332=rank_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rank_col.add(rank_col332.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            // AST REWRITE
            // elements: rank_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:10: -> ( rank_col )+
            {
                if ( !(stream_rank_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rank_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_rank_col.nextTree());

                }
                stream_rank_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_list"


    public static class rank_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_col"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:526:1: rank_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? );
    public final QueryParser.rank_col_return rank_col() throws RecognitionException {
        QueryParser.rank_col_return retval = new QueryParser.rank_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set334=null;
        Token set336=null;
        QueryParser.col_range_return col_range333 =null;

        QueryParser.col_ref_return col_ref335 =null;


        Object set334_tree=null;
        Object set336_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:526:10: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? )
            int alt89=2;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA89_1 = input.LA(2);

                if ( (LA89_1==DOUBLE_PERIOD) ) {
                    alt89=1;
                }
                else if ( (LA89_1==ASC||LA89_1==COMMA||(LA89_1 >= DENSE && LA89_1 <= DESC)||LA89_1==PARALLEL||LA89_1==RIGHT_PAREN||LA89_1==SEMI_COLON) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA89_2 = input.LA(2);

                if ( (LA89_2==DOUBLE_PERIOD) ) {
                    alt89=1;
                }
                else if ( (LA89_2==ASC||LA89_2==COMMA||(LA89_2 >= DENSE && LA89_2 <= DESC)||LA89_2==PARALLEL||LA89_2==RIGHT_PAREN||LA89_2==SEMI_COLON) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA89_3 = input.LA(2);

                if ( (LA89_3==DOUBLE_PERIOD) ) {
                    alt89=1;
                }
                else if ( (LA89_3==ASC||LA89_3==COMMA||(LA89_3 >= DENSE && LA89_3 <= DESC)||LA89_3==PARALLEL||LA89_3==RIGHT_PAREN||LA89_3==SEMI_COLON) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt89=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }

            switch (alt89) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:526:12: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_rank_col3186);
                    col_range333=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range333.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:526:22: ( ASC | DESC )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==ASC||LA87_0==DESC) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set334=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set334)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:527:12: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_rank_col3210);
                    col_ref335=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref335.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:527:20: ( ASC | DESC )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==ASC||LA88_0==DESC) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set336=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set336)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_col"


    public static class order_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:530:1: order_clause : ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.order_clause_return order_clause() throws RecognitionException {
        QueryParser.order_clause_return retval = new QueryParser.order_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER337=null;
        Token BY339=null;
        Token USING341=null;
        QueryParser.rel_return rel338 =null;

        QueryParser.order_by_clause_return order_by_clause340 =null;

        QueryParser.func_clause_return func_clause342 =null;


        Object ORDER337_tree=null;
        Object BY339_tree=null;
        Object USING341_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:530:14: ( ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:530:16: ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER337=(Token)match(input,ORDER,FOLLOW_ORDER_in_order_clause3230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER337_tree = 
            (Object)adaptor.create(ORDER337)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER337_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_order_clause3233);
            rel338=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel338.getTree());

            BY339=(Token)match(input,BY,FOLLOW_BY_in_order_clause3235); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_order_clause3238);
            order_by_clause340=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause340.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:530:47: ( USING ! func_clause )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==USING) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:530:49: USING ! func_clause
                    {
                    USING341=(Token)match(input,USING,FOLLOW_USING_in_order_clause3242); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_order_clause3245);
                    func_clause342=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause342.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:533:1: order_by_clause : ( STAR ( ASC | DESC )? | order_col_list );
    public final QueryParser.order_by_clause_return order_by_clause() throws RecognitionException {
        QueryParser.order_by_clause_return retval = new QueryParser.order_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR343=null;
        Token set344=null;
        QueryParser.order_col_list_return order_col_list345 =null;


        Object STAR343_tree=null;
        Object set344_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:533:17: ( STAR ( ASC | DESC )? | order_col_list )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==STAR) ) {
                alt92=1;
            }
            else if ( (LA92_0==CUBE||LA92_0==DOLLARVAR||(LA92_0 >= DOUBLE_PERIOD && LA92_0 <= END)||LA92_0==GROUP||LA92_0==IDENTIFIER||LA92_0==IN||LA92_0==LEFT_PAREN||LA92_0==RANK||LA92_0==THEN||LA92_0==WHEN) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:533:19: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR343=(Token)match(input,STAR,FOLLOW_STAR_in_order_by_clause3257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR343_tree = 
                    (Object)adaptor.create(STAR343)
                    ;
                    adaptor.addChild(root_0, STAR343_tree);
                    }

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:533:24: ( ASC | DESC )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==ASC||LA91_0==DESC) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set344=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set344)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:534:19: order_col_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_col_list_in_order_by_clause3288);
                    order_col_list345=order_col_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_col_list345.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:537:1: order_col_list : order_col ( COMMA order_col )* -> ( order_col )+ ;
    public final QueryParser.order_col_list_return order_col_list() throws RecognitionException {
        QueryParser.order_col_list_return retval = new QueryParser.order_col_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA347=null;
        QueryParser.order_col_return order_col346 =null;

        QueryParser.order_col_return order_col348 =null;


        Object COMMA347_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_col=new RewriteRuleSubtreeStream(adaptor,"rule order_col");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:537:16: ( order_col ( COMMA order_col )* -> ( order_col )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:537:18: order_col ( COMMA order_col )*
            {
            pushFollow(FOLLOW_order_col_in_order_col_list3297);
            order_col346=order_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_col.add(order_col346.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:537:28: ( COMMA order_col )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==COMMA) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:537:30: COMMA order_col
            	    {
            	    COMMA347=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_col_list3301); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA347);


            	    pushFollow(FOLLOW_order_col_in_order_col_list3303);
            	    order_col348=order_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_col.add(order_col348.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            // AST REWRITE
            // elements: order_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:15: -> ( order_col )+
            {
                if ( !(stream_order_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_order_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_order_col.nextTree());

                }
                stream_order_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col_list"


    public static class order_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:541:1: order_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !);
    public final QueryParser.order_col_return order_col() throws RecognitionException {
        QueryParser.order_col_return retval = new QueryParser.order_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set350=null;
        Token set352=null;
        Token LEFT_PAREN353=null;
        Token set355=null;
        Token RIGHT_PAREN356=null;
        QueryParser.col_range_return col_range349 =null;

        QueryParser.col_ref_return col_ref351 =null;

        QueryParser.col_ref_return col_ref354 =null;


        Object set350_tree=null;
        Object set352_tree=null;
        Object LEFT_PAREN353_tree=null;
        Object set355_tree=null;
        Object RIGHT_PAREN356_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:541:11: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !)
            int alt97=3;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA97_1 = input.LA(2);

                if ( (LA97_1==DOUBLE_PERIOD) ) {
                    alt97=1;
                }
                else if ( (LA97_1==ASC||LA97_1==COMMA||LA97_1==DESC||LA97_1==PARALLEL||LA97_1==RIGHT_PAREN||LA97_1==SEMI_COLON||LA97_1==USING) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA97_2 = input.LA(2);

                if ( (LA97_2==DOUBLE_PERIOD) ) {
                    alt97=1;
                }
                else if ( (LA97_2==ASC||LA97_2==COMMA||LA97_2==DESC||LA97_2==PARALLEL||LA97_2==RIGHT_PAREN||LA97_2==SEMI_COLON||LA97_2==USING) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA97_3 = input.LA(2);

                if ( (LA97_3==DOUBLE_PERIOD) ) {
                    alt97=1;
                }
                else if ( (LA97_3==ASC||LA97_3==COMMA||LA97_3==DESC||LA97_3==PARALLEL||LA97_3==RIGHT_PAREN||LA97_3==SEMI_COLON||LA97_3==USING) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt97=1;
                }
                break;
            case LEFT_PAREN:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }

            switch (alt97) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:541:13: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_order_col3334);
                    col_range349=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range349.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:541:23: ( ASC | DESC )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==ASC||LA94_0==DESC) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set350=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set350)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:542:13: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_order_col3357);
                    col_ref351=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref351.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:542:21: ( ASC | DESC )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==ASC||LA95_0==DESC) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set352=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set352)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:543:13: LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN353=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_order_col3382); if (state.failed) return retval;

                    pushFollow(FOLLOW_col_ref_in_order_col3385);
                    col_ref354=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref354.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:543:33: ( ASC | DESC )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==ASC||LA96_0==DESC) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set355=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set355)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    RIGHT_PAREN356=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_order_col3398); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:546:1: distinct_clause : DISTINCT ^ rel ( partition_clause )? ;
    public final QueryParser.distinct_clause_return distinct_clause() throws RecognitionException {
        QueryParser.distinct_clause_return retval = new QueryParser.distinct_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT357=null;
        QueryParser.rel_return rel358 =null;

        QueryParser.partition_clause_return partition_clause359 =null;


        Object DISTINCT357_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:546:17: ( DISTINCT ^ rel ( partition_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:546:19: DISTINCT ^ rel ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT357=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause3408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT357_tree = 
            (Object)adaptor.create(DISTINCT357)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT357_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_distinct_clause3411);
            rel358=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel358.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:546:33: ( partition_clause )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==PARTITION) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:546:33: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause3413);
                    partition_clause359=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause359.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:549:1: partition_clause : PARTITION ^ BY ! func_name ;
    public final QueryParser.partition_clause_return partition_clause() throws RecognitionException {
        QueryParser.partition_clause_return retval = new QueryParser.partition_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARTITION360=null;
        Token BY361=null;
        QueryParser.func_name_return func_name362 =null;


        Object PARTITION360_tree=null;
        Object BY361_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:549:18: ( PARTITION ^ BY ! func_name )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:549:20: PARTITION ^ BY ! func_name
            {
            root_0 = (Object)adaptor.nil();


            PARTITION360=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause3423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION360_tree = 
            (Object)adaptor.create(PARTITION360)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARTITION360_tree, root_0);
            }

            BY361=(Token)match(input,BY,FOLLOW_BY_in_partition_clause3426); if (state.failed) return retval;

            pushFollow(FOLLOW_func_name_in_partition_clause3429);
            func_name362=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, func_name362.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class rel_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:552:1: rel_list : rel ( COMMA rel )* -> ( rel )+ ;
    public final QueryParser.rel_list_return rel_list() throws RecognitionException {
        QueryParser.rel_list_return retval = new QueryParser.rel_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA364=null;
        QueryParser.rel_return rel363 =null;

        QueryParser.rel_return rel365 =null;


        Object COMMA364_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:552:10: ( rel ( COMMA rel )* -> ( rel )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:552:12: rel ( COMMA rel )*
            {
            pushFollow(FOLLOW_rel_in_rel_list3438);
            rel363=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel363.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:552:16: ( COMMA rel )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==COMMA) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:552:18: COMMA rel
            	    {
            	    COMMA364=(Token)match(input,COMMA,FOLLOW_COMMA_in_rel_list3442); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA364);


            	    pushFollow(FOLLOW_rel_in_rel_list3444);
            	    rel365=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel.add(rel365.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            // AST REWRITE
            // elements: rel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:31: -> ( rel )+
            {
                if ( !(stream_rel.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rel.hasNext() ) {
                    adaptor.addChild(root_0, stream_rel.nextTree());

                }
                stream_rel.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    public static class cross_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:555:1: cross_clause : CROSS ^ rel_list ( partition_clause )? ;
    public final QueryParser.cross_clause_return cross_clause() throws RecognitionException {
        QueryParser.cross_clause_return retval = new QueryParser.cross_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS366=null;
        QueryParser.rel_list_return rel_list367 =null;

        QueryParser.partition_clause_return partition_clause368 =null;


        Object CROSS366_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:555:14: ( CROSS ^ rel_list ( partition_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:555:16: CROSS ^ rel_list ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            CROSS366=(Token)match(input,CROSS,FOLLOW_CROSS_in_cross_clause3461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS366_tree = 
            (Object)adaptor.create(CROSS366)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS366_tree, root_0);
            }

            pushFollow(FOLLOW_rel_list_in_cross_clause3464);
            rel_list367=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list367.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:555:32: ( partition_clause )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==PARTITION) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:555:32: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_cross_clause3466);
                    partition_clause368=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause368.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:559:1: join_clause : JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? ;
    public final QueryParser.join_clause_return join_clause() throws RecognitionException {
        QueryParser.join_clause_return retval = new QueryParser.join_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token JOIN369=null;
        Token USING371=null;
        QueryParser.join_sub_clause_return join_sub_clause370 =null;

        QueryParser.join_type_return join_type372 =null;

        QueryParser.partition_clause_return partition_clause373 =null;


        Object JOIN369_tree=null;
        Object USING371_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:559:13: ( JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:559:15: JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            JOIN369=(Token)match(input,JOIN,FOLLOW_JOIN_in_join_clause3477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN369_tree = 
            (Object)adaptor.create(JOIN369)
            ;
            root_0 = (Object)adaptor.becomeRoot(JOIN369_tree, root_0);
            }

            pushFollow(FOLLOW_join_sub_clause_in_join_clause3480);
            join_sub_clause370=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_sub_clause370.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:559:37: ( USING ! join_type )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==USING) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:559:39: USING ! join_type
                    {
                    USING371=(Token)match(input,USING,FOLLOW_USING_in_join_clause3484); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_type_in_join_clause3487);
                    join_type372=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_type372.getTree());

                    }
                    break;

            }


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:559:59: ( partition_clause )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==PARTITION) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:559:59: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_join_clause3492);
                    partition_clause373=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause373.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:562:1: join_type : QUOTEDSTRING ;
    public final QueryParser.join_type_return join_type() throws RecognitionException {
        QueryParser.join_type_return retval = new QueryParser.join_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING374=null;

        Object QUOTEDSTRING374_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:562:11: ( QUOTEDSTRING )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:562:13: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING374=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type3502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING374_tree = 
            (Object)adaptor.create(QUOTEDSTRING374)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING374_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:1: join_sub_clause : join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) ) ;
    public final QueryParser.join_sub_clause_return join_sub_clause() throws RecognitionException {
        QueryParser.join_sub_clause_return retval = new QueryParser.join_sub_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set376=null;
        Token OUTER377=null;
        Token COMMA378=null;
        Token COMMA380=null;
        QueryParser.join_item_return join_item375 =null;

        QueryParser.join_item_return join_item379 =null;

        QueryParser.join_item_return join_item381 =null;


        Object set376_tree=null;
        Object OUTER377_tree=null;
        Object COMMA378_tree=null;
        Object COMMA380_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:17: ( join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:19: join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_join_item_in_join_sub_clause3511);
            join_item375=join_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item375.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:29: ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==FULL||LA105_0==LEFT||LA105_0==RIGHT) ) {
                alt105=1;
            }
            else if ( (LA105_0==COMMA) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }
            switch (alt105) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:31: ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:31: ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:33: ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item
                    {
                    set376=(Token)input.LT(1);

                    if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set376)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:57: ( OUTER )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==OUTER) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:57: OUTER
                            {
                            OUTER377=(Token)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause3531); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER377_tree = 
                            (Object)adaptor.create(OUTER377)
                            ;
                            adaptor.addChild(root_0, OUTER377_tree);
                            }

                            }
                            break;

                    }


                    COMMA378=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause3534); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_item_in_join_sub_clause3537);
                    join_item379=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item379.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:85: ( ( COMMA ! join_item )+ )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:85: ( ( COMMA ! join_item )+ )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:87: ( COMMA ! join_item )+
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:87: ( COMMA ! join_item )+
                    int cnt104=0;
                    loop104:
                    do {
                        int alt104=2;
                        int LA104_0 = input.LA(1);

                        if ( (LA104_0==COMMA) ) {
                            alt104=1;
                        }


                        switch (alt104) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:565:89: COMMA ! join_item
                    	    {
                    	    COMMA380=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause3547); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_join_item_in_join_sub_clause3550);
                    	    join_item381=join_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item381.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt104 >= 1 ) break loop104;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(104, input);
                                throw eee;
                        }
                        cnt104++;
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:568:1: join_item : rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final QueryParser.join_item_return join_item() throws RecognitionException {
        QueryParser.join_item_return retval = new QueryParser.join_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.rel_return rel382 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause383 =null;


        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_join_group_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_clause");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:568:11: ( rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:568:13: rel join_group_by_clause
            {
            pushFollow(FOLLOW_rel_in_join_item3566);
            rel382=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel382.getTree());

            pushFollow(FOLLOW_join_group_by_clause_in_join_item3568);
            join_group_by_clause383=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_join_group_by_clause.add(join_group_by_clause383.getTree());

            // AST REWRITE
            // elements: rel, join_group_by_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:38: -> ^( JOIN_ITEM rel join_group_by_clause )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:568:41: ^( JOIN_ITEM rel join_group_by_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(JOIN_ITEM, "JOIN_ITEM")
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                adaptor.addChild(root_1, stream_join_group_by_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:574:1: join_group_by_clause : BY ^ real_arg ;
    public final QueryParser.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        QueryParser.join_group_by_clause_return retval = new QueryParser.join_group_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY384=null;
        QueryParser.real_arg_return real_arg385 =null;


        Object BY384_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:589:22: ( BY ^ real_arg )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:589:24: BY ^ real_arg
            {
            root_0 = (Object)adaptor.nil();


            BY384=(Token)match(input,BY,FOLLOW_BY_in_join_group_by_clause3627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY384_tree = 
            (Object)adaptor.create(BY384)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY384_tree, root_0);
            }

            pushFollow(FOLLOW_real_arg_in_join_group_by_clause3630);
            real_arg385=real_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg385.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    Tree by = (Tree) retval.getTree();
                    Tree realArg = by.getChild(0);
                    if(realArg.getType() == TUPLE_VAL
                    || (realArg.getType() == FUNC_EVAL && realArg.getChild(0).getType() == TOTUPLE)) {
                        retval.tree = adaptor.create(by.getType(), by.getText());
                        for(int i = 0; i < realArg.getChildCount(); ++i) {
                            if(realArg.getChild(i).getType()!=TOTUPLE)
                            ((Tree)retval.tree).addChild(realArg.getChild(i));
                        }
                        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class union_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:592:1: union_clause : UNION ^ ( ONSCHEMA )? rel_list ;
    public final QueryParser.union_clause_return union_clause() throws RecognitionException {
        QueryParser.union_clause_return retval = new QueryParser.union_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNION386=null;
        Token ONSCHEMA387=null;
        QueryParser.rel_list_return rel_list388 =null;


        Object UNION386_tree=null;
        Object ONSCHEMA387_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:592:14: ( UNION ^ ( ONSCHEMA )? rel_list )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:592:16: UNION ^ ( ONSCHEMA )? rel_list
            {
            root_0 = (Object)adaptor.nil();


            UNION386=(Token)match(input,UNION,FOLLOW_UNION_in_union_clause3639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION386_tree = 
            (Object)adaptor.create(UNION386)
            ;
            root_0 = (Object)adaptor.becomeRoot(UNION386_tree, root_0);
            }

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:592:23: ( ONSCHEMA )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==ONSCHEMA) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:592:23: ONSCHEMA
                    {
                    ONSCHEMA387=(Token)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause3642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA387_tree = 
                    (Object)adaptor.create(ONSCHEMA387)
                    ;
                    adaptor.addChild(root_0, ONSCHEMA387_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_rel_list_in_union_clause3645);
            rel_list388=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list388.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class cube_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:595:1: cube_clause : CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )* -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) ) ;
    public final QueryParser.cube_clause_return cube_clause() throws RecognitionException {
        QueryParser.cube_clause_return retval = new QueryParser.cube_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CUBE389=null;
        Token BY391=null;
        Token COMMA393=null;
        QueryParser.rel_return rel390 =null;

        QueryParser.cube_rollup_list_return cube_rollup_list392 =null;

        QueryParser.cube_rollup_list_return cube_rollup_list394 =null;


        Object CUBE389_tree=null;
        Object BY391_tree=null;
        Object COMMA393_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_CUBE=new RewriteRuleTokenStream(adaptor,"token CUBE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_cube_rollup_list=new RewriteRuleSubtreeStream(adaptor,"rule cube_rollup_list");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:595:13: ( CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )* -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:595:15: CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )*
            {
            CUBE389=(Token)match(input,CUBE,FOLLOW_CUBE_in_cube_clause3654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CUBE.add(CUBE389);


            pushFollow(FOLLOW_rel_in_cube_clause3656);
            rel390=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel390.getTree());

            BY391=(Token)match(input,BY,FOLLOW_BY_in_cube_clause3658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY391);


            pushFollow(FOLLOW_cube_rollup_list_in_cube_clause3660);
            cube_rollup_list392=cube_rollup_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cube_rollup_list.add(cube_rollup_list392.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:595:44: ( COMMA cube_rollup_list )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:595:46: COMMA cube_rollup_list
            	    {
            	    COMMA393=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_clause3664); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA393);


            	    pushFollow(FOLLOW_cube_rollup_list_in_cube_clause3666);
            	    cube_rollup_list394=cube_rollup_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cube_rollup_list.add(cube_rollup_list394.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            // AST REWRITE
            // elements: cube_rollup_list, BY, rel, CUBE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 595:72: -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:595:75: ^( CUBE rel ^( BY ( cube_rollup_list )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_CUBE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:595:87: ^( BY ( cube_rollup_list )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_BY.nextNode()
                , root_2);

                if ( !(stream_cube_rollup_list.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cube_rollup_list.hasNext() ) {
                    adaptor.addChild(root_2, stream_cube_rollup_list.nextTree());

                }
                stream_cube_rollup_list.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_clause"


    public static class cube_rollup_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_rollup_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:1: cube_rollup_list : ( ( CUBE ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !) | ( ROLLUP ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN ! ( pivot_clause | ( chunksize_clause rate_clause ) )? ) );
    public final QueryParser.cube_rollup_list_return cube_rollup_list() throws RecognitionException {
        QueryParser.cube_rollup_list_return retval = new QueryParser.cube_rollup_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CUBE395=null;
        Token LEFT_PAREN396=null;
        Token COMMA398=null;
        Token RIGHT_PAREN400=null;
        Token ROLLUP401=null;
        Token LEFT_PAREN402=null;
        Token COMMA404=null;
        Token RIGHT_PAREN406=null;
        QueryParser.real_arg_return real_arg397 =null;

        QueryParser.real_arg_return real_arg399 =null;

        QueryParser.real_arg_return real_arg403 =null;

        QueryParser.real_arg_return real_arg405 =null;

        QueryParser.pivot_clause_return pivot_clause407 =null;

        QueryParser.chunksize_clause_return chunksize_clause408 =null;

        QueryParser.rate_clause_return rate_clause409 =null;


        Object CUBE395_tree=null;
        Object LEFT_PAREN396_tree=null;
        Object COMMA398_tree=null;
        Object RIGHT_PAREN400_tree=null;
        Object ROLLUP401_tree=null;
        Object LEFT_PAREN402_tree=null;
        Object COMMA404_tree=null;
        Object RIGHT_PAREN406_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:18: ( ( CUBE ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !) | ( ROLLUP ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN ! ( pivot_clause | ( chunksize_clause rate_clause ) )? ) )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==CUBE) ) {
                alt111=1;
            }
            else if ( (LA111_0==ROLLUP) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:20: ( CUBE ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !)
                    {
                    root_0 = (Object)adaptor.nil();


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:20: ( CUBE ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !)
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:22: CUBE ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !
                    {
                    CUBE395=(Token)match(input,CUBE,FOLLOW_CUBE_in_cube_rollup_list3699); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CUBE395_tree = 
                    (Object)adaptor.create(CUBE395)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(CUBE395_tree, root_0);
                    }

                    LEFT_PAREN396=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cube_rollup_list3702); if (state.failed) return retval;

                    pushFollow(FOLLOW_real_arg_in_cube_rollup_list3705);
                    real_arg397=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg397.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:49: ( COMMA ! real_arg )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==COMMA) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:51: COMMA ! real_arg
                    	    {
                    	    COMMA398=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_rollup_list3709); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_real_arg_in_cube_rollup_list3712);
                    	    real_arg399=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg399.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    RIGHT_PAREN400=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cube_rollup_list3717); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:87: ( ROLLUP ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN ! ( pivot_clause | ( chunksize_clause rate_clause ) )? )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:87: ( ROLLUP ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN ! ( pivot_clause | ( chunksize_clause rate_clause ) )? )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:89: ROLLUP ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN ! ( pivot_clause | ( chunksize_clause rate_clause ) )?
                    {
                    ROLLUP401=(Token)match(input,ROLLUP,FOLLOW_ROLLUP_in_cube_rollup_list3726); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROLLUP401_tree = 
                    (Object)adaptor.create(ROLLUP401)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(ROLLUP401_tree, root_0);
                    }

                    LEFT_PAREN402=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cube_rollup_list3729); if (state.failed) return retval;

                    pushFollow(FOLLOW_real_arg_in_cube_rollup_list3732);
                    real_arg403=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg403.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:118: ( COMMA ! real_arg )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==COMMA) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:120: COMMA ! real_arg
                    	    {
                    	    COMMA404=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_rollup_list3736); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_real_arg_in_cube_rollup_list3739);
                    	    real_arg405=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg405.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);


                    RIGHT_PAREN406=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cube_rollup_list3744); if (state.failed) return retval;

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:152: ( pivot_clause | ( chunksize_clause rate_clause ) )?
                    int alt110=3;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==PIVOT) ) {
                        alt110=1;
                    }
                    else if ( (LA110_0==CHUNKSIZE) ) {
                        alt110=2;
                    }
                    switch (alt110) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:154: pivot_clause
                            {
                            pushFollow(FOLLOW_pivot_clause_in_cube_rollup_list3749);
                            pivot_clause407=pivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pivot_clause407.getTree());

                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:169: ( chunksize_clause rate_clause )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:169: ( chunksize_clause rate_clause )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:598:171: chunksize_clause rate_clause
                            {
                            pushFollow(FOLLOW_chunksize_clause_in_cube_rollup_list3755);
                            chunksize_clause408=chunksize_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, chunksize_clause408.getTree());

                            pushFollow(FOLLOW_rate_clause_in_cube_rollup_list3757);
                            rate_clause409=rate_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rate_clause409.getTree());

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_rollup_list"


    public static class h2irg_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "h2irg_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:601:1: h2irg_clause : ( pivot_clause | autopivot_clause );
    public final QueryParser.h2irg_clause_return h2irg_clause() throws RecognitionException {
        QueryParser.h2irg_clause_return retval = new QueryParser.h2irg_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.pivot_clause_return pivot_clause410 =null;

        QueryParser.autopivot_clause_return autopivot_clause411 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:602:5: ( pivot_clause | autopivot_clause )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==PIVOT) ) {
                alt112=1;
            }
            else if ( (LA112_0==CHUNKSIZE) ) {
                alt112=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;

            }
            switch (alt112) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:602:7: pivot_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_pivot_clause_in_h2irg_clause3777);
                    pivot_clause410=pivot_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pivot_clause410.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:602:22: autopivot_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_autopivot_clause_in_h2irg_clause3781);
                    autopivot_clause411=autopivot_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, autopivot_clause411.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "h2irg_clause"


    public static class pivot_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pivot_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:605:1: pivot_clause : PIVOT ^ INTEGER ;
    public final QueryParser.pivot_clause_return pivot_clause() throws RecognitionException {
        QueryParser.pivot_clause_return retval = new QueryParser.pivot_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PIVOT412=null;
        Token INTEGER413=null;

        Object PIVOT412_tree=null;
        Object INTEGER413_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:605:13: ( PIVOT ^ INTEGER )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:605:15: PIVOT ^ INTEGER
            {
            root_0 = (Object)adaptor.nil();


            PIVOT412=(Token)match(input,PIVOT,FOLLOW_PIVOT_in_pivot_clause3790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PIVOT412_tree = 
            (Object)adaptor.create(PIVOT412)
            ;
            root_0 = (Object)adaptor.becomeRoot(PIVOT412_tree, root_0);
            }

            INTEGER413=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_pivot_clause3793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER413_tree = 
            (Object)adaptor.create(INTEGER413)
            ;
            adaptor.addChild(root_0, INTEGER413_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pivot_clause"


    public static class autopivot_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "autopivot_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:608:1: autopivot_clause : chunksize_clause rate_clause ;
    public final QueryParser.autopivot_clause_return autopivot_clause() throws RecognitionException {
        QueryParser.autopivot_clause_return retval = new QueryParser.autopivot_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.chunksize_clause_return chunksize_clause414 =null;

        QueryParser.rate_clause_return rate_clause415 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:609:5: ( chunksize_clause rate_clause )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:609:7: chunksize_clause rate_clause
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_chunksize_clause_in_autopivot_clause3806);
            chunksize_clause414=chunksize_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, chunksize_clause414.getTree());

            pushFollow(FOLLOW_rate_clause_in_autopivot_clause3808);
            rate_clause415=rate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rate_clause415.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "autopivot_clause"


    public static class chunksize_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "chunksize_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:612:1: chunksize_clause : CHUNKSIZE ^ INTEGER ;
    public final QueryParser.chunksize_clause_return chunksize_clause() throws RecognitionException {
        QueryParser.chunksize_clause_return retval = new QueryParser.chunksize_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CHUNKSIZE416=null;
        Token INTEGER417=null;

        Object CHUNKSIZE416_tree=null;
        Object INTEGER417_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:612:17: ( CHUNKSIZE ^ INTEGER )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:612:19: CHUNKSIZE ^ INTEGER
            {
            root_0 = (Object)adaptor.nil();


            CHUNKSIZE416=(Token)match(input,CHUNKSIZE,FOLLOW_CHUNKSIZE_in_chunksize_clause3816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CHUNKSIZE416_tree = 
            (Object)adaptor.create(CHUNKSIZE416)
            ;
            root_0 = (Object)adaptor.becomeRoot(CHUNKSIZE416_tree, root_0);
            }

            INTEGER417=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_chunksize_clause3819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER417_tree = 
            (Object)adaptor.create(INTEGER417)
            ;
            adaptor.addChild(root_0, INTEGER417_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "chunksize_clause"


    public static class rate_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rate_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:615:1: rate_clause : RATE ^ DOUBLENUMBER ;
    public final QueryParser.rate_clause_return rate_clause() throws RecognitionException {
        QueryParser.rate_clause_return retval = new QueryParser.rate_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RATE418=null;
        Token DOUBLENUMBER419=null;

        Object RATE418_tree=null;
        Object DOUBLENUMBER419_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:615:12: ( RATE ^ DOUBLENUMBER )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:615:14: RATE ^ DOUBLENUMBER
            {
            root_0 = (Object)adaptor.nil();


            RATE418=(Token)match(input,RATE,FOLLOW_RATE_in_rate_clause3827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RATE418_tree = 
            (Object)adaptor.create(RATE418)
            ;
            root_0 = (Object)adaptor.becomeRoot(RATE418_tree, root_0);
            }

            DOUBLENUMBER419=(Token)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_rate_clause3830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLENUMBER419_tree = 
            (Object)adaptor.create(DOUBLENUMBER419)
            ;
            adaptor.addChild(root_0, DOUBLENUMBER419_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rate_clause"


    public static class flatten_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:619:1: flatten_clause : FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !;
    public final QueryParser.flatten_clause_return flatten_clause() throws RecognitionException {
        QueryParser.flatten_clause_return retval = new QueryParser.flatten_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FLATTEN420=null;
        Token LEFT_PAREN421=null;
        Token RIGHT_PAREN423=null;
        QueryParser.expr_return expr422 =null;


        Object FLATTEN420_tree=null;
        Object LEFT_PAREN421_tree=null;
        Object RIGHT_PAREN423_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:619:16: ( FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !)
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:619:18: FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            FLATTEN420=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause3840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN420_tree = 
            (Object)adaptor.create(FLATTEN420)
            ;
            root_0 = (Object)adaptor.becomeRoot(FLATTEN420_tree, root_0);
            }

            LEFT_PAREN421=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_clause3843); if (state.failed) return retval;

            pushFollow(FOLLOW_expr_in_flatten_clause3846);
            expr422=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr422.getTree());

            RIGHT_PAREN423=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_clause3848); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class generate_as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_as_clause"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:624:1: generate_as_clause : AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def ) ;
    public final QueryParser.generate_as_clause_return generate_as_clause() throws RecognitionException {
        QueryParser.generate_as_clause_return retval = new QueryParser.generate_as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS424=null;
        Token LEFT_PAREN425=null;
        Token RIGHT_PAREN427=null;
        QueryParser.field_def_list_return field_def_list426 =null;

        QueryParser.explicit_field_def_return explicit_field_def428 =null;


        Object AS424_tree=null;
        Object LEFT_PAREN425_tree=null;
        Object RIGHT_PAREN427_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:624:20: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:624:23: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def )
            {
            root_0 = (Object)adaptor.nil();


            AS424=(Token)match(input,AS,FOLLOW_AS_in_generate_as_clause3861); if (state.failed) return retval;

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:624:27: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==LEFT_PAREN) ) {
                alt113=1;
            }
            else if ( ((LA113_0 >= BAG && LA113_0 <= BIGDECIMAL)||LA113_0==BIGINTEGER||LA113_0==BOOLEAN||LA113_0==BYTEARRAY||LA113_0==CHARARRAY||(LA113_0 >= CUBE && LA113_0 <= DATETIME)||LA113_0==DOUBLE||(LA113_0 >= ELSE && LA113_0 <= END)||LA113_0==FLOAT||LA113_0==IDENTIFIER||LA113_0==IN||LA113_0==INT||LA113_0==LONG||LA113_0==MAP||LA113_0==RANK||LA113_0==THEN||LA113_0==TUPLE||LA113_0==WHEN) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }
            switch (alt113) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:624:29: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:624:29: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:624:31: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                    {
                    LEFT_PAREN425=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_generate_as_clause3868); if (state.failed) return retval;

                    pushFollow(FOLLOW_field_def_list_in_generate_as_clause3871);
                    field_def_list426=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list426.getTree());

                    RIGHT_PAREN427=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_generate_as_clause3873); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:624:75: explicit_field_def
                    {
                    pushFollow(FOLLOW_explicit_field_def_in_generate_as_clause3880);
                    explicit_field_def428=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def428.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_as_clause"


    public static class flatten_generated_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:627:1: flatten_generated_item : ( flatten_clause ( generate_as_clause )? | real_arg ( generate_as_clause )? );
    public final QueryParser.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        QueryParser.flatten_generated_item_return retval = new QueryParser.flatten_generated_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.flatten_clause_return flatten_clause429 =null;

        QueryParser.generate_as_clause_return generate_as_clause430 =null;

        QueryParser.real_arg_return real_arg431 =null;

        QueryParser.generate_as_clause_return generate_as_clause432 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:627:24: ( flatten_clause ( generate_as_clause )? | real_arg ( generate_as_clause )? )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==FLATTEN) ) {
                alt116=1;
            }
            else if ( (LA116_0==ALL||LA116_0==AND||(LA116_0 >= AS && LA116_0 <= ASSERT)||LA116_0==BIGDECIMAL||LA116_0==BIGINTEGER||(LA116_0 >= BY && LA116_0 <= CHARARRAY)||LA116_0==COGROUP||(LA116_0 >= CROSS && LA116_0 <= DATETIME)||LA116_0==DEFINE||LA116_0==DESC||LA116_0==DISTINCT||LA116_0==DOLLARVAR||(LA116_0 >= DOUBLENUMBER && LA116_0 <= END)||LA116_0==FALSE||LA116_0==FILTER||(LA116_0 >= FLOATNUMBER && LA116_0 <= GROUP)||(LA116_0 >= IDENTIFIER && LA116_0 <= INPUT)||(LA116_0 >= INTEGER && LA116_0 <= LEFT_PAREN)||(LA116_0 >= LIMIT && LA116_0 <= LOAD)||LA116_0==LONGINTEGER||(LA116_0 >= MAPREDUCE && LA116_0 <= MINUS)||LA116_0==NULL||(LA116_0 >= OR && LA116_0 <= ORDER)||(LA116_0 >= OUTER && LA116_0 <= PARTITION)||(LA116_0 >= QUOTEDSTRING && LA116_0 <= RANK)||(LA116_0 >= REGISTER && LA116_0 <= RIGHT)||(LA116_0 >= ROLLUP && LA116_0 <= SAMPLE)||LA116_0==SHIP||(LA116_0 >= SPLIT && LA116_0 <= TRUE)||(LA116_0 >= UNION && LA116_0 <= USING)||LA116_0==WHEN||(LA116_0 >= BOOL && LA116_0 <= BOOL_COND)||LA116_0==REALIAS) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:627:26: flatten_clause ( generate_as_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item3891);
                    flatten_clause429=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, flatten_clause429.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:627:41: ( generate_as_clause )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==AS) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:627:41: generate_as_clause
                            {
                            pushFollow(FOLLOW_generate_as_clause_in_flatten_generated_item3893);
                            generate_as_clause430=generate_as_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_as_clause430.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:628:26: real_arg ( generate_as_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_real_arg_in_flatten_generated_item3921);
                    real_arg431=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg431.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:628:35: ( generate_as_clause )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==AS) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:628:35: generate_as_clause
                            {
                            pushFollow(FOLLOW_generate_as_clause_in_flatten_generated_item3923);
                            generate_as_clause432=generate_as_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_as_clause432.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class real_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:636:1: real_arg : ( expr | STAR | col_range );
    public final QueryParser.real_arg_return real_arg() throws RecognitionException {
        QueryParser.real_arg_return retval = new QueryParser.real_arg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR434=null;
        QueryParser.expr_return expr433 =null;

        QueryParser.col_range_return col_range435 =null;


        Object STAR434_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:636:10: ( expr | STAR | col_range )
            int alt117=3;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case ASSERT:
            case BIGDECIMAL:
            case BIGINTEGER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CASE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTEGER:
            case INTO:
            case INVOKE:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONGINTEGER:
            case MAPREDUCE:
            case MINUS:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case REGISTER:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt117=1;
                }
                break;
            case DOLLARVAR:
            case GROUP:
                {
                int LA117_2 = input.LA(2);

                if ( (LA117_2==AS||LA117_2==COMMA||LA117_2==DIV||LA117_2==FULL||LA117_2==INNER||LA117_2==LEFT||LA117_2==MINUS||LA117_2==OUTER||(LA117_2 >= PARALLEL && LA117_2 <= PERIOD)||(LA117_2 >= PLUS && LA117_2 <= POUND)||(LA117_2 >= RIGHT && LA117_2 <= RIGHT_PAREN)||LA117_2==SEMI_COLON||LA117_2==STAR||LA117_2==USING) ) {
                    alt117=1;
                }
                else if ( (LA117_2==DOUBLE_PERIOD) ) {
                    alt117=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA117_3 = input.LA(2);

                if ( (LA117_3==AS||LA117_3==COMMA||(LA117_3 >= DIV && LA117_3 <= DOLLAR)||LA117_3==FULL||LA117_3==INNER||LA117_3==LEFT||LA117_3==LEFT_PAREN||LA117_3==MINUS||LA117_3==OUTER||(LA117_3 >= PARALLEL && LA117_3 <= PERIOD)||(LA117_3 >= PLUS && LA117_3 <= POUND)||(LA117_3 >= RIGHT && LA117_3 <= RIGHT_PAREN)||LA117_3==SEMI_COLON||LA117_3==STAR||LA117_3==USING) ) {
                    alt117=1;
                }
                else if ( (LA117_3==DOUBLE_PERIOD) ) {
                    alt117=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 3, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA117_4 = input.LA(2);

                if ( (LA117_4==AS||LA117_4==COMMA||(LA117_4 >= DIV && LA117_4 <= DOLLAR)||LA117_4==FULL||LA117_4==INNER||LA117_4==LEFT||LA117_4==LEFT_PAREN||LA117_4==MINUS||LA117_4==OUTER||(LA117_4 >= PARALLEL && LA117_4 <= PERIOD)||(LA117_4 >= PLUS && LA117_4 <= POUND)||(LA117_4 >= RIGHT && LA117_4 <= RIGHT_PAREN)||LA117_4==SEMI_COLON||LA117_4==STAR||LA117_4==USING) ) {
                    alt117=1;
                }
                else if ( (LA117_4==DOUBLE_PERIOD) ) {
                    alt117=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 4, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt117=2;
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt117=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:636:12: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_real_arg3938);
                    expr433=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr433.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:637:12: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR434=(Token)match(input,STAR,FOLLOW_STAR_in_real_arg3951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR434_tree = 
                    (Object)adaptor.create(STAR434)
                    ;
                    adaptor.addChild(root_0, STAR434_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:638:12: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_real_arg3964);
                    col_range435=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:641:1: cond : and_cond ( OR ^ and_cond )* ;
    public final QueryParser.cond_return cond() throws RecognitionException {
        QueryParser.cond_return retval = new QueryParser.cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OR437=null;
        QueryParser.and_cond_return and_cond436 =null;

        QueryParser.and_cond_return and_cond438 =null;


        Object OR437_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:641:6: ( and_cond ( OR ^ and_cond )* )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:641:8: and_cond ( OR ^ and_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_cond_in_cond3973);
            and_cond436=and_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond436.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:641:18: ( OR ^ and_cond )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==OR) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:641:20: OR ^ and_cond
            	    {
            	    OR437=(Token)match(input,OR,FOLLOW_OR_in_cond3978); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR437_tree = 
            	    (Object)adaptor.create(OR437)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(OR437_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_and_cond_in_cond3981);
            	    and_cond438=and_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond438.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class and_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_cond"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:644:1: and_cond : not_cond ( AND ^ not_cond )* ;
    public final QueryParser.and_cond_return and_cond() throws RecognitionException {
        QueryParser.and_cond_return retval = new QueryParser.and_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AND440=null;
        QueryParser.not_cond_return not_cond439 =null;

        QueryParser.not_cond_return not_cond441 =null;


        Object AND440_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:644:10: ( not_cond ( AND ^ not_cond )* )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:644:12: not_cond ( AND ^ not_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_not_cond_in_and_cond3993);
            not_cond439=not_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond439.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:644:21: ( AND ^ not_cond )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==AND) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:644:23: AND ^ not_cond
            	    {
            	    AND440=(Token)match(input,AND,FOLLOW_AND_in_and_cond3997); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND440_tree = 
            	    (Object)adaptor.create(AND440)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AND440_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_not_cond_in_and_cond4000);
            	    not_cond441=not_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond441.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_cond"


    public static class not_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_cond"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:647:1: not_cond : ( NOT ^)? unary_cond ;
    public final QueryParser.not_cond_return not_cond() throws RecognitionException {
        QueryParser.not_cond_return retval = new QueryParser.not_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NOT442=null;
        QueryParser.unary_cond_return unary_cond443 =null;


        Object NOT442_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:647:10: ( ( NOT ^)? unary_cond )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:647:12: ( NOT ^)? unary_cond
            {
            root_0 = (Object)adaptor.nil();


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:647:15: ( NOT ^)?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==NOT) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:647:15: NOT ^
                    {
                    NOT442=(Token)match(input,NOT,FOLLOW_NOT_in_not_cond4012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT442_tree = 
                    (Object)adaptor.create(NOT442)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(NOT442_tree, root_0);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_unary_cond_in_not_cond4016);
            unary_cond443=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond443.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_cond"


    public static class unary_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_cond"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:650:1: unary_cond : exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) ) ;
    public final QueryParser.unary_cond_return unary_cond() throws RecognitionException {
        QueryParser.unary_cond_return retval = new QueryParser.unary_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IS444=null;
        Token NOT445=null;
        Token NULL446=null;
        Token IN447=null;
        Token LEFT_PAREN448=null;
        Token COMMA450=null;
        Token RIGHT_PAREN452=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.rhs_operand_return rhs_operand449 =null;

        QueryParser.rhs_operand_return rhs_operand451 =null;

        QueryParser.rel_op_return rel_op453 =null;


        Object IS444_tree=null;
        Object NOT445_tree=null;
        Object NULL446_tree=null;
        Object IN447_tree=null;
        Object LEFT_PAREN448_tree=null;
        Object COMMA450_tree=null;
        Object RIGHT_PAREN452_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_NULL=new RewriteRuleTokenStream(adaptor,"token NULL");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_rhs_operand=new RewriteRuleSubtreeStream(adaptor,"rule rhs_operand");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:690:5: (exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:690:7: exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) )
            {
            pushFollow(FOLLOW_expr_in_unary_cond4046);
            exp1=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:691:9: ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) )
            int alt123=4;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt123=1;
                }
                break;
            case IN:
                {
                alt123=2;
                }
                break;
            case NUM_OP_EQ:
            case NUM_OP_GT:
            case NUM_OP_GTE:
            case NUM_OP_LT:
            case NUM_OP_LTE:
            case NUM_OP_NE:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt123=3;
                }
                break;
            case AND:
            case COMMA:
            case OR:
            case PARALLEL:
            case QMARK:
            case RIGHT_PAREN:
            case SEMI_COLON:
            case THEN:
                {
                alt123=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }

            switch (alt123) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:691:11: ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:691:11: ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:691:13: IS ( NOT )? NULL
                    {
                    IS444=(Token)match(input,IS,FOLLOW_IS_in_unary_cond4060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IS.add(IS444);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:691:16: ( NOT )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==NOT) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:691:16: NOT
                            {
                            NOT445=(Token)match(input,NOT,FOLLOW_NOT_in_unary_cond4062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT.add(NOT445);


                            }
                            break;

                    }


                    NULL446=(Token)match(input,NULL,FOLLOW_NULL_in_unary_cond4065); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NULL.add(NULL446);


                    // AST REWRITE
                    // elements: exp1, NOT, NULL
                    // token labels: 
                    // rule labels: retval, exp1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 691:26: -> ^( NULL $exp1 ( NOT )? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:691:29: ^( NULL $exp1 ( NOT )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_NULL.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_exp1.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:691:43: ( NOT )?
                        if ( stream_NOT.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_NOT.nextNode()
                            );

                        }
                        stream_NOT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:11: ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:11: ( IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ ) )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:13: IN LEFT_PAREN ( rhs_operand ( COMMA rhs_operand )* ) RIGHT_PAREN
                    {
                    IN447=(Token)match(input,IN,FOLLOW_IN_in_unary_cond4095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IN.add(IN447);


                    LEFT_PAREN448=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_cond4097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN448);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:27: ( rhs_operand ( COMMA rhs_operand )* )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:29: rhs_operand ( COMMA rhs_operand )*
                    {
                    pushFollow(FOLLOW_rhs_operand_in_unary_cond4101);
                    rhs_operand449=rhs_operand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand449.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:41: ( COMMA rhs_operand )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==COMMA) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:43: COMMA rhs_operand
                    	    {
                    	    COMMA450=(Token)match(input,COMMA,FOLLOW_COMMA_in_unary_cond4105); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA450);


                    	    pushFollow(FOLLOW_rhs_operand_in_unary_cond4107);
                    	    rhs_operand451=rhs_operand();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand451.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    }


                    RIGHT_PAREN452=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_cond4114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN452);


                    // AST REWRITE
                    // elements: rhs_operand, IN, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 692:78: -> ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:81: ^( IN ^( IN_LHS expr ) ( ^( IN_RHS rhs_operand ) )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_IN.nextNode()
                        , root_1);

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:87: ^( IN_LHS expr )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IN_LHS, "IN_LHS")
                        , root_2);

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        if ( !(stream_rhs_operand.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_rhs_operand.hasNext() ) {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:692:104: ^( IN_RHS rhs_operand )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot(
                            (Object)adaptor.create(IN_RHS, "IN_RHS")
                            , root_2);

                            adaptor.addChild(root_2, stream_rhs_operand.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_rhs_operand.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:693:11: ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:693:11: ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:693:13: rel_op exp2= expr
                    {
                    pushFollow(FOLLOW_rel_op_in_unary_cond4155);
                    rel_op453=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel_op.add(rel_op453.getTree());

                    pushFollow(FOLLOW_expr_in_unary_cond4161);
                    exp2=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

                    // AST REWRITE
                    // elements: exp2, rel_op, exp1
                    // token labels: 
                    // rule labels: retval, exp2, exp1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
                    RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 693:32: -> ^( rel_op $exp1 $exp2)
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:693:35: ^( rel_op $exp1 $exp2)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_rel_op.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_exp1.nextTree());

                        adaptor.addChild(root_1, stream_exp2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:694:11: ( -> ^( BOOL_COND expr ) )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:694:11: ( -> ^( BOOL_COND expr ) )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:694:13: 
                    {
                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 694:13: -> ^( BOOL_COND expr )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:694:16: ^( BOOL_COND expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL_COND, "BOOL_COND")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    // Expressions in parentheses are a little tricky to match as
                    // they could contain either "cond" rules or "expr" rules. If
                    // they are "expr" rules then they're put under a BOOL_COND node
                    // in the tree, but "cond" rules put no extra tokens in the tree.
                    // As we're matching non-recursively we'll parse whatever's in the
                    // brackets, and if the AST has a boolean expression at its root
                    // then we'll assume we've just got a "cond" expression in
                    // brackets, and otherwise we'll assume its an "expr" (and so
                    // we'll have to strip off the BOOL_COND token the "cast_expr"
                    // rule added)
                    BaseTree tree = (BaseTree) retval.getTree();
                    if(tree.getType() == BOOL_COND
                    && tree.getChild(0).getType() == EXPR_IN_PAREN
                    && BOOLEAN_TOKENS.contains(tree.getChild(0).getChild(0).getType())) {
                        retval.tree = tree.getChild(0).getChild(0);
                        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                    }

                    // For IN expression, we clone the lhs expression (1st child of the
                    // returned tree) and insert it before every rhs expression. For example,
                    //
                    //   lhs IN (rhs1, rhs2, rhs3)
                    // =>
                    //   ^( IN lhs, rhs1, lhs, rhs2, lhs, rhs3 )
                    //
                    // Note that lhs appears three times at index 0, 2 and 4.
                    //
                    // This is needed because in LogicalPlanGenerator.g, we translate this
                    // tree to nested or expressions, and we need to construct a new
                    // LogicalExpression object per rhs expression.
                    if(tree.getType() == IN) {
                        Tree lhs = tree.getChild(0);
                        for(int i = 2; i < tree.getChildCount(); i = i + 2) {
                            tree.insertChild(i, deepCopy(lhs));
                        }
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_cond"


    public static class rhs_operand_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rhs_operand"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:697:1: rhs_operand : expr ;
    public final QueryParser.rhs_operand_return rhs_operand() throws RecognitionException {
        QueryParser.rhs_operand_return retval = new QueryParser.rhs_operand_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.expr_return expr454 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:697:13: ( expr )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:697:15: expr
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_rhs_operand4210);
            expr454=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr454.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rhs_operand"


    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:700:1: expr : multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* ;
    public final QueryParser.expr_return expr() throws RecognitionException {
        QueryParser.expr_return retval = new QueryParser.expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set456=null;
        QueryParser.multi_expr_return multi_expr455 =null;

        QueryParser.multi_expr_return multi_expr457 =null;


        Object set456_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:700:6: ( multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:700:8: multi_expr ( ( PLUS | MINUS ) ^ multi_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_multi_expr_in_expr4219);
            multi_expr455=multi_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr455.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:700:19: ( ( PLUS | MINUS ) ^ multi_expr )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==MINUS||LA124_0==PLUS) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:700:21: ( PLUS | MINUS ) ^ multi_expr
            	    {
            	    set456=(Token)input.LT(1);

            	    set456=(Token)input.LT(1);

            	    if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set456)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multi_expr_in_expr4234);
            	    multi_expr457=multi_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr457.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class multi_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_expr"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:703:1: multi_expr : cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* ;
    public final QueryParser.multi_expr_return multi_expr() throws RecognitionException {
        QueryParser.multi_expr_return retval = new QueryParser.multi_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set459=null;
        QueryParser.cast_expr_return cast_expr458 =null;

        QueryParser.cast_expr_return cast_expr460 =null;


        Object set459_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:703:12: ( cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:703:14: cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_expr_in_multi_expr4246);
            cast_expr458=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr458.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:703:24: ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==DIV||LA125_0==PERCENT||LA125_0==STAR) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:703:26: ( STAR | DIV | PERCENT ) ^ cast_expr
            	    {
            	    set459=(Token)input.LT(1);

            	    set459=(Token)input.LT(1);

            	    if ( input.LA(1)==DIV||input.LA(1)==PERCENT||input.LA(1)==STAR ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set459)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_cast_expr_in_multi_expr4265);
            	    cast_expr460=cast_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr460.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_expr"


    public static class func_name_suffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name_suffix"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:706:1: func_name_suffix : ( ( DOLLAR | PERIOD ) eid )+ ;
    public final QueryParser.func_name_suffix_return func_name_suffix() throws RecognitionException {
        QueryParser.func_name_suffix_return retval = new QueryParser.func_name_suffix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set461=null;
        QueryParser.eid_return eid462 =null;


        Object set461_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:706:18: ( ( ( DOLLAR | PERIOD ) eid )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:706:20: ( ( DOLLAR | PERIOD ) eid )+
            {
            root_0 = (Object)adaptor.nil();


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:706:20: ( ( DOLLAR | PERIOD ) eid )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==DOLLAR||LA126_0==PERIOD) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:706:22: ( DOLLAR | PERIOD ) eid
            	    {
            	    set461=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set461)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name_suffix4289);
            	    eid462=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid462.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name_suffix"


    public static class cast_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expr"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:709:1: cast_expr : ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr );
    public final QueryParser.cast_expr_return cast_expr() throws RecognitionException {
        QueryParser.cast_expr_return retval = new QueryParser.cast_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS464=null;
        Token LEFT_PAREN474=null;
        Token COMMA476=null;
        Token RIGHT_PAREN478=null;
        Token LEFT_PAREN481=null;
        Token COMMA483=null;
        Token RIGHT_PAREN485=null;
        Token CASE487=null;
        Token WHEN488=null;
        Token THEN490=null;
        Token WHEN492=null;
        Token THEN494=null;
        Token ELSE496=null;
        Token END498=null;
        Token WHEN501=null;
        Token THEN503=null;
        Token WHEN505=null;
        Token THEN507=null;
        Token ELSE509=null;
        Token END511=null;
        QueryParser.scalar_return scalar463 =null;

        QueryParser.cast_expr_return cast_expr465 =null;

        QueryParser.col_ref_without_identifier_return col_ref_without_identifier466 =null;

        QueryParser.projection_return projection467 =null;

        QueryParser.invoker_func_return invoker_func468 =null;

        QueryParser.projection_return projection469 =null;

        QueryParser.identifier_plus_return identifier_plus470 =null;

        QueryParser.projection_return projection471 =null;

        QueryParser.identifier_plus_return identifier_plus472 =null;

        QueryParser.func_name_suffix_return func_name_suffix473 =null;

        QueryParser.real_arg_return real_arg475 =null;

        QueryParser.real_arg_return real_arg477 =null;

        QueryParser.projection_return projection479 =null;

        QueryParser.func_name_without_columns_return func_name_without_columns480 =null;

        QueryParser.real_arg_return real_arg482 =null;

        QueryParser.real_arg_return real_arg484 =null;

        QueryParser.projection_return projection486 =null;

        QueryParser.cond_return cond489 =null;

        QueryParser.expr_return expr491 =null;

        QueryParser.cond_return cond493 =null;

        QueryParser.expr_return expr495 =null;

        QueryParser.expr_return expr497 =null;

        QueryParser.projection_return projection499 =null;

        QueryParser.expr_return expr500 =null;

        QueryParser.rhs_operand_return rhs_operand502 =null;

        QueryParser.rhs_operand_return rhs_operand504 =null;

        QueryParser.rhs_operand_return rhs_operand506 =null;

        QueryParser.rhs_operand_return rhs_operand508 =null;

        QueryParser.rhs_operand_return rhs_operand510 =null;

        QueryParser.projection_return projection512 =null;

        QueryParser.paren_expr_return paren_expr513 =null;

        QueryParser.curly_expr_return curly_expr514 =null;

        QueryParser.bracket_expr_return bracket_expr515 =null;


        Object MINUS464_tree=null;
        Object LEFT_PAREN474_tree=null;
        Object COMMA476_tree=null;
        Object RIGHT_PAREN478_tree=null;
        Object LEFT_PAREN481_tree=null;
        Object COMMA483_tree=null;
        Object RIGHT_PAREN485_tree=null;
        Object CASE487_tree=null;
        Object WHEN488_tree=null;
        Object THEN490_tree=null;
        Object WHEN492_tree=null;
        Object THEN494_tree=null;
        Object ELSE496_tree=null;
        Object END498_tree=null;
        Object WHEN501_tree=null;
        Object THEN503_tree=null;
        Object WHEN505_tree=null;
        Object THEN507_tree=null;
        Object ELSE509_tree=null;
        Object END511_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_func_name_without_columns=new RewriteRuleSubtreeStream(adaptor,"rule func_name_without_columns");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        RewriteRuleSubtreeStream stream_rhs_operand=new RewriteRuleSubtreeStream(adaptor,"rule rhs_operand");
        RewriteRuleSubtreeStream stream_func_name_suffix=new RewriteRuleSubtreeStream(adaptor,"rule func_name_suffix");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:775:11: ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr )
            int alt144=11;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:775:13: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_cast_expr4324);
                    scalar463=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar463.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:776:13: MINUS cast_expr
                    {
                    MINUS464=(Token)match(input,MINUS,FOLLOW_MINUS_in_cast_expr4338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS464);


                    pushFollow(FOLLOW_cast_expr_in_cast_expr4340);
                    cast_expr465=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr465.getTree());

                    // AST REWRITE
                    // elements: cast_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 776:29: -> ^( NEG cast_expr )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:776:32: ^( NEG cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NEG, "NEG")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:780:13: col_ref_without_identifier ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_without_identifier_in_cast_expr4397);
                    col_ref_without_identifier466=col_ref_without_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref_without_identifier466.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:780:40: ( projection )*
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==PERIOD||LA127_0==POUND) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:780:40: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4399);
                    	    projection467=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection467.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop127;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:781:13: invoker_func ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_invoker_func_in_cast_expr4414);
                    invoker_func468=invoker_func();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_func468.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:781:26: ( projection )*
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==PERIOD||LA128_0==POUND) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:781:26: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4416);
                    	    projection469=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection469.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);


                    }
                    break;
                case 5 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:782:13: identifier_plus ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_cast_expr4431);
                    identifier_plus470=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus470.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:782:29: ( projection )*
                    loop129:
                    do {
                        int alt129=2;
                        int LA129_0 = input.LA(1);

                        if ( (LA129_0==PERIOD||LA129_0==POUND) ) {
                            alt129=1;
                        }


                        switch (alt129) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:782:29: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4433);
                    	    projection471=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection471.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop129;
                        }
                    } while (true);


                    }
                    break;
                case 6 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:13: identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_cast_expr4448);
                    identifier_plus472=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus472.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:29: ( func_name_suffix )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==DOLLAR||LA130_0==PERIOD) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:29: func_name_suffix
                            {
                            pushFollow(FOLLOW_func_name_suffix_in_cast_expr4450);
                            func_name_suffix473=func_name_suffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_name_suffix.add(func_name_suffix473.getTree());

                            }
                            break;

                    }


                    LEFT_PAREN474=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr4453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN474);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:58: ( real_arg ( COMMA real_arg )* )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==ALL||LA132_0==AND||(LA132_0 >= AS && LA132_0 <= ASSERT)||LA132_0==BIGDECIMAL||LA132_0==BIGINTEGER||(LA132_0 >= BY && LA132_0 <= CHARARRAY)||LA132_0==COGROUP||(LA132_0 >= CROSS && LA132_0 <= DATETIME)||LA132_0==DEFINE||LA132_0==DESC||LA132_0==DISTINCT||LA132_0==DOLLARVAR||(LA132_0 >= DOUBLENUMBER && LA132_0 <= END)||LA132_0==FALSE||LA132_0==FILTER||(LA132_0 >= FLOATNUMBER && LA132_0 <= GROUP)||(LA132_0 >= IDENTIFIER && LA132_0 <= INPUT)||(LA132_0 >= INTEGER && LA132_0 <= LEFT_PAREN)||(LA132_0 >= LIMIT && LA132_0 <= LOAD)||LA132_0==LONGINTEGER||(LA132_0 >= MAPREDUCE && LA132_0 <= MINUS)||LA132_0==NULL||(LA132_0 >= OR && LA132_0 <= ORDER)||(LA132_0 >= OUTER && LA132_0 <= PARTITION)||(LA132_0 >= QUOTEDSTRING && LA132_0 <= RANK)||(LA132_0 >= REGISTER && LA132_0 <= RIGHT)||(LA132_0 >= ROLLUP && LA132_0 <= SAMPLE)||LA132_0==SHIP||(LA132_0 >= SPLIT && LA132_0 <= TRUE)||(LA132_0 >= UNION && LA132_0 <= USING)||LA132_0==WHEN||(LA132_0 >= BOOL && LA132_0 <= BOOL_COND)||LA132_0==REALIAS) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:60: real_arg ( COMMA real_arg )*
                            {
                            pushFollow(FOLLOW_real_arg_in_cast_expr4457);
                            real_arg475=real_arg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_real_arg.add(real_arg475.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:69: ( COMMA real_arg )*
                            loop131:
                            do {
                                int alt131=2;
                                int LA131_0 = input.LA(1);

                                if ( (LA131_0==COMMA) ) {
                                    alt131=1;
                                }


                                switch (alt131) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:71: COMMA real_arg
                            	    {
                            	    COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_expr4461); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA476);


                            	    pushFollow(FOLLOW_real_arg_in_cast_expr4463);
                            	    real_arg477=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg477.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop131;
                                }
                            } while (true);


                            }
                            break;

                    }


                    RIGHT_PAREN478=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr4471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN478);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:104: ( projection )*
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);

                        if ( (LA133_0==PERIOD||LA133_0==POUND) ) {
                            alt133=1;
                        }


                        switch (alt133) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:104: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4473);
                    	    projection479=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection479.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop133;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: identifier_plus, projection, func_name_suffix, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 783:116: -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:119: ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:148: ( func_name_suffix )?
                        if ( stream_func_name_suffix.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_name_suffix.nextTree());

                        }
                        stream_func_name_suffix.reset();

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:166: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:783:178: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:13: func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_func_name_without_columns_in_cast_expr4507);
                    func_name_without_columns480=func_name_without_columns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name_without_columns.add(func_name_without_columns480.getTree());

                    LEFT_PAREN481=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr4509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN481);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:50: ( real_arg ( COMMA real_arg )* )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==ALL||LA135_0==AND||(LA135_0 >= AS && LA135_0 <= ASSERT)||LA135_0==BIGDECIMAL||LA135_0==BIGINTEGER||(LA135_0 >= BY && LA135_0 <= CHARARRAY)||LA135_0==COGROUP||(LA135_0 >= CROSS && LA135_0 <= DATETIME)||LA135_0==DEFINE||LA135_0==DESC||LA135_0==DISTINCT||LA135_0==DOLLARVAR||(LA135_0 >= DOUBLENUMBER && LA135_0 <= END)||LA135_0==FALSE||LA135_0==FILTER||(LA135_0 >= FLOATNUMBER && LA135_0 <= GROUP)||(LA135_0 >= IDENTIFIER && LA135_0 <= INPUT)||(LA135_0 >= INTEGER && LA135_0 <= LEFT_PAREN)||(LA135_0 >= LIMIT && LA135_0 <= LOAD)||LA135_0==LONGINTEGER||(LA135_0 >= MAPREDUCE && LA135_0 <= MINUS)||LA135_0==NULL||(LA135_0 >= OR && LA135_0 <= ORDER)||(LA135_0 >= OUTER && LA135_0 <= PARTITION)||(LA135_0 >= QUOTEDSTRING && LA135_0 <= RANK)||(LA135_0 >= REGISTER && LA135_0 <= RIGHT)||(LA135_0 >= ROLLUP && LA135_0 <= SAMPLE)||LA135_0==SHIP||(LA135_0 >= SPLIT && LA135_0 <= TRUE)||(LA135_0 >= UNION && LA135_0 <= USING)||LA135_0==WHEN||(LA135_0 >= BOOL && LA135_0 <= BOOL_COND)||LA135_0==REALIAS) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:52: real_arg ( COMMA real_arg )*
                            {
                            pushFollow(FOLLOW_real_arg_in_cast_expr4513);
                            real_arg482=real_arg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_real_arg.add(real_arg482.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:61: ( COMMA real_arg )*
                            loop134:
                            do {
                                int alt134=2;
                                int LA134_0 = input.LA(1);

                                if ( (LA134_0==COMMA) ) {
                                    alt134=1;
                                }


                                switch (alt134) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:63: COMMA real_arg
                            	    {
                            	    COMMA483=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_expr4517); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA483);


                            	    pushFollow(FOLLOW_real_arg_in_cast_expr4519);
                            	    real_arg484=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg484.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop134;
                                }
                            } while (true);


                            }
                            break;

                    }


                    RIGHT_PAREN485=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr4527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN485);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:96: ( projection )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==PERIOD||LA136_0==POUND) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:96: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4529);
                    	    projection486=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection486.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: real_arg, func_name_without_columns, projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 784:108: -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:111: ^( FUNC_EVAL func_name_without_columns ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name_without_columns.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:150: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:784:162: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:13: CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* )
                    {
                    CASE487=(Token)match(input,CASE,FOLLOW_CASE_in_cast_expr4560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE487);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:18: ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* )
                    int alt143=2;
                    alt143 = dfa143.predict(input);
                    switch (alt143) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:20: ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )*
                            {
                            WHEN488=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4569); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHEN.add(WHEN488);


                            pushFollow(FOLLOW_cond_in_cast_expr4571);
                            cond489=cond();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_cond.add(cond489.getTree());

                            THEN490=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4573); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN490);


                            pushFollow(FOLLOW_expr_in_cast_expr4575);
                            expr491=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr491.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:49: ( WHEN cond THEN expr )*
                            loop137:
                            do {
                                int alt137=2;
                                int LA137_0 = input.LA(1);

                                if ( (LA137_0==WHEN) ) {
                                    alt137=1;
                                }


                                switch (alt137) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:51: WHEN cond THEN expr
                            	    {
                            	    WHEN492=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4579); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_WHEN.add(WHEN492);


                            	    pushFollow(FOLLOW_cond_in_cast_expr4581);
                            	    cond493=cond();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_cond.add(cond493.getTree());

                            	    THEN494=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4583); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_THEN.add(THEN494);


                            	    pushFollow(FOLLOW_expr_in_cast_expr4585);
                            	    expr495=expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expr.add(expr495.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop137;
                                }
                            } while (true);


                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:74: ( ELSE expr )?
                            int alt138=2;
                            int LA138_0 = input.LA(1);

                            if ( (LA138_0==ELSE) ) {
                                alt138=1;
                            }
                            switch (alt138) {
                                case 1 :
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:76: ELSE expr
                                    {
                                    ELSE496=(Token)match(input,ELSE,FOLLOW_ELSE_in_cast_expr4592); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE496);


                                    pushFollow(FOLLOW_expr_in_cast_expr4594);
                                    expr497=expr();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expr.add(expr497.getTree());

                                    }
                                    break;

                            }


                            END498=(Token)match(input,END,FOLLOW_END_in_cast_expr4599); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_END.add(END498);


                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:93: ( projection )*
                            loop139:
                            do {
                                int alt139=2;
                                int LA139_0 = input.LA(1);

                                if ( (LA139_0==PERIOD||LA139_0==POUND) ) {
                                    alt139=1;
                                }


                                switch (alt139) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:93: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_cast_expr4601);
                            	    projection499=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection499.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop139;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: cond, projection, expr, THEN, WHEN
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 785:105: -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )*
                            {
                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:108: ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(CASE_COND, "CASE_COND")
                                , root_1);

                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:121: ^( WHEN ( cond )+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                stream_WHEN.nextNode()
                                , root_2);

                                if ( !(stream_cond.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_cond.hasNext() ) {
                                    adaptor.addChild(root_2, stream_cond.nextTree());

                                }
                                stream_cond.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:135: ^( THEN ( expr )+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                stream_THEN.nextNode()
                                , root_2);

                                if ( !(stream_expr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expr.hasNext() ) {
                                    adaptor.addChild(root_2, stream_expr.nextTree());

                                }
                                stream_expr.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:151: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:786:20: expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )*
                            {
                            pushFollow(FOLLOW_expr_in_cast_expr4648);
                            expr500=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr500.getTree());

                            WHEN501=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4650); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHEN.add(WHEN501);


                            pushFollow(FOLLOW_rhs_operand_in_cast_expr4652);
                            rhs_operand502=rhs_operand();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand502.getTree());

                            THEN503=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4654); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN503);


                            pushFollow(FOLLOW_rhs_operand_in_cast_expr4656);
                            rhs_operand504=rhs_operand();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand504.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:786:59: ( WHEN rhs_operand THEN rhs_operand )*
                            loop140:
                            do {
                                int alt140=2;
                                int LA140_0 = input.LA(1);

                                if ( (LA140_0==WHEN) ) {
                                    alt140=1;
                                }


                                switch (alt140) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:786:61: WHEN rhs_operand THEN rhs_operand
                            	    {
                            	    WHEN505=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4660); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_WHEN.add(WHEN505);


                            	    pushFollow(FOLLOW_rhs_operand_in_cast_expr4662);
                            	    rhs_operand506=rhs_operand();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand506.getTree());

                            	    THEN507=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4664); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_THEN.add(THEN507);


                            	    pushFollow(FOLLOW_rhs_operand_in_cast_expr4666);
                            	    rhs_operand508=rhs_operand();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand508.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop140;
                                }
                            } while (true);


                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:786:98: ( ELSE rhs_operand )?
                            int alt141=2;
                            int LA141_0 = input.LA(1);

                            if ( (LA141_0==ELSE) ) {
                                alt141=1;
                            }
                            switch (alt141) {
                                case 1 :
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:786:100: ELSE rhs_operand
                                    {
                                    ELSE509=(Token)match(input,ELSE,FOLLOW_ELSE_in_cast_expr4673); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE509);


                                    pushFollow(FOLLOW_rhs_operand_in_cast_expr4675);
                                    rhs_operand510=rhs_operand();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_rhs_operand.add(rhs_operand510.getTree());

                                    }
                                    break;

                            }


                            END511=(Token)match(input,END,FOLLOW_END_in_cast_expr4680); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_END.add(END511);


                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:786:124: ( projection )*
                            loop142:
                            do {
                                int alt142=2;
                                int LA142_0 = input.LA(1);

                                if ( (LA142_0==PERIOD||LA142_0==POUND) ) {
                                    alt142=1;
                                }


                                switch (alt142) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:786:124: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_cast_expr4682);
                            	    projection512=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection512.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop142;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: projection, rhs_operand, expr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 787:18: -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )*
                            {
                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:787:21: ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                                , root_1);

                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:787:34: ^( CASE_EXPR_LHS expr )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(CASE_EXPR_LHS, "CASE_EXPR_LHS")
                                , root_2);

                                adaptor.addChild(root_2, stream_expr.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                if ( !(stream_rhs_operand.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_rhs_operand.hasNext() ) {
                                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:787:56: ^( CASE_EXPR_RHS rhs_operand )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot(
                                    (Object)adaptor.create(CASE_EXPR_RHS, "CASE_EXPR_RHS")
                                    , root_2);

                                    adaptor.addChild(root_2, stream_rhs_operand.nextTree());

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_rhs_operand.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:787:88: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:789:13: paren_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_paren_expr_in_cast_expr4757);
                    paren_expr513=paren_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_expr513.getTree());

                    }
                    break;
                case 10 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:790:13: curly_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_curly_expr_in_cast_expr4771);
                    curly_expr514=curly_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, curly_expr514.getTree());

                    }
                    break;
                case 11 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:791:13: bracket_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bracket_expr_in_cast_expr4785);
                    bracket_expr515=bracket_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_expr515.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    BaseTree tree = (BaseTree) retval.getTree();

                    // the parser does an initial optimisation step: it removes TOTUPLE / TOMAP / TOBAG
                    // function calls if it knows they'll just return the input (i.e. because the function's
                    // argument is a literal). We'll do this here by post-processing the result:
                    if(tree.getType() == FUNC_EVAL) {
                        Integer func = FUNC_TO_LITERAL.get(tree.getChild(0).getType());
                        if(func != null) {
                            boolean canBeOptimised = true;
                            for(int arg = 1; arg < tree.getChildCount() && canBeOptimised; ++arg) {
                                canBeOptimised &= LITERAL_TOKENS.contains(tree.getChild(arg).getType());
                            }
                            if(canBeOptimised) {
                                retval.tree = adaptor.create(func, func.toString());
                                ((BaseTree)retval.tree).addChildren(tree.getChildren());
                                ((BaseTree)retval.tree).deleteChild(0); // the (e.g.) TOBAG token
                                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                            }
                        }
                    }

                    // a minor correction to the token text for formatting -
                    // we want NEG's text to be the same as MINUSes
                    if(tree.getType() == NEG) {
                        ((CommonTree)tree).token.setText("-");
                    }

                    // As noted below, brackets around a single literal mean a tuple
                    // of that literal, not a nested expression which evaluates to
                    // that literal. Remember that a NULL with children is a boolean
                    // expression, not a literal!
                    if(tree.getType() == EXPR_IN_PAREN
                    && LITERAL_TOKENS.contains(tree.getChild(0).getType())
                    && (tree.getChild(0).getType() != NULL || tree.getChild(0).getChildCount() == 0)) {
                        ((CommonTree)tree).token.setType(TUPLE_VAL);
                    }

                    // For CASE statement, we clone the case expression (1st child of the
                    // returned tree) and insert it before every when expression. For example,
                    //
                    //   CASE e1
                    //     WHEN e2 THEN e3
                    //     WHEN e4 THEN e5
                    //     ELSE e6
                    //   END
                    // =>
                    //   ^( CASE e1, e2, e3, e1, e4, e5, e6 )
                    //
                    // Note that e1 appears twice at index 0 and 3.
                    //
                    // This is needed because in LogicalPlanGenerator.g, we translate this
                    // tree to nested bincond expressions, and we need to construct a new
                    // LogicalExpression object per when branch.
                    if(tree.getType() == CASE_EXPR) {
                        Tree caseExpr = tree.getChild(0);
                        int childCount = tree.getChildCount();
                        boolean hasElse = childCount % 2 == 0;
                        int whenBranchCount = ( childCount - (hasElse ? 2 : 1) ) / 2;
                        for(int i = 1; i < whenBranchCount; i++) {
                            tree.insertChild(3*i, deepCopy(caseExpr));
                        }
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expr"


    public static class invoker_func_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invoker_func"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:794:1: invoker_func : INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* ) ;
    public final QueryParser.invoker_func_return invoker_func() throws RecognitionException {
        QueryParser.invoker_func_return retval = new QueryParser.invoker_func_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INVOKE516=null;
        Token AMPERSAND517=null;
        Token LEFT_PAREN518=null;
        Token RIGHT_PAREN520=null;
        Token PERIOD521=null;
        Token LEFT_PAREN522=null;
        Token COMMA524=null;
        Token RIGHT_PAREN526=null;
        QueryParser.identifier_plus_return packageName =null;

        QueryParser.identifier_plus_return methodName =null;

        QueryParser.real_arg_return real_arg519 =null;

        QueryParser.real_arg_return real_arg523 =null;

        QueryParser.real_arg_return real_arg525 =null;


        Object INVOKE516_tree=null;
        Object AMPERSAND517_tree=null;
        Object LEFT_PAREN518_tree=null;
        Object RIGHT_PAREN520_tree=null;
        Object PERIOD521_tree=null;
        Object LEFT_PAREN522_tree=null;
        Object COMMA524_tree=null;
        Object RIGHT_PAREN526_tree=null;
        RewriteRuleTokenStream stream_AMPERSAND=new RewriteRuleTokenStream(adaptor,"token AMPERSAND");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_INVOKE=new RewriteRuleTokenStream(adaptor,"token INVOKE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");

            String staticStr = "true";
            List<String> packageStr = Lists.newArrayList();
            String methodStr = null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:3: ( INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:3: INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN
            {
            INVOKE516=(Token)match(input,INVOKE,FOLLOW_INVOKE_in_invoker_func4799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INVOKE.add(INVOKE516);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:10: ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==AMPERSAND) ) {
                alt145=1;
            }
            else if ( (LA145_0==LEFT_PAREN) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;

            }
            switch (alt145) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:12: AMPERSAND
                    {
                    AMPERSAND517=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_invoker_func4803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AMPERSAND.add(AMPERSAND517);


                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:24: LEFT_PAREN real_arg RIGHT_PAREN
                    {
                    LEFT_PAREN518=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_invoker_func4807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN518);


                    pushFollow(FOLLOW_real_arg_in_invoker_func4809);
                    real_arg519=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg519.getTree());

                    if ( state.backtracking==0 ) { staticStr = "false"; }

                    RIGHT_PAREN520=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_invoker_func4813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN520);


                    }
                    break;

            }


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:83: (packageName= identifier_plus PERIOD )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==IDENTIFIER) ) {
                    int LA146_1 = input.LA(2);

                    if ( (LA146_1==PERIOD) ) {
                        alt146=1;
                    }


                }
                else if ( (LA146_0==CUBE||(LA146_0 >= ELSE && LA146_0 <= END)||LA146_0==IN||LA146_0==RANK||LA146_0==THEN||LA146_0==WHEN) ) {
                    int LA146_2 = input.LA(2);

                    if ( (LA146_2==PERIOD) ) {
                        alt146=1;
                    }


                }


                switch (alt146) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:85: packageName= identifier_plus PERIOD
            	    {
            	    pushFollow(FOLLOW_identifier_plus_in_invoker_func4821);
            	    packageName=identifier_plus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifier_plus.add(packageName.getTree());

            	    PERIOD521=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_invoker_func4823); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD521);


            	    if ( state.backtracking==0 ) { packageStr.add((packageName!=null?input.toString(packageName.start,packageName.stop):null)); }

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            pushFollow(FOLLOW_identifier_plus_in_invoker_func4832);
            methodName=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(methodName.getTree());

            if ( state.backtracking==0 ) { methodStr=(methodName!=null?input.toString(methodName.start,methodName.stop):null); }

            LEFT_PAREN522=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_invoker_func4836); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN522);


            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:232: ( real_arg ( COMMA real_arg )* )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==ALL||LA148_0==AND||(LA148_0 >= AS && LA148_0 <= ASSERT)||LA148_0==BIGDECIMAL||LA148_0==BIGINTEGER||(LA148_0 >= BY && LA148_0 <= CHARARRAY)||LA148_0==COGROUP||(LA148_0 >= CROSS && LA148_0 <= DATETIME)||LA148_0==DEFINE||LA148_0==DESC||LA148_0==DISTINCT||LA148_0==DOLLARVAR||(LA148_0 >= DOUBLENUMBER && LA148_0 <= END)||LA148_0==FALSE||LA148_0==FILTER||(LA148_0 >= FLOATNUMBER && LA148_0 <= GROUP)||(LA148_0 >= IDENTIFIER && LA148_0 <= INPUT)||(LA148_0 >= INTEGER && LA148_0 <= LEFT_PAREN)||(LA148_0 >= LIMIT && LA148_0 <= LOAD)||LA148_0==LONGINTEGER||(LA148_0 >= MAPREDUCE && LA148_0 <= MINUS)||LA148_0==NULL||(LA148_0 >= OR && LA148_0 <= ORDER)||(LA148_0 >= OUTER && LA148_0 <= PARTITION)||(LA148_0 >= QUOTEDSTRING && LA148_0 <= RANK)||(LA148_0 >= REGISTER && LA148_0 <= RIGHT)||(LA148_0 >= ROLLUP && LA148_0 <= SAMPLE)||LA148_0==SHIP||(LA148_0 >= SPLIT && LA148_0 <= TRUE)||(LA148_0 >= UNION && LA148_0 <= USING)||LA148_0==WHEN||(LA148_0 >= BOOL && LA148_0 <= BOOL_COND)||LA148_0==REALIAS) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:234: real_arg ( COMMA real_arg )*
                    {
                    pushFollow(FOLLOW_real_arg_in_invoker_func4840);
                    real_arg523=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg523.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:243: ( COMMA real_arg )*
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==COMMA) ) {
                            alt147=1;
                        }


                        switch (alt147) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:800:245: COMMA real_arg
                    	    {
                    	    COMMA524=(Token)match(input,COMMA,FOLLOW_COMMA_in_invoker_func4844); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA524);


                    	    pushFollow(FOLLOW_real_arg_in_invoker_func4846);
                    	    real_arg525=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg525.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop147;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN526=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_invoker_func4854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN526);


            // AST REWRITE
            // elements: real_arg
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 801:15: -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:801:18: ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INVOKER_FUNC_EVAL, "INVOKER_FUNC_EVAL")
                , root_1);

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, Joiner.on(".").join(packageStr))
                );

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, methodStr)
                );

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, staticStr)
                );

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:801:127: ( real_arg )*
                while ( stream_real_arg.hasNext() ) {
                    adaptor.addChild(root_1, stream_real_arg.nextTree());

                }
                stream_real_arg.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "invoker_func"


    public static class paren_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "paren_expr"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:811:1: paren_expr : LEFT_PAREN ! try_implicit_map_cast ;
    public final QueryParser.paren_expr_return paren_expr() throws RecognitionException {
        QueryParser.paren_expr_return retval = new QueryParser.paren_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN527=null;
        QueryParser.try_implicit_map_cast_return try_implicit_map_cast528 =null;


        Object LEFT_PAREN527_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:851:5: ( LEFT_PAREN ! try_implicit_map_cast )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:851:7: LEFT_PAREN ! try_implicit_map_cast
            {
            root_0 = (Object)adaptor.nil();


            LEFT_PAREN527=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_expr4921); if (state.failed) return retval;

            pushFollow(FOLLOW_try_implicit_map_cast_in_paren_expr4924);
            try_implicit_map_cast528=try_implicit_map_cast();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, try_implicit_map_cast528.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    BaseTree tree = (BaseTree)retval.getTree();

                    // the other side of the @after block in unary_cond: if we've
                    // matched an EXPR_IN_PAREN we expect the nested expression to
                    // be an "expr", not a "cond", so we should strip off the
                    // BOOL_COND token.
                    if(tree.getType() == EXPR_IN_PAREN
                    && tree.getChild(0).getType() == BOOL_COND) {
                        int type = tree.getChild(0).getChild(0).getType();
                        // NULL is a special case - if it has children it's a boolean
                        // expression, and if not it's a literal NULL. Note that we
                        // replace *all* children
                        if(!BOOLEAN_TOKENS.contains(type)
                        || (type == NULL && tree.getChild(0).getChild(0).getChildCount() == 0)) {
                            Tree addChildrenOf = tree.getChild(0);
                            for(int i = 0; i < tree.getChildCount(); ++i)
                                tree.deleteChild(i);
                            for(int i = 0; i < addChildrenOf.getChildCount(); ++i)
                                tree.addChild(addChildrenOf.getChild(i));
                        }
                    }

                    // A function call to TOTUPLE is inserted into the AST for
                    // some tuple literals - but as we assume the first expression
                    // after an open bracket is a "cond" rule, and as "cond" rules
                    // nest "expr" rules under a BOOL_COND token we get an invalid
                    // AST. We'll remove this BOOL_COND here:
                    if(tree.getType() == FUNC_EVAL
                    && tree.getChild(0).getType() == TOTUPLE
                    && tree.getChildCount() > 1
                    && tree.getChild(1).getType() == BOOL_COND) {
                        Tree insertChildrenOf = tree.getChild(1);
                        tree.deleteChild(1);
                        for(int i = insertChildrenOf.getChildCount() - 1; i >= 0; --i)
                            tree.insertChild(1, insertChildrenOf.getChild(i));
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "paren_expr"


    public static class try_implicit_map_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_implicit_map_cast"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:854:1: try_implicit_map_cast : ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren );
    public final QueryParser.try_implicit_map_cast_return try_implicit_map_cast() throws RecognitionException {
        QueryParser.try_implicit_map_cast_return retval = new QueryParser.try_implicit_map_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RIGHT_PAREN530=null;
        QueryParser.implicit_map_type_return implicit_map_type529 =null;

        QueryParser.cast_expr_return cast_expr531 =null;

        QueryParser.after_left_paren_return after_left_paren532 =null;


        Object RIGHT_PAREN530_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_implicit_map_type=new RewriteRuleSubtreeStream(adaptor,"rule implicit_map_type");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:861:12: ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren )
            int alt149=2;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:861:14: ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr
                    {
                    pushFollow(FOLLOW_implicit_map_type_in_try_implicit_map_cast5027);
                    implicit_map_type529=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implicit_map_type.add(implicit_map_type529.getTree());

                    RIGHT_PAREN530=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_try_implicit_map_cast5029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN530);


                    pushFollow(FOLLOW_cast_expr_in_try_implicit_map_cast5031);
                    cast_expr531=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr531.getTree());

                    // AST REWRITE
                    // elements: implicit_map_type, cast_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 861:100: -> ^( CAST_EXPR implicit_map_type cast_expr )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:861:103: ^( CAST_EXPR implicit_map_type cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_implicit_map_type.nextTree());

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:862:14: after_left_paren
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_after_left_paren_in_try_implicit_map_cast5058);
                    after_left_paren532=after_left_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, after_left_paren532.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_implicit_map_cast"


    public static class after_left_paren_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "after_left_paren"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:865:1: after_left_paren : ( explicit_type_cast RIGHT_PAREN cast_expr -> ^( CAST_EXPR explicit_type_cast cast_expr ) | RIGHT_PAREN ( projection )* -> ^( TUPLE_VAL ) ( projection )* | STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )* | col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )* | cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) ) );
    public final QueryParser.after_left_paren_return after_left_paren() throws RecognitionException {
        QueryParser.after_left_paren_return retval = new QueryParser.after_left_paren_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RIGHT_PAREN534=null;
        Token RIGHT_PAREN536=null;
        Token STAR538=null;
        Token COMMA539=null;
        Token RIGHT_PAREN541=null;
        Token COMMA544=null;
        Token RIGHT_PAREN546=null;
        Token COMMA549=null;
        Token RIGHT_PAREN551=null;
        Token RIGHT_PAREN553=null;
        Token QMARK554=null;
        Token COLON555=null;
        Token RIGHT_PAREN556=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.explicit_type_cast_return explicit_type_cast533 =null;

        QueryParser.cast_expr_return cast_expr535 =null;

        QueryParser.projection_return projection537 =null;

        QueryParser.real_arg_return real_arg540 =null;

        QueryParser.projection_return projection542 =null;

        QueryParser.col_range_return col_range543 =null;

        QueryParser.real_arg_return real_arg545 =null;

        QueryParser.projection_return projection547 =null;

        QueryParser.cond_return cond548 =null;

        QueryParser.real_arg_return real_arg550 =null;

        QueryParser.projection_return projection552 =null;


        Object RIGHT_PAREN534_tree=null;
        Object RIGHT_PAREN536_tree=null;
        Object STAR538_tree=null;
        Object COMMA539_tree=null;
        Object RIGHT_PAREN541_tree=null;
        Object COMMA544_tree=null;
        Object RIGHT_PAREN546_tree=null;
        Object COMMA549_tree=null;
        Object RIGHT_PAREN551_tree=null;
        Object RIGHT_PAREN553_tree=null;
        Object QMARK554_tree=null;
        Object COLON555_tree=null;
        Object RIGHT_PAREN556_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleSubtreeStream stream_explicit_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type_cast");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        RewriteRuleSubtreeStream stream_col_range=new RewriteRuleSubtreeStream(adaptor,"rule col_range");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:865:18: ( explicit_type_cast RIGHT_PAREN cast_expr -> ^( CAST_EXPR explicit_type_cast cast_expr ) | RIGHT_PAREN ( projection )* -> ^( TUPLE_VAL ) ( projection )* | STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )* | col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )* | cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) ) )
            int alt158=5;
            switch ( input.LA(1) ) {
            case BIGINTEGER:
                {
                int LA158_1 = input.LA(2);

                if ( (LA158_1==RIGHT_PAREN) ) {
                    alt158=1;
                }
                else if ( (LA158_1==DOLLAR||LA158_1==LEFT_PAREN||LA158_1==PERIOD) ) {
                    alt158=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;

                }
                }
                break;
            case BAG:
            case BOOLEAN:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case MAP:
            case TUPLE:
                {
                alt158=1;
                }
                break;
            case RIGHT_PAREN:
                {
                alt158=2;
                }
                break;
            case STAR:
                {
                alt158=3;
                }
                break;
            case DOLLARVAR:
            case GROUP:
                {
                int LA158_5 = input.LA(2);

                if ( (LA158_5==DOUBLE_PERIOD) ) {
                    alt158=4;
                }
                else if ( (LA158_5==AND||LA158_5==COMMA||LA158_5==DIV||LA158_5==IN||LA158_5==IS||LA158_5==MINUS||(LA158_5 >= NUM_OP_EQ && LA158_5 <= NUM_OP_NE)||LA158_5==OR||(LA158_5 >= PERCENT && LA158_5 <= PERIOD)||(LA158_5 >= PLUS && LA158_5 <= QMARK)||LA158_5==RIGHT_PAREN||LA158_5==STAR||(LA158_5 >= STR_OP_EQ && LA158_5 <= STR_OP_NE)) ) {
                    alt158=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 5, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA158_6 = input.LA(2);

                if ( (LA158_6==DOUBLE_PERIOD) ) {
                    alt158=4;
                }
                else if ( (LA158_6==AND||LA158_6==COMMA||(LA158_6 >= DIV && LA158_6 <= DOLLAR)||LA158_6==IN||LA158_6==IS||LA158_6==LEFT_PAREN||LA158_6==MINUS||(LA158_6 >= NUM_OP_EQ && LA158_6 <= NUM_OP_NE)||LA158_6==OR||(LA158_6 >= PERCENT && LA158_6 <= PERIOD)||(LA158_6 >= PLUS && LA158_6 <= QMARK)||LA158_6==RIGHT_PAREN||LA158_6==STAR||(LA158_6 >= STR_OP_EQ && LA158_6 <= STR_OP_NE)) ) {
                    alt158=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 6, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA158_7 = input.LA(2);

                if ( (LA158_7==DOUBLE_PERIOD) ) {
                    alt158=4;
                }
                else if ( (LA158_7==AND||LA158_7==COMMA||(LA158_7 >= DIV && LA158_7 <= DOLLAR)||LA158_7==IN||LA158_7==IS||LA158_7==LEFT_PAREN||LA158_7==MINUS||(LA158_7 >= NUM_OP_EQ && LA158_7 <= NUM_OP_NE)||LA158_7==OR||(LA158_7 >= PERCENT && LA158_7 <= PERIOD)||(LA158_7 >= PLUS && LA158_7 <= QMARK)||LA158_7==RIGHT_PAREN||LA158_7==STAR||(LA158_7 >= STR_OP_EQ && LA158_7 <= STR_OP_NE)) ) {
                    alt158=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 7, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt158=4;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case ASSERT:
            case BY:
            case CACHE:
            case CASE:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTEGER:
            case INTO:
            case INVOKE:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONGINTEGER:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case REGISTER:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt158=5;
                }
                break;
            case BIGDECIMAL:
                {
                int LA158_10 = input.LA(2);

                if ( (LA158_10==RIGHT_PAREN) ) {
                    alt158=1;
                }
                else if ( (LA158_10==DOLLAR||LA158_10==LEFT_PAREN||LA158_10==PERIOD) ) {
                    alt158=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 10, input);

                    throw nvae;

                }
                }
                break;
            case DATETIME:
                {
                int LA158_11 = input.LA(2);

                if ( (LA158_11==RIGHT_PAREN) ) {
                    alt158=1;
                }
                else if ( (LA158_11==DOLLAR||LA158_11==LEFT_PAREN||LA158_11==PERIOD) ) {
                    alt158=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 11, input);

                    throw nvae;

                }
                }
                break;
            case CHARARRAY:
                {
                int LA158_12 = input.LA(2);

                if ( (LA158_12==RIGHT_PAREN) ) {
                    alt158=1;
                }
                else if ( (LA158_12==DOLLAR||LA158_12==LEFT_PAREN||LA158_12==PERIOD) ) {
                    alt158=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 12, input);

                    throw nvae;

                }
                }
                break;
            case BYTEARRAY:
                {
                int LA158_13 = input.LA(2);

                if ( (LA158_13==RIGHT_PAREN) ) {
                    alt158=1;
                }
                else if ( (LA158_13==DOLLAR||LA158_13==LEFT_PAREN||LA158_13==PERIOD) ) {
                    alt158=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 13, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;

            }

            switch (alt158) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:865:20: explicit_type_cast RIGHT_PAREN cast_expr
                    {
                    pushFollow(FOLLOW_explicit_type_cast_in_after_left_paren5067);
                    explicit_type_cast533=explicit_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast533.getTree());

                    RIGHT_PAREN534=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN534);


                    pushFollow(FOLLOW_cast_expr_in_after_left_paren5071);
                    cast_expr535=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr535.getTree());

                    // AST REWRITE
                    // elements: explicit_type_cast, cast_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 865:61: -> ^( CAST_EXPR explicit_type_cast cast_expr )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:865:64: ^( CAST_EXPR explicit_type_cast cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_explicit_type_cast.nextTree());

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:867:20: RIGHT_PAREN ( projection )*
                    {
                    RIGHT_PAREN536=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN536);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:867:32: ( projection )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==PERIOD||LA150_0==POUND) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:867:32: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren5124);
                    	    projection537=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection537.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 867:44: -> ^( TUPLE_VAL ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:867:47: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:867:62: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:868:20: STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )*
                    {
                    STAR538=(Token)match(input,STAR,FOLLOW_STAR_in_after_left_paren5157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(STAR538);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:868:25: ( COMMA real_arg )*
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( (LA151_0==COMMA) ) {
                            alt151=1;
                        }


                        switch (alt151) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:868:27: COMMA real_arg
                    	    {
                    	    COMMA539=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren5161); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA539);


                    	    pushFollow(FOLLOW_real_arg_in_after_left_paren5163);
                    	    real_arg540=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg540.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);


                    RIGHT_PAREN541=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN541);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:868:57: ( projection )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==PERIOD||LA152_0==POUND) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:868:57: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren5170);
                    	    projection542=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection542.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, STAR, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 868:69: -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:868:72: ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        adaptor.addChild(root_1, 
                        stream_STAR.nextNode()
                        );

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:868:98: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:868:110: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:869:20: col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_col_range_in_after_left_paren5210);
                    col_range543=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_range.add(col_range543.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:869:30: ( COMMA real_arg )*
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);

                        if ( (LA153_0==COMMA) ) {
                            alt153=1;
                        }


                        switch (alt153) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:869:32: COMMA real_arg
                    	    {
                    	    COMMA544=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren5214); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA544);


                    	    pushFollow(FOLLOW_real_arg_in_after_left_paren5216);
                    	    real_arg545=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg545.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop153;
                        }
                    } while (true);


                    RIGHT_PAREN546=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN546);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:869:62: ( projection )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==PERIOD||LA154_0==POUND) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:869:62: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren5223);
                    	    projection547=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection547.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: col_range, projection, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 869:74: -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:869:77: ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        adaptor.addChild(root_1, stream_col_range.nextTree());

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:869:108: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:869:120: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:874:20: cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) )
                    {
                    pushFollow(FOLLOW_cond_in_after_left_paren5335);
                    cond548=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cond.add(cond548.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:20: ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) )
                    int alt157=3;
                    switch ( input.LA(1) ) {
                    case COMMA:
                        {
                        alt157=1;
                        }
                        break;
                    case RIGHT_PAREN:
                        {
                        alt157=2;
                        }
                        break;
                    case QMARK:
                        {
                        alt157=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 157, 0, input);

                        throw nvae;

                    }

                    switch (alt157) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:22: ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:22: ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:24: ( COMMA real_arg )+ RIGHT_PAREN ( projection )*
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:24: ( COMMA real_arg )+
                            int cnt155=0;
                            loop155:
                            do {
                                int alt155=2;
                                int LA155_0 = input.LA(1);

                                if ( (LA155_0==COMMA) ) {
                                    alt155=1;
                                }


                                switch (alt155) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:26: COMMA real_arg
                            	    {
                            	    COMMA549=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren5362); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA549);


                            	    pushFollow(FOLLOW_real_arg_in_after_left_paren5364);
                            	    real_arg550=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg550.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt155 >= 1 ) break loop155;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(155, input);
                                        throw eee;
                                }
                                cnt155++;
                            } while (true);


                            RIGHT_PAREN551=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5369); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN551);


                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:56: ( projection )*
                            loop156:
                            do {
                                int alt156=2;
                                int LA156_0 = input.LA(1);

                                if ( (LA156_0==PERIOD||LA156_0==POUND) ) {
                                    alt156=1;
                                }


                                switch (alt156) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:56: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_after_left_paren5371);
                            	    projection552=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection552.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop156;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: real_arg, projection, cond
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 875:68: -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )*
                            {
                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:71: ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                                , root_1);

                                adaptor.addChild(root_1, 
                                (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                                );

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                if ( !(stream_real_arg.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_real_arg.hasNext() ) {
                                    adaptor.addChild(root_1, stream_real_arg.nextTree());

                                }
                                stream_real_arg.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:875:109: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:876:22: ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:876:22: ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:876:24: RIGHT_PAREN
                            {
                            RIGHT_PAREN553=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5417); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN553);


                            // AST REWRITE
                            // elements: cond
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 876:36: -> ^( EXPR_IN_PAREN cond )
                            {
                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:876:39: ^( EXPR_IN_PAREN cond )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(EXPR_IN_PAREN, "EXPR_IN_PAREN")
                                , root_1);

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;
                        case 3 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:877:22: ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
                            {
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:877:22: ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:877:24: QMARK exp1= expr COLON exp2= expr RIGHT_PAREN
                            {
                            QMARK554=(Token)match(input,QMARK,FOLLOW_QMARK_in_after_left_paren5454); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QMARK.add(QMARK554);


                            pushFollow(FOLLOW_expr_in_after_left_paren5460);
                            exp1=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

                            COLON555=(Token)match(input,COLON,FOLLOW_COLON_in_after_left_paren5462); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON555);


                            pushFollow(FOLLOW_expr_in_after_left_paren5468);
                            exp2=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

                            RIGHT_PAREN556=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5470); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN556);


                            // AST REWRITE
                            // elements: exp1, exp2, cond
                            // token labels: 
                            // rule labels: retval, exp2, exp1
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
                            RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 877:72: -> ^( BIN_EXPR cond $exp1 $exp2)
                            {
                                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:877:75: ^( BIN_EXPR cond $exp1 $exp2)
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(BIN_EXPR, "BIN_EXPR")
                                , root_1);

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                adaptor.addChild(root_1, stream_exp1.nextTree());

                                adaptor.addChild(root_1, stream_exp2.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "after_left_paren"


    public static class curly_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "curly_expr"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:1: curly_expr : ( LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )* -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )* | LEFT_CURLY RIGHT_CURLY ( projection )* -> ^( BAG_VAL ) ( projection )* );
    public final QueryParser.curly_expr_return curly_expr() throws RecognitionException {
        QueryParser.curly_expr_return retval = new QueryParser.curly_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY557=null;
        Token COMMA559=null;
        Token RIGHT_CURLY561=null;
        Token LEFT_CURLY563=null;
        Token RIGHT_CURLY564=null;
        QueryParser.real_arg_return real_arg558 =null;

        QueryParser.real_arg_return real_arg560 =null;

        QueryParser.projection_return projection562 =null;

        QueryParser.projection_return projection565 =null;


        Object LEFT_CURLY557_tree=null;
        Object COMMA559_tree=null;
        Object RIGHT_CURLY561_tree=null;
        Object LEFT_CURLY563_tree=null;
        Object RIGHT_CURLY564_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:12: ( LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )* -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )* | LEFT_CURLY RIGHT_CURLY ( projection )* -> ^( BAG_VAL ) ( projection )* )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==LEFT_CURLY) ) {
                int LA162_1 = input.LA(2);

                if ( (LA162_1==RIGHT_CURLY) ) {
                    alt162=2;
                }
                else if ( (LA162_1==ALL||LA162_1==AND||(LA162_1 >= AS && LA162_1 <= ASSERT)||LA162_1==BIGDECIMAL||LA162_1==BIGINTEGER||(LA162_1 >= BY && LA162_1 <= CHARARRAY)||LA162_1==COGROUP||(LA162_1 >= CROSS && LA162_1 <= DATETIME)||LA162_1==DEFINE||LA162_1==DESC||LA162_1==DISTINCT||LA162_1==DOLLARVAR||(LA162_1 >= DOUBLENUMBER && LA162_1 <= END)||LA162_1==FALSE||LA162_1==FILTER||(LA162_1 >= FLOATNUMBER && LA162_1 <= GROUP)||(LA162_1 >= IDENTIFIER && LA162_1 <= INPUT)||(LA162_1 >= INTEGER && LA162_1 <= LEFT_PAREN)||(LA162_1 >= LIMIT && LA162_1 <= LOAD)||LA162_1==LONGINTEGER||(LA162_1 >= MAPREDUCE && LA162_1 <= MINUS)||LA162_1==NULL||(LA162_1 >= OR && LA162_1 <= ORDER)||(LA162_1 >= OUTER && LA162_1 <= PARTITION)||(LA162_1 >= QUOTEDSTRING && LA162_1 <= RANK)||(LA162_1 >= REGISTER && LA162_1 <= RIGHT)||(LA162_1 >= ROLLUP && LA162_1 <= SAMPLE)||LA162_1==SHIP||(LA162_1 >= SPLIT && LA162_1 <= TRUE)||(LA162_1 >= UNION && LA162_1 <= USING)||LA162_1==WHEN||(LA162_1 >= BOOL && LA162_1 <= BOOL_COND)||LA162_1==REALIAS) ) {
                    alt162=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;

            }
            switch (alt162) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:14: LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )*
                    {
                    LEFT_CURLY557=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_expr5499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY557);


                    pushFollow(FOLLOW_real_arg_in_curly_expr5501);
                    real_arg558=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg558.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:34: ( COMMA real_arg )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==COMMA) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:36: COMMA real_arg
                    	    {
                    	    COMMA559=(Token)match(input,COMMA,FOLLOW_COMMA_in_curly_expr5505); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA559);


                    	    pushFollow(FOLLOW_real_arg_in_curly_expr5507);
                    	    real_arg560=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg560.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);


                    RIGHT_CURLY561=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_expr5512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY561);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:66: ( projection )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==PERIOD||LA160_0==POUND) ) {
                            alt160=1;
                        }


                        switch (alt160) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:66: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_curly_expr5514);
                    	    projection562=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection562.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 880:78: -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:81: ^( FUNC_EVAL TOBAG ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOBAG, "TOBAG")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:880:112: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:881:14: LEFT_CURLY RIGHT_CURLY ( projection )*
                    {
                    LEFT_CURLY563=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_expr5546); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY563);


                    RIGHT_CURLY564=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_expr5548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY564);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:881:37: ( projection )*
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==PERIOD||LA161_0==POUND) ) {
                            alt161=1;
                        }


                        switch (alt161) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:881:37: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_curly_expr5550);
                    	    projection565=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection565.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 881:49: -> ^( BAG_VAL ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:881:52: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:881:65: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "curly_expr"


    public static class bracket_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bracket_expr"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:1: bracket_expr : ( LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )* -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )* | LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ( keyvalue )+ ) ( projection )* | LEFT_BRACKET RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ) ( projection )* );
    public final QueryParser.bracket_expr_return bracket_expr() throws RecognitionException {
        QueryParser.bracket_expr_return retval = new QueryParser.bracket_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET566=null;
        Token COMMA568=null;
        Token RIGHT_BRACKET570=null;
        Token LEFT_BRACKET572=null;
        Token COMMA574=null;
        Token RIGHT_BRACKET576=null;
        Token LEFT_BRACKET578=null;
        Token RIGHT_BRACKET579=null;
        QueryParser.real_arg_return real_arg567 =null;

        QueryParser.real_arg_return real_arg569 =null;

        QueryParser.projection_return projection571 =null;

        QueryParser.keyvalue_return keyvalue573 =null;

        QueryParser.keyvalue_return keyvalue575 =null;

        QueryParser.projection_return projection577 =null;

        QueryParser.projection_return projection580 =null;


        Object LEFT_BRACKET566_tree=null;
        Object COMMA568_tree=null;
        Object RIGHT_BRACKET570_tree=null;
        Object LEFT_BRACKET572_tree=null;
        Object COMMA574_tree=null;
        Object RIGHT_BRACKET576_tree=null;
        Object LEFT_BRACKET578_tree=null;
        Object RIGHT_BRACKET579_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:14: ( LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )* -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )* | LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ( keyvalue )+ ) ( projection )* | LEFT_BRACKET RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ) ( projection )* )
            int alt168=3;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==LEFT_BRACKET) ) {
                switch ( input.LA(2) ) {
                case RIGHT_BRACKET:
                    {
                    alt168=3;
                    }
                    break;
                case QUOTEDSTRING:
                    {
                    int LA168_3 = input.LA(3);

                    if ( (LA168_3==POUND) ) {
                        alt168=2;
                    }
                    else if ( (LA168_3==COMMA||LA168_3==DIV||LA168_3==MINUS||LA168_3==PERCENT||LA168_3==PLUS||LA168_3==RIGHT_BRACKET||LA168_3==STAR) ) {
                        alt168=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 3, input);

                        throw nvae;

                    }
                    }
                    break;
                case ALL:
                case AND:
                case AS:
                case ASC:
                case ASSERT:
                case BIGDECIMAL:
                case BIGINTEGER:
                case BY:
                case BYTEARRAY:
                case CACHE:
                case CASE:
                case CHARARRAY:
                case COGROUP:
                case CROSS:
                case CUBE:
                case DATETIME:
                case DEFINE:
                case DESC:
                case DISTINCT:
                case DOLLARVAR:
                case DOUBLENUMBER:
                case DOUBLE_PERIOD:
                case ELSE:
                case END:
                case FALSE:
                case FILTER:
                case FLOATNUMBER:
                case FOREACH:
                case FULL:
                case GENERATE:
                case GROUP:
                case IDENTIFIER:
                case IF:
                case IMPORT:
                case IN:
                case INNER:
                case INPUT:
                case INTEGER:
                case INTO:
                case INVOKE:
                case IS:
                case JOIN:
                case LEFT:
                case LEFT_BRACKET:
                case LEFT_CURLY:
                case LEFT_PAREN:
                case LIMIT:
                case LOAD:
                case LONGINTEGER:
                case MAPREDUCE:
                case MINUS:
                case NULL:
                case OR:
                case ORDER:
                case OUTER:
                case OUTPUT:
                case PARALLEL:
                case PARTITION:
                case RANK:
                case REGISTER:
                case RETURNS:
                case RIGHT:
                case ROLLUP:
                case SAMPLE:
                case SHIP:
                case SPLIT:
                case STAR:
                case STDERROR:
                case STDIN:
                case STDOUT:
                case STORE:
                case STREAM:
                case STR_OP_EQ:
                case STR_OP_GT:
                case STR_OP_GTE:
                case STR_OP_LT:
                case STR_OP_LTE:
                case STR_OP_MATCHES:
                case STR_OP_NE:
                case THEN:
                case THROUGH:
                case TRUE:
                case UNION:
                case USING:
                case WHEN:
                case BOOL:
                case BOOL_COND:
                case REALIAS:
                    {
                    alt168=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;

            }
            switch (alt168) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:16: LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET566=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET566);


                    pushFollow(FOLLOW_real_arg_in_bracket_expr5573);
                    real_arg567=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg567.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:38: ( COMMA real_arg )*
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==COMMA) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:40: COMMA real_arg
                    	    {
                    	    COMMA568=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_expr5577); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA568);


                    	    pushFollow(FOLLOW_real_arg_in_bracket_expr5579);
                    	    real_arg569=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg569.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);


                    RIGHT_BRACKET570=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET570);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:72: ( projection )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==PERIOD||LA164_0==POUND) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:72: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5586);
                    	    projection571=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection571.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 884:84: -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:87: ^( FUNC_EVAL TOMAP ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOMAP, "TOMAP")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:884:118: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:885:16: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET572=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET572);


                    pushFollow(FOLLOW_keyvalue_in_bracket_expr5622);
                    keyvalue573=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue573.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:885:38: ( COMMA keyvalue )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==COMMA) ) {
                            alt165=1;
                        }


                        switch (alt165) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:885:40: COMMA keyvalue
                    	    {
                    	    COMMA574=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_expr5626); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA574);


                    	    pushFollow(FOLLOW_keyvalue_in_bracket_expr5628);
                    	    keyvalue575=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue575.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    RIGHT_BRACKET576=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET576);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:885:72: ( projection )*
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==PERIOD||LA166_0==POUND) ) {
                            alt166=1;
                        }


                        switch (alt166) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:885:72: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5635);
                    	    projection577=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection577.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop166;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, keyvalue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 885:84: -> ^( MAP_VAL ( keyvalue )+ ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:885:87: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:885:110: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:886:16: LEFT_BRACKET RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET578=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET578);


                    RIGHT_BRACKET579=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET579);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:886:43: ( projection )*
                    loop167:
                    do {
                        int alt167=2;
                        int LA167_0 = input.LA(1);

                        if ( (LA167_0==PERIOD||LA167_0==POUND) ) {
                            alt167=1;
                        }


                        switch (alt167) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:886:43: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5671);
                    	    projection580=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection580.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop167;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 886:55: -> ^( MAP_VAL ) ( projection )*
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:886:58: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:886:71: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bracket_expr"


    public static class projection_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projection"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:1: projection : ( PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) -> ^( PERIOD ( col_ref )+ ) | POUND ^ ( QUOTEDSTRING | NULL ) );
    public final QueryParser.projection_return projection() throws RecognitionException {
        QueryParser.projection_return retval = new QueryParser.projection_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD581=null;
        Token LEFT_PAREN583=null;
        Token COMMA585=null;
        Token RIGHT_PAREN587=null;
        Token POUND588=null;
        Token set589=null;
        QueryParser.col_ref_return col_ref582 =null;

        QueryParser.col_ref_return col_ref584 =null;

        QueryParser.col_ref_return col_ref586 =null;


        Object PERIOD581_tree=null;
        Object LEFT_PAREN583_tree=null;
        Object COMMA585_tree=null;
        Object RIGHT_PAREN587_tree=null;
        Object POUND588_tree=null;
        Object set589_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:12: ( PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) -> ^( PERIOD ( col_ref )+ ) | POUND ^ ( QUOTEDSTRING | NULL ) )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==PERIOD) ) {
                alt171=1;
            }
            else if ( (LA171_0==POUND) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;

            }
            switch (alt171) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:14: PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    PERIOD581=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_projection5692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD581);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:21: ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==CUBE||LA170_0==DOLLARVAR||(LA170_0 >= ELSE && LA170_0 <= END)||LA170_0==GROUP||LA170_0==IDENTIFIER||LA170_0==IN||LA170_0==RANK||LA170_0==THEN||LA170_0==WHEN) ) {
                        alt170=1;
                    }
                    else if ( (LA170_0==LEFT_PAREN) ) {
                        alt170=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 0, input);

                        throw nvae;

                    }
                    switch (alt170) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:23: col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_projection5696);
                            col_ref582=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(col_ref582.getTree());

                            }
                            break;
                        case 2 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:33: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                            {
                            LEFT_PAREN583=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_projection5700); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN583);


                            pushFollow(FOLLOW_col_ref_in_projection5702);
                            col_ref584=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(col_ref584.getTree());

                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:52: ( COMMA col_ref )*
                            loop169:
                            do {
                                int alt169=2;
                                int LA169_0 = input.LA(1);

                                if ( (LA169_0==COMMA) ) {
                                    alt169=1;
                                }


                                switch (alt169) {
                            	case 1 :
                            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:54: COMMA col_ref
                            	    {
                            	    COMMA585=(Token)match(input,COMMA,FOLLOW_COMMA_in_projection5706); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA585);


                            	    pushFollow(FOLLOW_col_ref_in_projection5708);
                            	    col_ref586=col_ref();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref586.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop169;
                                }
                            } while (true);


                            RIGHT_PAREN587=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_projection5713); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN587);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: PERIOD, col_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 889:85: -> ^( PERIOD ( col_ref )+ )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:889:88: ^( PERIOD ( col_ref )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_PERIOD.nextNode()
                        , root_1);

                        if ( !(stream_col_ref.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_col_ref.hasNext() ) {
                            adaptor.addChild(root_1, stream_col_ref.nextTree());

                        }
                        stream_col_ref.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:890:14: POUND ^ ( QUOTEDSTRING | NULL )
                    {
                    root_0 = (Object)adaptor.nil();


                    POUND588=(Token)match(input,POUND,FOLLOW_POUND_in_projection5741); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    POUND588_tree = 
                    (Object)adaptor.create(POUND588)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(POUND588_tree, root_0);
                    }

                    set589=(Token)input.LT(1);

                    if ( input.LA(1)==NULL||input.LA(1)==QUOTEDSTRING ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set589)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projection"


    public static class col_ref_without_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_without_identifier"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:896:1: col_ref_without_identifier : ( GROUP | DOLLARVAR );
    public final QueryParser.col_ref_without_identifier_return col_ref_without_identifier() throws RecognitionException {
        QueryParser.col_ref_without_identifier_return retval = new QueryParser.col_ref_without_identifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set590=null;

        Object set590_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:896:28: ( GROUP | DOLLARVAR )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set590=(Token)input.LT(1);

            if ( input.LA(1)==DOLLARVAR||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set590)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_without_identifier"


    public static class col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:899:1: col_ref : ( col_ref_without_identifier | identifier_plus );
    public final QueryParser.col_ref_return col_ref() throws RecognitionException {
        QueryParser.col_ref_return retval = new QueryParser.col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_without_identifier_return col_ref_without_identifier591 =null;

        QueryParser.identifier_plus_return identifier_plus592 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:899:9: ( col_ref_without_identifier | identifier_plus )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==DOLLARVAR||LA172_0==GROUP) ) {
                alt172=1;
            }
            else if ( (LA172_0==CUBE||(LA172_0 >= ELSE && LA172_0 <= END)||LA172_0==IDENTIFIER||LA172_0==IN||LA172_0==RANK||LA172_0==THEN||LA172_0==WHEN) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }
            switch (alt172) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:899:11: col_ref_without_identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_without_identifier_in_col_ref5777);
                    col_ref_without_identifier591=col_ref_without_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref_without_identifier591.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:899:40: identifier_plus
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_col_ref5781);
                    identifier_plus592=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus592.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class col_range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:902:1: col_range : (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) );
    public final QueryParser.col_range_return col_range() throws RecognitionException {
        QueryParser.col_range_return retval = new QueryParser.col_range_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD593=null;
        Token DOUBLE_PERIOD594=null;
        QueryParser.col_ref_return c1 =null;

        QueryParser.col_ref_return c2 =null;

        QueryParser.col_ref_return col_ref595 =null;


        Object DOUBLE_PERIOD593_tree=null;
        Object DOUBLE_PERIOD594_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:902:11: (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==CUBE||LA174_0==DOLLARVAR||(LA174_0 >= ELSE && LA174_0 <= END)||LA174_0==GROUP||LA174_0==IDENTIFIER||LA174_0==IN||LA174_0==RANK||LA174_0==THEN||LA174_0==WHEN) ) {
                alt174=1;
            }
            else if ( (LA174_0==DOUBLE_PERIOD) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;

            }
            switch (alt174) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:902:13: c1= col_ref DOUBLE_PERIOD (c2= col_ref )?
                    {
                    pushFollow(FOLLOW_col_ref_in_col_range5794);
                    c1=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(c1.getTree());

                    DOUBLE_PERIOD593=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range5796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD593);


                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:902:43: (c2= col_ref )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==CUBE||LA173_0==DOLLARVAR||(LA173_0 >= ELSE && LA173_0 <= END)||LA173_0==GROUP||LA173_0==IDENTIFIER||LA173_0==IN||LA173_0==RANK||LA173_0==THEN||LA173_0==WHEN) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:902:43: c2= col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_col_range5802);
                            c2=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(c2.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: c1, c2, DOUBLE_PERIOD
                    // token labels: 
                    // rule labels: retval, c1, c2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
                    RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"rule c2",c2!=null?c2.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 902:54: -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:902:57: ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, stream_c1.nextTree());

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:902:88: ( $c2)?
                        if ( stream_c2.hasNext() ) {
                            adaptor.addChild(root_1, stream_c2.nextTree());

                        }
                        stream_c2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:903:14: DOUBLE_PERIOD col_ref
                    {
                    DOUBLE_PERIOD594=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range5833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD594);


                    pushFollow(FOLLOW_col_ref_in_col_range5835);
                    col_ref595=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref595.getTree());

                    // AST REWRITE
                    // elements: DOUBLE_PERIOD, col_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 903:36: -> ^( COL_RANGE DOUBLE_PERIOD col_ref )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:903:39: ^( COL_RANGE DOUBLE_PERIOD col_ref )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        adaptor.addChild(root_1, stream_col_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:906:1: scalar : ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | QUOTEDSTRING | NULL | TRUE | FALSE );
    public final QueryParser.scalar_return scalar() throws RecognitionException {
        QueryParser.scalar_return retval = new QueryParser.scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set596=null;

        Object set596_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:906:8: ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | QUOTEDSTRING | NULL | TRUE | FALSE )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set596=(Token)input.LT(1);

            if ( input.LA(1)==DOUBLENUMBER||input.LA(1)==FALSE||input.LA(1)==FLOATNUMBER||input.LA(1)==INTEGER||input.LA(1)==LONGINTEGER||input.LA(1)==NULL||input.LA(1)==QUOTEDSTRING||input.LA(1)==TRUE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set596)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class keyvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:916:1: keyvalue : QUOTEDSTRING POUND literal -> ^( KEY_VAL_PAIR QUOTEDSTRING literal ) ;
    public final QueryParser.keyvalue_return keyvalue() throws RecognitionException {
        QueryParser.keyvalue_return retval = new QueryParser.keyvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING597=null;
        Token POUND598=null;
        QueryParser.literal_return literal599 =null;


        Object QUOTEDSTRING597_tree=null;
        Object POUND598_tree=null;
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:916:10: ( QUOTEDSTRING POUND literal -> ^( KEY_VAL_PAIR QUOTEDSTRING literal ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:916:12: QUOTEDSTRING POUND literal
            {
            QUOTEDSTRING597=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_keyvalue5940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING597);


            POUND598=(Token)match(input,POUND,FOLLOW_POUND_in_keyvalue5942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_POUND.add(POUND598);


            pushFollow(FOLLOW_literal_in_keyvalue5944);
            literal599=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_literal.add(literal599.getTree());

            // AST REWRITE
            // elements: QUOTEDSTRING, literal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 916:39: -> ^( KEY_VAL_PAIR QUOTEDSTRING literal )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:916:42: ^( KEY_VAL_PAIR QUOTEDSTRING literal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(KEY_VAL_PAIR, "KEY_VAL_PAIR")
                , root_1);

                adaptor.addChild(root_1, 
                stream_QUOTEDSTRING.nextNode()
                );

                adaptor.addChild(root_1, stream_literal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class literal_map_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_map"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:919:1: literal_map : ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) );
    public final QueryParser.literal_map_return literal_map() throws RecognitionException {
        QueryParser.literal_map_return retval = new QueryParser.literal_map_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET600=null;
        Token COMMA602=null;
        Token RIGHT_BRACKET604=null;
        Token LEFT_BRACKET605=null;
        Token RIGHT_BRACKET606=null;
        QueryParser.keyvalue_return keyvalue601 =null;

        QueryParser.keyvalue_return keyvalue603 =null;


        Object LEFT_BRACKET600_tree=null;
        Object COMMA602_tree=null;
        Object RIGHT_BRACKET604_tree=null;
        Object LEFT_BRACKET605_tree=null;
        Object RIGHT_BRACKET606_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:919:13: ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==LEFT_BRACKET) ) {
                int LA176_1 = input.LA(2);

                if ( (LA176_1==RIGHT_BRACKET) ) {
                    alt176=2;
                }
                else if ( (LA176_1==QUOTEDSTRING) ) {
                    alt176=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:919:15: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET
                    {
                    LEFT_BRACKET600=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_literal_map5965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET600);


                    pushFollow(FOLLOW_keyvalue_in_literal_map5967);
                    keyvalue601=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue601.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:919:37: ( COMMA keyvalue )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==COMMA) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:919:39: COMMA keyvalue
                    	    {
                    	    COMMA602=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_map5971); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA602);


                    	    pushFollow(FOLLOW_keyvalue_in_literal_map5973);
                    	    keyvalue603=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue603.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);


                    RIGHT_BRACKET604=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_literal_map5978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET604);


                    // AST REWRITE
                    // elements: keyvalue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 919:71: -> ^( MAP_VAL ( keyvalue )+ )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:919:74: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:920:15: LEFT_BRACKET RIGHT_BRACKET
                    {
                    LEFT_BRACKET605=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_literal_map6005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET605);


                    RIGHT_BRACKET606=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_literal_map6007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET606);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 920:42: -> ^( MAP_VAL )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:920:45: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_map"


    public static class literal_bag_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_bag"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:924:1: literal_bag : ( LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY -> ^( BAG_VAL ( literal_tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) );
    public final QueryParser.literal_bag_return literal_bag() throws RecognitionException {
        QueryParser.literal_bag_return retval = new QueryParser.literal_bag_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY607=null;
        Token COMMA609=null;
        Token RIGHT_CURLY611=null;
        Token LEFT_CURLY612=null;
        Token RIGHT_CURLY613=null;
        QueryParser.literal_tuple_return literal_tuple608 =null;

        QueryParser.literal_tuple_return literal_tuple610 =null;


        Object LEFT_CURLY607_tree=null;
        Object COMMA609_tree=null;
        Object RIGHT_CURLY611_tree=null;
        Object LEFT_CURLY612_tree=null;
        Object RIGHT_CURLY613_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_literal_tuple=new RewriteRuleSubtreeStream(adaptor,"rule literal_tuple");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:924:13: ( LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY -> ^( BAG_VAL ( literal_tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) )
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==LEFT_CURLY) ) {
                int LA178_1 = input.LA(2);

                if ( (LA178_1==RIGHT_CURLY) ) {
                    alt178=2;
                }
                else if ( (LA178_1==LEFT_PAREN) ) {
                    alt178=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;

            }
            switch (alt178) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:924:15: LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY
                    {
                    LEFT_CURLY607=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_literal_bag6025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY607);


                    pushFollow(FOLLOW_literal_tuple_in_literal_bag6027);
                    literal_tuple608=literal_tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal_tuple.add(literal_tuple608.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:924:40: ( COMMA literal_tuple )*
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==COMMA) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:924:42: COMMA literal_tuple
                    	    {
                    	    COMMA609=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_bag6031); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA609);


                    	    pushFollow(FOLLOW_literal_tuple_in_literal_bag6033);
                    	    literal_tuple610=literal_tuple();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal_tuple.add(literal_tuple610.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop177;
                        }
                    } while (true);


                    RIGHT_CURLY611=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_literal_bag6038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY611);


                    // AST REWRITE
                    // elements: literal_tuple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 924:77: -> ^( BAG_VAL ( literal_tuple )+ )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:924:80: ^( BAG_VAL ( literal_tuple )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        if ( !(stream_literal_tuple.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal_tuple.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal_tuple.nextTree());

                        }
                        stream_literal_tuple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:925:15: LEFT_CURLY RIGHT_CURLY
                    {
                    LEFT_CURLY612=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_literal_bag6065); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY612);


                    RIGHT_CURLY613=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_literal_bag6067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY613);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 925:38: -> ^( BAG_VAL )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:925:41: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_bag"


    public static class literal_tuple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_tuple"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:928:1: literal_tuple : ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) );
    public final QueryParser.literal_tuple_return literal_tuple() throws RecognitionException {
        QueryParser.literal_tuple_return retval = new QueryParser.literal_tuple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN614=null;
        Token COMMA616=null;
        Token RIGHT_PAREN618=null;
        Token LEFT_PAREN619=null;
        Token RIGHT_PAREN620=null;
        QueryParser.literal_return literal615 =null;

        QueryParser.literal_return literal617 =null;


        Object LEFT_PAREN614_tree=null;
        Object COMMA616_tree=null;
        Object RIGHT_PAREN618_tree=null;
        Object LEFT_PAREN619_tree=null;
        Object RIGHT_PAREN620_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:928:15: ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) )
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==LEFT_PAREN) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==RIGHT_PAREN) ) {
                    alt180=2;
                }
                else if ( (LA180_1==DOUBLENUMBER||LA180_1==FALSE||LA180_1==FLOATNUMBER||LA180_1==INTEGER||(LA180_1 >= LEFT_BRACKET && LA180_1 <= LEFT_PAREN)||LA180_1==LONGINTEGER||LA180_1==NULL||LA180_1==QUOTEDSTRING||LA180_1==TRUE) ) {
                    alt180=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;

            }
            switch (alt180) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:928:17: LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN
                    {
                    LEFT_PAREN614=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_literal_tuple6084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN614);


                    pushFollow(FOLLOW_literal_in_literal_tuple6086);
                    literal615=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(literal615.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:928:36: ( COMMA literal )*
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);

                        if ( (LA179_0==COMMA) ) {
                            alt179=1;
                        }


                        switch (alt179) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:928:38: COMMA literal
                    	    {
                    	    COMMA616=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_tuple6090); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA616);


                    	    pushFollow(FOLLOW_literal_in_literal_tuple6092);
                    	    literal617=literal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal.add(literal617.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop179;
                        }
                    } while (true);


                    RIGHT_PAREN618=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_literal_tuple6097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN618);


                    // AST REWRITE
                    // elements: literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 928:67: -> ^( TUPLE_VAL ( literal )+ )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:928:70: ^( TUPLE_VAL ( literal )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        if ( !(stream_literal.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal.nextTree());

                        }
                        stream_literal.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:929:17: LEFT_PAREN RIGHT_PAREN
                    {
                    LEFT_PAREN619=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_literal_tuple6126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN619);


                    RIGHT_PAREN620=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_literal_tuple6128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN620);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 929:40: -> ^( TUPLE_VAL )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:929:43: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_tuple"


    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:932:1: literal : ( scalar | literal_map | literal_bag | literal_tuple );
    public final QueryParser.literal_return literal() throws RecognitionException {
        QueryParser.literal_return retval = new QueryParser.literal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.scalar_return scalar621 =null;

        QueryParser.literal_map_return literal_map622 =null;

        QueryParser.literal_bag_return literal_bag623 =null;

        QueryParser.literal_tuple_return literal_tuple624 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:932:9: ( scalar | literal_map | literal_bag | literal_tuple )
            int alt181=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case NULL:
            case QUOTEDSTRING:
            case TRUE:
                {
                alt181=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt181=2;
                }
                break;
            case LEFT_CURLY:
                {
                alt181=3;
                }
                break;
            case LEFT_PAREN:
                {
                alt181=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;

            }

            switch (alt181) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:932:11: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_literal6145);
                    scalar621=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar621.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:932:20: literal_map
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_map_in_literal6149);
                    literal_map622=literal_map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_map622.getTree());

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:932:34: literal_bag
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_bag_in_literal6153);
                    literal_bag623=literal_bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_bag623.getTree());

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:932:48: literal_tuple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_tuple_in_literal6157);
                    literal_tuple624=literal_tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_tuple624.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class nested_blk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:937:1: nested_blk : ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ ) ;
    public final QueryParser.nested_blk_return nested_blk() throws RecognitionException {
        QueryParser.nested_blk_return retval = new QueryParser.nested_blk_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON626=null;
        Token GENERATE627=null;
        Token COMMA629=null;
        Token SEMI_COLON631=null;
        QueryParser.nested_command_return nested_command625 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item628 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item630 =null;


        Object SEMI_COLON626_tree=null;
        Object GENERATE627_tree=null;
        Object COMMA629_tree=null;
        Object SEMI_COLON631_tree=null;
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        RewriteRuleSubtreeStream stream_nested_command=new RewriteRuleSubtreeStream(adaptor,"rule nested_command");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:937:12: ( ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:937:14: ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON
            {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:937:14: ( nested_command SEMI_COLON )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==CUBE||(LA182_0 >= ELSE && LA182_0 <= END)||LA182_0==IDENTIFIER||LA182_0==IN||LA182_0==RANK||LA182_0==THEN||LA182_0==WHEN) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:937:16: nested_command SEMI_COLON
            	    {
            	    pushFollow(FOLLOW_nested_command_in_nested_blk6170);
            	    nested_command625=nested_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_command.add(nested_command625.getTree());

            	    SEMI_COLON626=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk6172); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON626);


            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            GENERATE627=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_nested_blk6177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE627);


            pushFollow(FOLLOW_flatten_generated_item_in_nested_blk6179);
            flatten_generated_item628=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item628.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:937:77: ( COMMA flatten_generated_item )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==COMMA) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:937:79: COMMA flatten_generated_item
            	    {
            	    COMMA629=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_blk6183); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA629);


            	    pushFollow(FOLLOW_flatten_generated_item_in_nested_blk6185);
            	    flatten_generated_item630=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item630.getTree());

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);


            SEMI_COLON631=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk6190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON631);


            // AST REWRITE
            // elements: flatten_generated_item, GENERATE, nested_command
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 938:5: -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:938:8: ( nested_command )*
                while ( stream_nested_command.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_command.nextTree());

                }
                stream_nested_command.reset();

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:938:24: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_1);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_1, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class nested_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:941:1: nested_command : ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) );
    public final QueryParser.nested_command_return nested_command() throws RecognitionException {
        QueryParser.nested_command_return retval = new QueryParser.nested_command_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL633=null;
        Token EQUAL636=null;
        Token EQUAL639=null;
        QueryParser.identifier_plus_return identifier_plus632 =null;

        QueryParser.nested_proj_return nested_proj634 =null;

        QueryParser.identifier_plus_return identifier_plus635 =null;

        QueryParser.expr_return expr637 =null;

        QueryParser.identifier_plus_return identifier_plus638 =null;

        QueryParser.nested_op_return nested_op640 =null;


        Object EQUAL633_tree=null;
        Object EQUAL636_tree=null;
        Object EQUAL639_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_nested_proj=new RewriteRuleSubtreeStream(adaptor,"rule nested_proj");
        RewriteRuleSubtreeStream stream_nested_op=new RewriteRuleSubtreeStream(adaptor,"rule nested_op");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:941:16: ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) )
            int alt184=3;
            alt184 = dfa184.predict(input);
            switch (alt184) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:941:18: ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:941:108: ( identifier_plus EQUAL nested_proj )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:941:110: identifier_plus EQUAL nested_proj
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command6237);
                    identifier_plus632=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus632.getTree());

                    EQUAL633=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL633);


                    pushFollow(FOLLOW_nested_proj_in_nested_command6241);
                    nested_proj634=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_proj.add(nested_proj634.getTree());

                    }


                    // AST REWRITE
                    // elements: nested_proj, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 942:15: -> ^( NESTED_CMD identifier_plus nested_proj )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:942:18: ^( NESTED_CMD identifier_plus nested_proj )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_nested_proj.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:943:18: identifier_plus EQUAL expr
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command6288);
                    identifier_plus635=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus635.getTree());

                    EQUAL636=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6290); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL636);


                    pushFollow(FOLLOW_expr_in_nested_command6292);
                    expr637=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr637.getTree());

                    // AST REWRITE
                    // elements: identifier_plus, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 944:15: -> ^( NESTED_CMD_ASSI identifier_plus expr )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:944:18: ^( NESTED_CMD_ASSI identifier_plus expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD_ASSI, "NESTED_CMD_ASSI")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:945:18: identifier_plus EQUAL nested_op
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command6337);
                    identifier_plus638=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus638.getTree());

                    EQUAL639=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL639);


                    pushFollow(FOLLOW_nested_op_in_nested_command6341);
                    nested_op640=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_op.add(nested_op640.getTree());

                    // AST REWRITE
                    // elements: identifier_plus, nested_op
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 946:15: -> ^( NESTED_CMD identifier_plus nested_op )
                    {
                        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:946:18: ^( NESTED_CMD identifier_plus nested_op )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_nested_op.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:949:1: nested_op : ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final QueryParser.nested_op_return nested_op() throws RecognitionException {
        QueryParser.nested_op_return retval = new QueryParser.nested_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_filter_return nested_filter641 =null;

        QueryParser.nested_sort_return nested_sort642 =null;

        QueryParser.nested_distinct_return nested_distinct643 =null;

        QueryParser.nested_limit_return nested_limit644 =null;

        QueryParser.nested_cross_return nested_cross645 =null;

        QueryParser.nested_foreach_return nested_foreach646 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:949:11: ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt185=6;
            switch ( input.LA(1) ) {
            case FILTER:
                {
                alt185=1;
                }
                break;
            case ORDER:
                {
                alt185=2;
                }
                break;
            case DISTINCT:
                {
                alt185=3;
                }
                break;
            case LIMIT:
                {
                alt185=4;
                }
                break;
            case CROSS:
                {
                alt185=5;
                }
                break;
            case FOREACH:
                {
                alt185=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }

            switch (alt185) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:949:13: nested_filter
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_filter_in_nested_op6376);
                    nested_filter641=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_filter641.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:950:13: nested_sort
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_sort_in_nested_op6390);
                    nested_sort642=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_sort642.getTree());

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:951:13: nested_distinct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_distinct_in_nested_op6404);
                    nested_distinct643=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_distinct643.getTree());

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:952:13: nested_limit
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_limit_in_nested_op6418);
                    nested_limit644=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_limit644.getTree());

                    }
                    break;
                case 5 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:953:13: nested_cross
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_cross_in_nested_op6432);
                    nested_cross645=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_cross645.getTree());

                    }
                    break;
                case 6 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:954:13: nested_foreach
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_foreach_in_nested_op6446);
                    nested_foreach646=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_foreach646.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:957:1: nested_proj : col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) ;
    public final QueryParser.nested_proj_return nested_proj() throws RecognitionException {
        QueryParser.nested_proj_return retval = new QueryParser.nested_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD648=null;
        QueryParser.col_ref_return col_ref647 =null;

        QueryParser.col_ref_list_return col_ref_list649 =null;


        Object PERIOD648_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_ref_list=new RewriteRuleSubtreeStream(adaptor,"rule col_ref_list");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:957:13: ( col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:957:15: col_ref PERIOD col_ref_list
            {
            pushFollow(FOLLOW_col_ref_in_nested_proj6455);
            col_ref647=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref.add(col_ref647.getTree());

            PERIOD648=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_nested_proj6457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD648);


            pushFollow(FOLLOW_col_ref_list_in_nested_proj6459);
            col_ref_list649=col_ref_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref_list.add(col_ref_list649.getTree());

            // AST REWRITE
            // elements: col_ref, col_ref_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 958:12: -> ^( NESTED_PROJ col_ref col_ref_list )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:958:15: ^( NESTED_PROJ col_ref col_ref_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NESTED_PROJ, "NESTED_PROJ")
                , root_1);

                adaptor.addChild(root_1, stream_col_ref.nextTree());

                adaptor.addChild(root_1, stream_col_ref_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class col_ref_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:1: col_ref_list : ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ ;
    public final QueryParser.col_ref_list_return col_ref_list() throws RecognitionException {
        QueryParser.col_ref_list_return retval = new QueryParser.col_ref_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN651=null;
        Token COMMA653=null;
        Token RIGHT_PAREN655=null;
        QueryParser.col_ref_return col_ref650 =null;

        QueryParser.col_ref_return col_ref652 =null;

        QueryParser.col_ref_return col_ref654 =null;


        Object LEFT_PAREN651_tree=null;
        Object COMMA653_tree=null;
        Object RIGHT_PAREN655_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:14: ( ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==CUBE||LA187_0==DOLLARVAR||(LA187_0 >= ELSE && LA187_0 <= END)||LA187_0==GROUP||LA187_0==IDENTIFIER||LA187_0==IN||LA187_0==RANK||LA187_0==THEN||LA187_0==WHEN) ) {
                alt187=1;
            }
            else if ( (LA187_0==LEFT_PAREN) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;

            }
            switch (alt187) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:18: col_ref
                    {
                    pushFollow(FOLLOW_col_ref_in_col_ref_list6493);
                    col_ref650=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref650.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:30: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                    {
                    LEFT_PAREN651=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_col_ref_list6499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN651);


                    pushFollow(FOLLOW_col_ref_in_col_ref_list6501);
                    col_ref652=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref652.getTree());

                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:49: ( COMMA col_ref )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==COMMA) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:961:51: COMMA col_ref
                    	    {
                    	    COMMA653=(Token)match(input,COMMA,FOLLOW_COMMA_in_col_ref_list6505); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA653);


                    	    pushFollow(FOLLOW_col_ref_in_col_ref_list6507);
                    	    col_ref654=col_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref654.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);


                    RIGHT_PAREN655=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_col_ref_list6512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN655);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: col_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 962:13: -> ( col_ref )+
            {
                if ( !(stream_col_ref.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_ref.hasNext() ) {
                    adaptor.addChild(root_0, stream_col_ref.nextTree());

                }
                stream_col_ref.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_list"


    public static class nested_filter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:965:1: nested_filter : FILTER ^ nested_op_input BY ! cond ;
    public final QueryParser.nested_filter_return nested_filter() throws RecognitionException {
        QueryParser.nested_filter_return retval = new QueryParser.nested_filter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER656=null;
        Token BY658=null;
        QueryParser.nested_op_input_return nested_op_input657 =null;

        QueryParser.cond_return cond659 =null;


        Object FILTER656_tree=null;
        Object BY658_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:965:15: ( FILTER ^ nested_op_input BY ! cond )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:965:17: FILTER ^ nested_op_input BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER656=(Token)match(input,FILTER,FOLLOW_FILTER_in_nested_filter6542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER656_tree = 
            (Object)adaptor.create(FILTER656)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER656_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_filter6545);
            nested_op_input657=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input657.getTree());

            BY658=(Token)match(input,BY,FOLLOW_BY_in_nested_filter6547); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_nested_filter6550);
            cond659=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond659.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:968:1: nested_sort : ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.nested_sort_return nested_sort() throws RecognitionException {
        QueryParser.nested_sort_return retval = new QueryParser.nested_sort_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER660=null;
        Token BY662=null;
        Token USING664=null;
        QueryParser.nested_op_input_return nested_op_input661 =null;

        QueryParser.order_by_clause_return order_by_clause663 =null;

        QueryParser.func_clause_return func_clause665 =null;


        Object ORDER660_tree=null;
        Object BY662_tree=null;
        Object USING664_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:968:13: ( ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:968:15: ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER660=(Token)match(input,ORDER,FOLLOW_ORDER_in_nested_sort6559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER660_tree = 
            (Object)adaptor.create(ORDER660)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER660_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_sort6562);
            nested_op_input661=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input661.getTree());

            BY662=(Token)match(input,BY,FOLLOW_BY_in_nested_sort6564); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_nested_sort6568);
            order_by_clause663=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause663.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:968:59: ( USING ! func_clause )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==USING) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:968:61: USING ! func_clause
                    {
                    USING664=(Token)match(input,USING,FOLLOW_USING_in_nested_sort6572); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_nested_sort6575);
                    func_clause665=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause665.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:971:1: nested_distinct : DISTINCT ^ nested_op_input ;
    public final QueryParser.nested_distinct_return nested_distinct() throws RecognitionException {
        QueryParser.nested_distinct_return retval = new QueryParser.nested_distinct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT666=null;
        QueryParser.nested_op_input_return nested_op_input667 =null;


        Object DISTINCT666_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:971:17: ( DISTINCT ^ nested_op_input )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:971:19: DISTINCT ^ nested_op_input
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT666=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct6587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT666_tree = 
            (Object)adaptor.create(DISTINCT666)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT666_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_distinct6590);
            nested_op_input667=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input667.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:974:1: nested_limit : LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) ;
    public final QueryParser.nested_limit_return nested_limit() throws RecognitionException {
        QueryParser.nested_limit_return retval = new QueryParser.nested_limit_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT668=null;
        Token INTEGER670=null;
        QueryParser.nested_op_input_return nested_op_input669 =null;

        QueryParser.expr_return expr671 =null;


        Object LIMIT668_tree=null;
        Object INTEGER670_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:974:14: ( LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:974:16: LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT668=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit6599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT668_tree = 
            (Object)adaptor.create(LIMIT668)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT668_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_limit6602);
            nested_op_input669=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input669.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:974:39: ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==INTEGER) ) {
                int LA189_1 = input.LA(2);

                if ( (synpred4_QueryParser()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA189_0==ALL||LA189_0==AND||(LA189_0 >= AS && LA189_0 <= ASSERT)||LA189_0==BIGDECIMAL||LA189_0==BIGINTEGER||(LA189_0 >= BY && LA189_0 <= CHARARRAY)||LA189_0==COGROUP||(LA189_0 >= CROSS && LA189_0 <= DATETIME)||LA189_0==DEFINE||LA189_0==DESC||LA189_0==DISTINCT||LA189_0==DOLLARVAR||LA189_0==DOUBLENUMBER||(LA189_0 >= ELSE && LA189_0 <= END)||LA189_0==FALSE||LA189_0==FILTER||(LA189_0 >= FLOATNUMBER && LA189_0 <= GROUP)||(LA189_0 >= IDENTIFIER && LA189_0 <= INPUT)||(LA189_0 >= INTO && LA189_0 <= LEFT_PAREN)||(LA189_0 >= LIMIT && LA189_0 <= LOAD)||LA189_0==LONGINTEGER||(LA189_0 >= MAPREDUCE && LA189_0 <= MINUS)||LA189_0==NULL||(LA189_0 >= OR && LA189_0 <= ORDER)||(LA189_0 >= OUTER && LA189_0 <= PARTITION)||(LA189_0 >= QUOTEDSTRING && LA189_0 <= RANK)||(LA189_0 >= REGISTER && LA189_0 <= RIGHT)||(LA189_0 >= ROLLUP && LA189_0 <= SAMPLE)||LA189_0==SHIP||LA189_0==SPLIT||(LA189_0 >= STDERROR && LA189_0 <= TRUE)||(LA189_0 >= UNION && LA189_0 <= USING)||LA189_0==WHEN||(LA189_0 >= BOOL && LA189_0 <= BOOL_COND)||LA189_0==REALIAS) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;

            }
            switch (alt189) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:974:41: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER670=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit6614); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER670_tree = 
                    (Object)adaptor.create(INTEGER670)
                    ;
                    adaptor.addChild(root_0, INTEGER670_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:974:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_nested_limit6618);
                    expr671=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr671.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:977:1: nested_cross : CROSS ^ nested_op_input_list ;
    public final QueryParser.nested_cross_return nested_cross() throws RecognitionException {
        QueryParser.nested_cross_return retval = new QueryParser.nested_cross_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS672=null;
        QueryParser.nested_op_input_list_return nested_op_input_list673 =null;


        Object CROSS672_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:977:14: ( CROSS ^ nested_op_input_list )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:977:16: CROSS ^ nested_op_input_list
            {
            root_0 = (Object)adaptor.nil();


            CROSS672=(Token)match(input,CROSS,FOLLOW_CROSS_in_nested_cross6629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS672_tree = 
            (Object)adaptor.create(CROSS672)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS672_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross6632);
            nested_op_input_list673=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input_list673.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:980:1: nested_foreach : FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) ) ;
    public final QueryParser.nested_foreach_return nested_foreach() throws RecognitionException {
        QueryParser.nested_foreach_return retval = new QueryParser.nested_foreach_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH674=null;
        Token GENERATE676=null;
        Token COMMA678=null;
        QueryParser.nested_op_input_return nested_op_input675 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item677 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item679 =null;


        Object FOREACH674_tree=null;
        Object GENERATE676_tree=null;
        Object COMMA678_tree=null;
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:980:15: ( FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) ) )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:980:17: FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            FOREACH674=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach6640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH674);


            pushFollow(FOLLOW_nested_op_input_in_nested_foreach6642);
            nested_op_input675=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input675.getTree());

            GENERATE676=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_nested_foreach6644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE676);


            pushFollow(FOLLOW_flatten_generated_item_in_nested_foreach6646);
            flatten_generated_item677=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item677.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:980:73: ( COMMA flatten_generated_item )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:980:75: COMMA flatten_generated_item
            	    {
            	    COMMA678=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_foreach6650); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA678);


            	    pushFollow(FOLLOW_flatten_generated_item_in_nested_foreach6652);
            	    flatten_generated_item679=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item679.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            // AST REWRITE
            // elements: GENERATE, FOREACH, flatten_generated_item, nested_op_input
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 981:5: -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) )
            {
                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:981:8: ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_FOREACH.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_nested_op_input.nextTree());

                // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:981:35: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_2);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_2, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:984:1: nested_op_input : ( col_ref | nested_proj );
    public final QueryParser.nested_op_input_return nested_op_input() throws RecognitionException {
        QueryParser.nested_op_input_return retval = new QueryParser.nested_op_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_return col_ref680 =null;

        QueryParser.nested_proj_return nested_proj681 =null;



        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:984:17: ( col_ref | nested_proj )
            int alt191=2;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA191_1 = input.LA(2);

                if ( (LA191_1==ALL||LA191_1==AND||(LA191_1 >= AS && LA191_1 <= ASSERT)||LA191_1==BIGDECIMAL||LA191_1==BIGINTEGER||(LA191_1 >= BY && LA191_1 <= CHARARRAY)||LA191_1==COGROUP||(LA191_1 >= COMMA && LA191_1 <= DATETIME)||LA191_1==DEFINE||LA191_1==DESC||LA191_1==DISTINCT||LA191_1==DOLLARVAR||LA191_1==DOUBLENUMBER||(LA191_1 >= ELSE && LA191_1 <= END)||LA191_1==FALSE||LA191_1==FILTER||(LA191_1 >= FLOATNUMBER && LA191_1 <= GROUP)||(LA191_1 >= IDENTIFIER && LA191_1 <= INPUT)||(LA191_1 >= INTEGER && LA191_1 <= LEFT_PAREN)||(LA191_1 >= LIMIT && LA191_1 <= LOAD)||LA191_1==LONGINTEGER||(LA191_1 >= MAPREDUCE && LA191_1 <= MINUS)||LA191_1==NULL||(LA191_1 >= OR && LA191_1 <= ORDER)||(LA191_1 >= OUTER && LA191_1 <= PARTITION)||(LA191_1 >= QUOTEDSTRING && LA191_1 <= RANK)||(LA191_1 >= REGISTER && LA191_1 <= RIGHT)||(LA191_1 >= ROLLUP && LA191_1 <= SHIP)||LA191_1==SPLIT||(LA191_1 >= STDERROR && LA191_1 <= TRUE)||(LA191_1 >= UNION && LA191_1 <= USING)||LA191_1==WHEN||(LA191_1 >= BOOL && LA191_1 <= BOOL_COND)||LA191_1==REALIAS) ) {
                    alt191=1;
                }
                else if ( (LA191_1==PERIOD) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA191_2 = input.LA(2);

                if ( (LA191_2==ALL||LA191_2==AND||(LA191_2 >= AS && LA191_2 <= ASSERT)||LA191_2==BIGDECIMAL||LA191_2==BIGINTEGER||(LA191_2 >= BY && LA191_2 <= CHARARRAY)||LA191_2==COGROUP||(LA191_2 >= COMMA && LA191_2 <= DATETIME)||LA191_2==DEFINE||LA191_2==DESC||LA191_2==DISTINCT||LA191_2==DOLLARVAR||LA191_2==DOUBLENUMBER||(LA191_2 >= ELSE && LA191_2 <= END)||LA191_2==FALSE||LA191_2==FILTER||(LA191_2 >= FLOATNUMBER && LA191_2 <= GROUP)||(LA191_2 >= IDENTIFIER && LA191_2 <= INPUT)||(LA191_2 >= INTEGER && LA191_2 <= LEFT_PAREN)||(LA191_2 >= LIMIT && LA191_2 <= LOAD)||LA191_2==LONGINTEGER||(LA191_2 >= MAPREDUCE && LA191_2 <= MINUS)||LA191_2==NULL||(LA191_2 >= OR && LA191_2 <= ORDER)||(LA191_2 >= OUTER && LA191_2 <= PARTITION)||(LA191_2 >= QUOTEDSTRING && LA191_2 <= RANK)||(LA191_2 >= REGISTER && LA191_2 <= RIGHT)||(LA191_2 >= ROLLUP && LA191_2 <= SHIP)||LA191_2==SPLIT||(LA191_2 >= STDERROR && LA191_2 <= TRUE)||(LA191_2 >= UNION && LA191_2 <= USING)||LA191_2==WHEN||(LA191_2 >= BOOL && LA191_2 <= BOOL_COND)||LA191_2==REALIAS) ) {
                    alt191=1;
                }
                else if ( (LA191_2==PERIOD) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA191_3 = input.LA(2);

                if ( (LA191_3==ALL||LA191_3==AND||(LA191_3 >= AS && LA191_3 <= ASSERT)||LA191_3==BIGDECIMAL||LA191_3==BIGINTEGER||(LA191_3 >= BY && LA191_3 <= CHARARRAY)||LA191_3==COGROUP||(LA191_3 >= COMMA && LA191_3 <= DATETIME)||LA191_3==DEFINE||LA191_3==DESC||LA191_3==DISTINCT||LA191_3==DOLLARVAR||LA191_3==DOUBLENUMBER||(LA191_3 >= ELSE && LA191_3 <= END)||LA191_3==FALSE||LA191_3==FILTER||(LA191_3 >= FLOATNUMBER && LA191_3 <= GROUP)||(LA191_3 >= IDENTIFIER && LA191_3 <= INPUT)||(LA191_3 >= INTEGER && LA191_3 <= LEFT_PAREN)||(LA191_3 >= LIMIT && LA191_3 <= LOAD)||LA191_3==LONGINTEGER||(LA191_3 >= MAPREDUCE && LA191_3 <= MINUS)||LA191_3==NULL||(LA191_3 >= OR && LA191_3 <= ORDER)||(LA191_3 >= OUTER && LA191_3 <= PARTITION)||(LA191_3 >= QUOTEDSTRING && LA191_3 <= RANK)||(LA191_3 >= REGISTER && LA191_3 <= RIGHT)||(LA191_3 >= ROLLUP && LA191_3 <= SHIP)||LA191_3==SPLIT||(LA191_3 >= STDERROR && LA191_3 <= TRUE)||(LA191_3 >= UNION && LA191_3 <= USING)||LA191_3==WHEN||(LA191_3 >= BOOL && LA191_3 <= BOOL_COND)||LA191_3==REALIAS) ) {
                    alt191=1;
                }
                else if ( (LA191_3==PERIOD) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;

            }

            switch (alt191) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:984:19: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_nested_op_input6687);
                    col_ref680=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref680.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:984:29: nested_proj
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_proj_in_nested_op_input6691);
                    nested_proj681=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_proj681.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:987:1: nested_op_input_list : nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ ;
    public final QueryParser.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        QueryParser.nested_op_input_list_return retval = new QueryParser.nested_op_input_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA683=null;
        QueryParser.nested_op_input_return nested_op_input682 =null;

        QueryParser.nested_op_input_return nested_op_input684 =null;


        Object COMMA683_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:987:22: ( nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:987:24: nested_op_input ( COMMA nested_op_input )*
            {
            pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list6700);
            nested_op_input682=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input682.getTree());

            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:987:40: ( COMMA nested_op_input )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==COMMA) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:987:42: COMMA nested_op_input
            	    {
            	    COMMA683=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_op_input_list6704); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA683);


            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list6706);
            	    nested_op_input684=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input684.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            // AST REWRITE
            // elements: nested_op_input
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 988:9: -> ( nested_op_input )+
            {
                if ( !(stream_nested_op_input.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nested_op_input.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_op_input.nextTree());

                }
                stream_nested_op_input.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class eid_without_columns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid_without_columns"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:994:1: eid_without_columns : ( rel_str_op | IMPORT | REGISTER | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | AND | OR | GENERATE | ASC | DESC | BOOL | BIGINTEGER | BIGDECIMAL | DATETIME | CHARARRAY | BYTEARRAY | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | REALIAS | BOOL_COND | ASSERT );
    public final QueryParser.eid_without_columns_return eid_without_columns() throws RecognitionException {
        QueryParser.eid_without_columns_return retval = new QueryParser.eid_without_columns_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT686=null;
        Token REGISTER687=null;
        Token RETURNS688=null;
        Token DEFINE689=null;
        Token LOAD690=null;
        Token FILTER691=null;
        Token FOREACH692=null;
        Token ROLLUP693=null;
        Token ORDER694=null;
        Token DISTINCT695=null;
        Token COGROUP696=null;
        Token JOIN697=null;
        Token CROSS698=null;
        Token UNION699=null;
        Token SPLIT700=null;
        Token INTO701=null;
        Token IF702=null;
        Token ALL703=null;
        Token AS704=null;
        Token BY705=null;
        Token USING706=null;
        Token INNER707=null;
        Token OUTER708=null;
        Token PARALLEL709=null;
        Token PARTITION710=null;
        Token AND711=null;
        Token OR712=null;
        Token GENERATE713=null;
        Token ASC714=null;
        Token DESC715=null;
        Token BOOL716=null;
        Token BIGINTEGER717=null;
        Token BIGDECIMAL718=null;
        Token DATETIME719=null;
        Token CHARARRAY720=null;
        Token BYTEARRAY721=null;
        Token IS722=null;
        Token STREAM723=null;
        Token THROUGH724=null;
        Token STORE725=null;
        Token MAPREDUCE726=null;
        Token SHIP727=null;
        Token CACHE728=null;
        Token INPUT729=null;
        Token OUTPUT730=null;
        Token STDERROR731=null;
        Token STDIN732=null;
        Token STDOUT733=null;
        Token LIMIT734=null;
        Token SAMPLE735=null;
        Token LEFT736=null;
        Token RIGHT737=null;
        Token FULL738=null;
        Token REALIAS739=null;
        Token BOOL_COND740=null;
        Token ASSERT741=null;
        QueryParser.rel_str_op_return rel_str_op685 =null;


        Object IMPORT686_tree=null;
        Object REGISTER687_tree=null;
        Object RETURNS688_tree=null;
        Object DEFINE689_tree=null;
        Object LOAD690_tree=null;
        Object FILTER691_tree=null;
        Object FOREACH692_tree=null;
        Object ROLLUP693_tree=null;
        Object ORDER694_tree=null;
        Object DISTINCT695_tree=null;
        Object COGROUP696_tree=null;
        Object JOIN697_tree=null;
        Object CROSS698_tree=null;
        Object UNION699_tree=null;
        Object SPLIT700_tree=null;
        Object INTO701_tree=null;
        Object IF702_tree=null;
        Object ALL703_tree=null;
        Object AS704_tree=null;
        Object BY705_tree=null;
        Object USING706_tree=null;
        Object INNER707_tree=null;
        Object OUTER708_tree=null;
        Object PARALLEL709_tree=null;
        Object PARTITION710_tree=null;
        Object AND711_tree=null;
        Object OR712_tree=null;
        Object GENERATE713_tree=null;
        Object ASC714_tree=null;
        Object DESC715_tree=null;
        Object BOOL716_tree=null;
        Object BIGINTEGER717_tree=null;
        Object BIGDECIMAL718_tree=null;
        Object DATETIME719_tree=null;
        Object CHARARRAY720_tree=null;
        Object BYTEARRAY721_tree=null;
        Object IS722_tree=null;
        Object STREAM723_tree=null;
        Object THROUGH724_tree=null;
        Object STORE725_tree=null;
        Object MAPREDUCE726_tree=null;
        Object SHIP727_tree=null;
        Object CACHE728_tree=null;
        Object INPUT729_tree=null;
        Object OUTPUT730_tree=null;
        Object STDERROR731_tree=null;
        Object STDIN732_tree=null;
        Object STDOUT733_tree=null;
        Object LIMIT734_tree=null;
        Object SAMPLE735_tree=null;
        Object LEFT736_tree=null;
        Object RIGHT737_tree=null;
        Object FULL738_tree=null;
        Object REALIAS739_tree=null;
        Object BOOL_COND740_tree=null;
        Object ASSERT741_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:994:21: ( rel_str_op | IMPORT | REGISTER | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | AND | OR | GENERATE | ASC | DESC | BOOL | BIGINTEGER | BIGDECIMAL | DATETIME | CHARARRAY | BYTEARRAY | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | REALIAS | BOOL_COND | ASSERT )
            int alt193=57;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt193=1;
                }
                break;
            case IMPORT:
                {
                alt193=2;
                }
                break;
            case REGISTER:
                {
                alt193=3;
                }
                break;
            case RETURNS:
                {
                alt193=4;
                }
                break;
            case DEFINE:
                {
                alt193=5;
                }
                break;
            case LOAD:
                {
                alt193=6;
                }
                break;
            case FILTER:
                {
                alt193=7;
                }
                break;
            case FOREACH:
                {
                alt193=8;
                }
                break;
            case ROLLUP:
                {
                alt193=9;
                }
                break;
            case ORDER:
                {
                alt193=10;
                }
                break;
            case DISTINCT:
                {
                alt193=11;
                }
                break;
            case COGROUP:
                {
                alt193=12;
                }
                break;
            case JOIN:
                {
                alt193=13;
                }
                break;
            case CROSS:
                {
                alt193=14;
                }
                break;
            case UNION:
                {
                alt193=15;
                }
                break;
            case SPLIT:
                {
                alt193=16;
                }
                break;
            case INTO:
                {
                alt193=17;
                }
                break;
            case IF:
                {
                alt193=18;
                }
                break;
            case ALL:
                {
                alt193=19;
                }
                break;
            case AS:
                {
                alt193=20;
                }
                break;
            case BY:
                {
                alt193=21;
                }
                break;
            case USING:
                {
                alt193=22;
                }
                break;
            case INNER:
                {
                alt193=23;
                }
                break;
            case OUTER:
                {
                alt193=24;
                }
                break;
            case PARALLEL:
                {
                alt193=25;
                }
                break;
            case PARTITION:
                {
                alt193=26;
                }
                break;
            case AND:
                {
                alt193=27;
                }
                break;
            case OR:
                {
                alt193=28;
                }
                break;
            case GENERATE:
                {
                alt193=29;
                }
                break;
            case ASC:
                {
                alt193=30;
                }
                break;
            case DESC:
                {
                alt193=31;
                }
                break;
            case BOOL:
                {
                alt193=32;
                }
                break;
            case BIGINTEGER:
                {
                alt193=33;
                }
                break;
            case BIGDECIMAL:
                {
                alt193=34;
                }
                break;
            case DATETIME:
                {
                alt193=35;
                }
                break;
            case CHARARRAY:
                {
                alt193=36;
                }
                break;
            case BYTEARRAY:
                {
                alt193=37;
                }
                break;
            case IS:
                {
                alt193=38;
                }
                break;
            case STREAM:
                {
                alt193=39;
                }
                break;
            case THROUGH:
                {
                alt193=40;
                }
                break;
            case STORE:
                {
                alt193=41;
                }
                break;
            case MAPREDUCE:
                {
                alt193=42;
                }
                break;
            case SHIP:
                {
                alt193=43;
                }
                break;
            case CACHE:
                {
                alt193=44;
                }
                break;
            case INPUT:
                {
                alt193=45;
                }
                break;
            case OUTPUT:
                {
                alt193=46;
                }
                break;
            case STDERROR:
                {
                alt193=47;
                }
                break;
            case STDIN:
                {
                alt193=48;
                }
                break;
            case STDOUT:
                {
                alt193=49;
                }
                break;
            case LIMIT:
                {
                alt193=50;
                }
                break;
            case SAMPLE:
                {
                alt193=51;
                }
                break;
            case LEFT:
                {
                alt193=52;
                }
                break;
            case RIGHT:
                {
                alt193=53;
                }
                break;
            case FULL:
                {
                alt193=54;
                }
                break;
            case REALIAS:
                {
                alt193=55;
                }
                break;
            case BOOL_COND:
                {
                alt193=56;
                }
                break;
            case ASSERT:
                {
                alt193=57;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;

            }

            switch (alt193) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:994:23: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_eid_without_columns6734);
                    rel_str_op685=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op685.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:995:7: IMPORT
                    {
                    root_0 = (Object)adaptor.nil();


                    IMPORT686=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_eid_without_columns6742); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT686_tree = 
                    (Object)adaptor.create(IMPORT686)
                    ;
                    adaptor.addChild(root_0, IMPORT686_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:996:7: REGISTER
                    {
                    root_0 = (Object)adaptor.nil();


                    REGISTER687=(Token)match(input,REGISTER,FOLLOW_REGISTER_in_eid_without_columns6750); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REGISTER687_tree = 
                    (Object)adaptor.create(REGISTER687)
                    ;
                    adaptor.addChild(root_0, REGISTER687_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:997:7: RETURNS
                    {
                    root_0 = (Object)adaptor.nil();


                    RETURNS688=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_eid_without_columns6758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS688_tree = 
                    (Object)adaptor.create(RETURNS688)
                    ;
                    adaptor.addChild(root_0, RETURNS688_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:998:7: DEFINE
                    {
                    root_0 = (Object)adaptor.nil();


                    DEFINE689=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_eid_without_columns6766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE689_tree = 
                    (Object)adaptor.create(DEFINE689)
                    ;
                    adaptor.addChild(root_0, DEFINE689_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:999:7: LOAD
                    {
                    root_0 = (Object)adaptor.nil();


                    LOAD690=(Token)match(input,LOAD,FOLLOW_LOAD_in_eid_without_columns6774); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD690_tree = 
                    (Object)adaptor.create(LOAD690)
                    ;
                    adaptor.addChild(root_0, LOAD690_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1000:7: FILTER
                    {
                    root_0 = (Object)adaptor.nil();


                    FILTER691=(Token)match(input,FILTER,FOLLOW_FILTER_in_eid_without_columns6782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER691_tree = 
                    (Object)adaptor.create(FILTER691)
                    ;
                    adaptor.addChild(root_0, FILTER691_tree);
                    }

                    }
                    break;
                case 8 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1001:7: FOREACH
                    {
                    root_0 = (Object)adaptor.nil();


                    FOREACH692=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_eid_without_columns6790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH692_tree = 
                    (Object)adaptor.create(FOREACH692)
                    ;
                    adaptor.addChild(root_0, FOREACH692_tree);
                    }

                    }
                    break;
                case 9 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1002:7: ROLLUP
                    {
                    root_0 = (Object)adaptor.nil();


                    ROLLUP693=(Token)match(input,ROLLUP,FOLLOW_ROLLUP_in_eid_without_columns6798); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROLLUP693_tree = 
                    (Object)adaptor.create(ROLLUP693)
                    ;
                    adaptor.addChild(root_0, ROLLUP693_tree);
                    }

                    }
                    break;
                case 10 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1003:7: ORDER
                    {
                    root_0 = (Object)adaptor.nil();


                    ORDER694=(Token)match(input,ORDER,FOLLOW_ORDER_in_eid_without_columns6806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER694_tree = 
                    (Object)adaptor.create(ORDER694)
                    ;
                    adaptor.addChild(root_0, ORDER694_tree);
                    }

                    }
                    break;
                case 11 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1004:7: DISTINCT
                    {
                    root_0 = (Object)adaptor.nil();


                    DISTINCT695=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid_without_columns6814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT695_tree = 
                    (Object)adaptor.create(DISTINCT695)
                    ;
                    adaptor.addChild(root_0, DISTINCT695_tree);
                    }

                    }
                    break;
                case 12 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1005:7: COGROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    COGROUP696=(Token)match(input,COGROUP,FOLLOW_COGROUP_in_eid_without_columns6822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP696_tree = 
                    (Object)adaptor.create(COGROUP696)
                    ;
                    adaptor.addChild(root_0, COGROUP696_tree);
                    }

                    }
                    break;
                case 13 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1006:7: JOIN
                    {
                    root_0 = (Object)adaptor.nil();


                    JOIN697=(Token)match(input,JOIN,FOLLOW_JOIN_in_eid_without_columns6830); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN697_tree = 
                    (Object)adaptor.create(JOIN697)
                    ;
                    adaptor.addChild(root_0, JOIN697_tree);
                    }

                    }
                    break;
                case 14 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1007:7: CROSS
                    {
                    root_0 = (Object)adaptor.nil();


                    CROSS698=(Token)match(input,CROSS,FOLLOW_CROSS_in_eid_without_columns6838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS698_tree = 
                    (Object)adaptor.create(CROSS698)
                    ;
                    adaptor.addChild(root_0, CROSS698_tree);
                    }

                    }
                    break;
                case 15 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1008:7: UNION
                    {
                    root_0 = (Object)adaptor.nil();


                    UNION699=(Token)match(input,UNION,FOLLOW_UNION_in_eid_without_columns6846); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION699_tree = 
                    (Object)adaptor.create(UNION699)
                    ;
                    adaptor.addChild(root_0, UNION699_tree);
                    }

                    }
                    break;
                case 16 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1009:7: SPLIT
                    {
                    root_0 = (Object)adaptor.nil();


                    SPLIT700=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_eid_without_columns6854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT700_tree = 
                    (Object)adaptor.create(SPLIT700)
                    ;
                    adaptor.addChild(root_0, SPLIT700_tree);
                    }

                    }
                    break;
                case 17 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1010:7: INTO
                    {
                    root_0 = (Object)adaptor.nil();


                    INTO701=(Token)match(input,INTO,FOLLOW_INTO_in_eid_without_columns6862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO701_tree = 
                    (Object)adaptor.create(INTO701)
                    ;
                    adaptor.addChild(root_0, INTO701_tree);
                    }

                    }
                    break;
                case 18 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1011:7: IF
                    {
                    root_0 = (Object)adaptor.nil();


                    IF702=(Token)match(input,IF,FOLLOW_IF_in_eid_without_columns6870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF702_tree = 
                    (Object)adaptor.create(IF702)
                    ;
                    adaptor.addChild(root_0, IF702_tree);
                    }

                    }
                    break;
                case 19 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1012:7: ALL
                    {
                    root_0 = (Object)adaptor.nil();


                    ALL703=(Token)match(input,ALL,FOLLOW_ALL_in_eid_without_columns6878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL703_tree = 
                    (Object)adaptor.create(ALL703)
                    ;
                    adaptor.addChild(root_0, ALL703_tree);
                    }

                    }
                    break;
                case 20 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1013:7: AS
                    {
                    root_0 = (Object)adaptor.nil();


                    AS704=(Token)match(input,AS,FOLLOW_AS_in_eid_without_columns6886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS704_tree = 
                    (Object)adaptor.create(AS704)
                    ;
                    adaptor.addChild(root_0, AS704_tree);
                    }

                    }
                    break;
                case 21 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1014:7: BY
                    {
                    root_0 = (Object)adaptor.nil();


                    BY705=(Token)match(input,BY,FOLLOW_BY_in_eid_without_columns6894); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY705_tree = 
                    (Object)adaptor.create(BY705)
                    ;
                    adaptor.addChild(root_0, BY705_tree);
                    }

                    }
                    break;
                case 22 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1015:7: USING
                    {
                    root_0 = (Object)adaptor.nil();


                    USING706=(Token)match(input,USING,FOLLOW_USING_in_eid_without_columns6902); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING706_tree = 
                    (Object)adaptor.create(USING706)
                    ;
                    adaptor.addChild(root_0, USING706_tree);
                    }

                    }
                    break;
                case 23 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1016:7: INNER
                    {
                    root_0 = (Object)adaptor.nil();


                    INNER707=(Token)match(input,INNER,FOLLOW_INNER_in_eid_without_columns6910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER707_tree = 
                    (Object)adaptor.create(INNER707)
                    ;
                    adaptor.addChild(root_0, INNER707_tree);
                    }

                    }
                    break;
                case 24 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1017:7: OUTER
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTER708=(Token)match(input,OUTER,FOLLOW_OUTER_in_eid_without_columns6918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER708_tree = 
                    (Object)adaptor.create(OUTER708)
                    ;
                    adaptor.addChild(root_0, OUTER708_tree);
                    }

                    }
                    break;
                case 25 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1018:7: PARALLEL
                    {
                    root_0 = (Object)adaptor.nil();


                    PARALLEL709=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid_without_columns6926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL709_tree = 
                    (Object)adaptor.create(PARALLEL709)
                    ;
                    adaptor.addChild(root_0, PARALLEL709_tree);
                    }

                    }
                    break;
                case 26 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1019:7: PARTITION
                    {
                    root_0 = (Object)adaptor.nil();


                    PARTITION710=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_eid_without_columns6934); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION710_tree = 
                    (Object)adaptor.create(PARTITION710)
                    ;
                    adaptor.addChild(root_0, PARTITION710_tree);
                    }

                    }
                    break;
                case 27 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1020:7: AND
                    {
                    root_0 = (Object)adaptor.nil();


                    AND711=(Token)match(input,AND,FOLLOW_AND_in_eid_without_columns6942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND711_tree = 
                    (Object)adaptor.create(AND711)
                    ;
                    adaptor.addChild(root_0, AND711_tree);
                    }

                    }
                    break;
                case 28 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1021:7: OR
                    {
                    root_0 = (Object)adaptor.nil();


                    OR712=(Token)match(input,OR,FOLLOW_OR_in_eid_without_columns6950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR712_tree = 
                    (Object)adaptor.create(OR712)
                    ;
                    adaptor.addChild(root_0, OR712_tree);
                    }

                    }
                    break;
                case 29 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1022:7: GENERATE
                    {
                    root_0 = (Object)adaptor.nil();


                    GENERATE713=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_eid_without_columns6958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE713_tree = 
                    (Object)adaptor.create(GENERATE713)
                    ;
                    adaptor.addChild(root_0, GENERATE713_tree);
                    }

                    }
                    break;
                case 30 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1023:7: ASC
                    {
                    root_0 = (Object)adaptor.nil();


                    ASC714=(Token)match(input,ASC,FOLLOW_ASC_in_eid_without_columns6966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC714_tree = 
                    (Object)adaptor.create(ASC714)
                    ;
                    adaptor.addChild(root_0, ASC714_tree);
                    }

                    }
                    break;
                case 31 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1024:7: DESC
                    {
                    root_0 = (Object)adaptor.nil();


                    DESC715=(Token)match(input,DESC,FOLLOW_DESC_in_eid_without_columns6974); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC715_tree = 
                    (Object)adaptor.create(DESC715)
                    ;
                    adaptor.addChild(root_0, DESC715_tree);
                    }

                    }
                    break;
                case 32 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1025:7: BOOL
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL716=(Token)match(input,BOOL,FOLLOW_BOOL_in_eid_without_columns6982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL716_tree = 
                    (Object)adaptor.create(BOOL716)
                    ;
                    adaptor.addChild(root_0, BOOL716_tree);
                    }

                    }
                    break;
                case 33 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1026:7: BIGINTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    BIGINTEGER717=(Token)match(input,BIGINTEGER,FOLLOW_BIGINTEGER_in_eid_without_columns6990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIGINTEGER717_tree = 
                    (Object)adaptor.create(BIGINTEGER717)
                    ;
                    adaptor.addChild(root_0, BIGINTEGER717_tree);
                    }

                    }
                    break;
                case 34 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1027:7: BIGDECIMAL
                    {
                    root_0 = (Object)adaptor.nil();


                    BIGDECIMAL718=(Token)match(input,BIGDECIMAL,FOLLOW_BIGDECIMAL_in_eid_without_columns6998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIGDECIMAL718_tree = 
                    (Object)adaptor.create(BIGDECIMAL718)
                    ;
                    adaptor.addChild(root_0, BIGDECIMAL718_tree);
                    }

                    }
                    break;
                case 35 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1028:7: DATETIME
                    {
                    root_0 = (Object)adaptor.nil();


                    DATETIME719=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_eid_without_columns7006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATETIME719_tree = 
                    (Object)adaptor.create(DATETIME719)
                    ;
                    adaptor.addChild(root_0, DATETIME719_tree);
                    }

                    }
                    break;
                case 36 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1029:7: CHARARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    CHARARRAY720=(Token)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid_without_columns7014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY720_tree = 
                    (Object)adaptor.create(CHARARRAY720)
                    ;
                    adaptor.addChild(root_0, CHARARRAY720_tree);
                    }

                    }
                    break;
                case 37 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1030:7: BYTEARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    BYTEARRAY721=(Token)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid_without_columns7022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY721_tree = 
                    (Object)adaptor.create(BYTEARRAY721)
                    ;
                    adaptor.addChild(root_0, BYTEARRAY721_tree);
                    }

                    }
                    break;
                case 38 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1031:7: IS
                    {
                    root_0 = (Object)adaptor.nil();


                    IS722=(Token)match(input,IS,FOLLOW_IS_in_eid_without_columns7030); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS722_tree = 
                    (Object)adaptor.create(IS722)
                    ;
                    adaptor.addChild(root_0, IS722_tree);
                    }

                    }
                    break;
                case 39 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1032:7: STREAM
                    {
                    root_0 = (Object)adaptor.nil();


                    STREAM723=(Token)match(input,STREAM,FOLLOW_STREAM_in_eid_without_columns7038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM723_tree = 
                    (Object)adaptor.create(STREAM723)
                    ;
                    adaptor.addChild(root_0, STREAM723_tree);
                    }

                    }
                    break;
                case 40 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1033:7: THROUGH
                    {
                    root_0 = (Object)adaptor.nil();


                    THROUGH724=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_eid_without_columns7046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH724_tree = 
                    (Object)adaptor.create(THROUGH724)
                    ;
                    adaptor.addChild(root_0, THROUGH724_tree);
                    }

                    }
                    break;
                case 41 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1034:7: STORE
                    {
                    root_0 = (Object)adaptor.nil();


                    STORE725=(Token)match(input,STORE,FOLLOW_STORE_in_eid_without_columns7054); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE725_tree = 
                    (Object)adaptor.create(STORE725)
                    ;
                    adaptor.addChild(root_0, STORE725_tree);
                    }

                    }
                    break;
                case 42 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1035:7: MAPREDUCE
                    {
                    root_0 = (Object)adaptor.nil();


                    MAPREDUCE726=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid_without_columns7062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE726_tree = 
                    (Object)adaptor.create(MAPREDUCE726)
                    ;
                    adaptor.addChild(root_0, MAPREDUCE726_tree);
                    }

                    }
                    break;
                case 43 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1036:7: SHIP
                    {
                    root_0 = (Object)adaptor.nil();


                    SHIP727=(Token)match(input,SHIP,FOLLOW_SHIP_in_eid_without_columns7070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP727_tree = 
                    (Object)adaptor.create(SHIP727)
                    ;
                    adaptor.addChild(root_0, SHIP727_tree);
                    }

                    }
                    break;
                case 44 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1037:7: CACHE
                    {
                    root_0 = (Object)adaptor.nil();


                    CACHE728=(Token)match(input,CACHE,FOLLOW_CACHE_in_eid_without_columns7078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE728_tree = 
                    (Object)adaptor.create(CACHE728)
                    ;
                    adaptor.addChild(root_0, CACHE728_tree);
                    }

                    }
                    break;
                case 45 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1038:7: INPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    INPUT729=(Token)match(input,INPUT,FOLLOW_INPUT_in_eid_without_columns7086); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT729_tree = 
                    (Object)adaptor.create(INPUT729)
                    ;
                    adaptor.addChild(root_0, INPUT729_tree);
                    }

                    }
                    break;
                case 46 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1039:7: OUTPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTPUT730=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid_without_columns7094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT730_tree = 
                    (Object)adaptor.create(OUTPUT730)
                    ;
                    adaptor.addChild(root_0, OUTPUT730_tree);
                    }

                    }
                    break;
                case 47 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1040:7: STDERROR
                    {
                    root_0 = (Object)adaptor.nil();


                    STDERROR731=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_eid_without_columns7102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR731_tree = 
                    (Object)adaptor.create(STDERROR731)
                    ;
                    adaptor.addChild(root_0, STDERROR731_tree);
                    }

                    }
                    break;
                case 48 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1041:7: STDIN
                    {
                    root_0 = (Object)adaptor.nil();


                    STDIN732=(Token)match(input,STDIN,FOLLOW_STDIN_in_eid_without_columns7110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN732_tree = 
                    (Object)adaptor.create(STDIN732)
                    ;
                    adaptor.addChild(root_0, STDIN732_tree);
                    }

                    }
                    break;
                case 49 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1042:7: STDOUT
                    {
                    root_0 = (Object)adaptor.nil();


                    STDOUT733=(Token)match(input,STDOUT,FOLLOW_STDOUT_in_eid_without_columns7118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT733_tree = 
                    (Object)adaptor.create(STDOUT733)
                    ;
                    adaptor.addChild(root_0, STDOUT733_tree);
                    }

                    }
                    break;
                case 50 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1043:7: LIMIT
                    {
                    root_0 = (Object)adaptor.nil();


                    LIMIT734=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_eid_without_columns7126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT734_tree = 
                    (Object)adaptor.create(LIMIT734)
                    ;
                    adaptor.addChild(root_0, LIMIT734_tree);
                    }

                    }
                    break;
                case 51 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1044:7: SAMPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    SAMPLE735=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid_without_columns7134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE735_tree = 
                    (Object)adaptor.create(SAMPLE735)
                    ;
                    adaptor.addChild(root_0, SAMPLE735_tree);
                    }

                    }
                    break;
                case 52 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1045:7: LEFT
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT736=(Token)match(input,LEFT,FOLLOW_LEFT_in_eid_without_columns7142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT736_tree = 
                    (Object)adaptor.create(LEFT736)
                    ;
                    adaptor.addChild(root_0, LEFT736_tree);
                    }

                    }
                    break;
                case 53 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1046:7: RIGHT
                    {
                    root_0 = (Object)adaptor.nil();


                    RIGHT737=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_eid_without_columns7150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT737_tree = 
                    (Object)adaptor.create(RIGHT737)
                    ;
                    adaptor.addChild(root_0, RIGHT737_tree);
                    }

                    }
                    break;
                case 54 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1047:7: FULL
                    {
                    root_0 = (Object)adaptor.nil();


                    FULL738=(Token)match(input,FULL,FOLLOW_FULL_in_eid_without_columns7158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL738_tree = 
                    (Object)adaptor.create(FULL738)
                    ;
                    adaptor.addChild(root_0, FULL738_tree);
                    }

                    }
                    break;
                case 55 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1048:7: REALIAS
                    {
                    root_0 = (Object)adaptor.nil();


                    REALIAS739=(Token)match(input,REALIAS,FOLLOW_REALIAS_in_eid_without_columns7166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIAS739_tree = 
                    (Object)adaptor.create(REALIAS739)
                    ;
                    adaptor.addChild(root_0, REALIAS739_tree);
                    }

                    }
                    break;
                case 56 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1049:7: BOOL_COND
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL_COND740=(Token)match(input,BOOL_COND,FOLLOW_BOOL_COND_in_eid_without_columns7174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL_COND740_tree = 
                    (Object)adaptor.create(BOOL_COND740)
                    ;
                    adaptor.addChild(root_0, BOOL_COND740_tree);
                    }

                    }
                    break;
                case 57 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1050:7: ASSERT
                    {
                    root_0 = (Object)adaptor.nil();


                    ASSERT741=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_eid_without_columns7182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSERT741_tree = 
                    (Object)adaptor.create(ASSERT741)
                    ;
                    adaptor.addChild(root_0, ASSERT741_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid_without_columns"


    public static class eid_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1053:1: eid : ( eid_without_columns | IDENTIFIER | GROUP | CUBE | TRUE | FALSE | INT | LONG | FLOAT | DOUBLE | NULL | NOT | FLATTEN | BAG | TUPLE | MAP );
    public final QueryParser.eid_return eid() throws RecognitionException {
        QueryParser.eid_return retval = new QueryParser.eid_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER743=null;
        Token GROUP744=null;
        Token CUBE745=null;
        Token TRUE746=null;
        Token FALSE747=null;
        Token INT748=null;
        Token LONG749=null;
        Token FLOAT750=null;
        Token DOUBLE751=null;
        Token NULL752=null;
        Token NOT753=null;
        Token FLATTEN754=null;
        Token BAG755=null;
        Token TUPLE756=null;
        Token MAP757=null;
        QueryParser.eid_without_columns_return eid_without_columns742 =null;


        Object IDENTIFIER743_tree=null;
        Object GROUP744_tree=null;
        Object CUBE745_tree=null;
        Object TRUE746_tree=null;
        Object FALSE747_tree=null;
        Object INT748_tree=null;
        Object LONG749_tree=null;
        Object FLOAT750_tree=null;
        Object DOUBLE751_tree=null;
        Object NULL752_tree=null;
        Object NOT753_tree=null;
        Object FLATTEN754_tree=null;
        Object BAG755_tree=null;
        Object TUPLE756_tree=null;
        Object MAP757_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1053:5: ( eid_without_columns | IDENTIFIER | GROUP | CUBE | TRUE | FALSE | INT | LONG | FLOAT | DOUBLE | NULL | NOT | FLATTEN | BAG | TUPLE | MAP )
            int alt194=16;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case ASSERT:
            case BIGDECIMAL:
            case BIGINTEGER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case FILTER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case REGISTER:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt194=1;
                }
                break;
            case IDENTIFIER:
                {
                alt194=2;
                }
                break;
            case GROUP:
                {
                alt194=3;
                }
                break;
            case CUBE:
                {
                alt194=4;
                }
                break;
            case TRUE:
                {
                alt194=5;
                }
                break;
            case FALSE:
                {
                alt194=6;
                }
                break;
            case INT:
                {
                alt194=7;
                }
                break;
            case LONG:
                {
                alt194=8;
                }
                break;
            case FLOAT:
                {
                alt194=9;
                }
                break;
            case DOUBLE:
                {
                alt194=10;
                }
                break;
            case NULL:
                {
                alt194=11;
                }
                break;
            case NOT:
                {
                alt194=12;
                }
                break;
            case FLATTEN:
                {
                alt194=13;
                }
                break;
            case BAG:
                {
                alt194=14;
                }
                break;
            case TUPLE:
                {
                alt194=15;
                }
                break;
            case MAP:
                {
                alt194=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;

            }

            switch (alt194) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1053:7: eid_without_columns
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_eid_without_columns_in_eid7191);
                    eid_without_columns742=eid_without_columns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid_without_columns742.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1054:7: IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();


                    IDENTIFIER743=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_eid7199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER743_tree = 
                    (Object)adaptor.create(IDENTIFIER743)
                    ;
                    adaptor.addChild(root_0, IDENTIFIER743_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1055:7: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP744=(Token)match(input,GROUP,FOLLOW_GROUP_in_eid7207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP744_tree = 
                    (Object)adaptor.create(GROUP744)
                    ;
                    adaptor.addChild(root_0, GROUP744_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1056:7: CUBE
                    {
                    root_0 = (Object)adaptor.nil();


                    CUBE745=(Token)match(input,CUBE,FOLLOW_CUBE_in_eid7215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CUBE745_tree = 
                    (Object)adaptor.create(CUBE745)
                    ;
                    adaptor.addChild(root_0, CUBE745_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1057:7: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE746=(Token)match(input,TRUE,FOLLOW_TRUE_in_eid7223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE746_tree = 
                    (Object)adaptor.create(TRUE746)
                    ;
                    adaptor.addChild(root_0, TRUE746_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1058:7: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE747=(Token)match(input,FALSE,FOLLOW_FALSE_in_eid7231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE747_tree = 
                    (Object)adaptor.create(FALSE747)
                    ;
                    adaptor.addChild(root_0, FALSE747_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1059:7: INT
                    {
                    root_0 = (Object)adaptor.nil();


                    INT748=(Token)match(input,INT,FOLLOW_INT_in_eid7239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT748_tree = 
                    (Object)adaptor.create(INT748)
                    ;
                    adaptor.addChild(root_0, INT748_tree);
                    }

                    }
                    break;
                case 8 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1060:7: LONG
                    {
                    root_0 = (Object)adaptor.nil();


                    LONG749=(Token)match(input,LONG,FOLLOW_LONG_in_eid7247); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG749_tree = 
                    (Object)adaptor.create(LONG749)
                    ;
                    adaptor.addChild(root_0, LONG749_tree);
                    }

                    }
                    break;
                case 9 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1061:7: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();


                    FLOAT750=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_eid7255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT750_tree = 
                    (Object)adaptor.create(FLOAT750)
                    ;
                    adaptor.addChild(root_0, FLOAT750_tree);
                    }

                    }
                    break;
                case 10 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1062:7: DOUBLE
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLE751=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid7263); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE751_tree = 
                    (Object)adaptor.create(DOUBLE751)
                    ;
                    adaptor.addChild(root_0, DOUBLE751_tree);
                    }

                    }
                    break;
                case 11 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1063:7: NULL
                    {
                    root_0 = (Object)adaptor.nil();


                    NULL752=(Token)match(input,NULL,FOLLOW_NULL_in_eid7271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL752_tree = 
                    (Object)adaptor.create(NULL752)
                    ;
                    adaptor.addChild(root_0, NULL752_tree);
                    }

                    }
                    break;
                case 12 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1064:7: NOT
                    {
                    root_0 = (Object)adaptor.nil();


                    NOT753=(Token)match(input,NOT,FOLLOW_NOT_in_eid7279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT753_tree = 
                    (Object)adaptor.create(NOT753)
                    ;
                    adaptor.addChild(root_0, NOT753_tree);
                    }

                    }
                    break;
                case 13 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1065:7: FLATTEN
                    {
                    root_0 = (Object)adaptor.nil();


                    FLATTEN754=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid7287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN754_tree = 
                    (Object)adaptor.create(FLATTEN754)
                    ;
                    adaptor.addChild(root_0, FLATTEN754_tree);
                    }

                    }
                    break;
                case 14 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1066:7: BAG
                    {
                    root_0 = (Object)adaptor.nil();


                    BAG755=(Token)match(input,BAG,FOLLOW_BAG_in_eid7295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG755_tree = 
                    (Object)adaptor.create(BAG755)
                    ;
                    adaptor.addChild(root_0, BAG755_tree);
                    }

                    }
                    break;
                case 15 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1067:7: TUPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    TUPLE756=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_eid7303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE756_tree = 
                    (Object)adaptor.create(TUPLE756)
                    ;
                    adaptor.addChild(root_0, TUPLE756_tree);
                    }

                    }
                    break;
                case 16 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1068:7: MAP
                    {
                    root_0 = (Object)adaptor.nil();


                    MAP757=(Token)match(input,MAP,FOLLOW_MAP_in_eid7311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP757_tree = 
                    (Object)adaptor.create(MAP757)
                    ;
                    adaptor.addChild(root_0, MAP757_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1072:1: rel_op : ( rel_str_op | NUM_OP_EQ | NUM_OP_NE | NUM_OP_GT | NUM_OP_GTE | NUM_OP_LT | NUM_OP_LTE );
    public final QueryParser.rel_op_return rel_op() throws RecognitionException {
        QueryParser.rel_op_return retval = new QueryParser.rel_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUM_OP_EQ759=null;
        Token NUM_OP_NE760=null;
        Token NUM_OP_GT761=null;
        Token NUM_OP_GTE762=null;
        Token NUM_OP_LT763=null;
        Token NUM_OP_LTE764=null;
        QueryParser.rel_str_op_return rel_str_op758 =null;


        Object NUM_OP_EQ759_tree=null;
        Object NUM_OP_NE760_tree=null;
        Object NUM_OP_GT761_tree=null;
        Object NUM_OP_GTE762_tree=null;
        Object NUM_OP_LT763_tree=null;
        Object NUM_OP_LTE764_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1072:8: ( rel_str_op | NUM_OP_EQ | NUM_OP_NE | NUM_OP_GT | NUM_OP_GTE | NUM_OP_LT | NUM_OP_LTE )
            int alt195=7;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt195=1;
                }
                break;
            case NUM_OP_EQ:
                {
                alt195=2;
                }
                break;
            case NUM_OP_NE:
                {
                alt195=3;
                }
                break;
            case NUM_OP_GT:
                {
                alt195=4;
                }
                break;
            case NUM_OP_GTE:
                {
                alt195=5;
                }
                break;
            case NUM_OP_LT:
                {
                alt195=6;
                }
                break;
            case NUM_OP_LTE:
                {
                alt195=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }

            switch (alt195) {
                case 1 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1072:10: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_rel_op7321);
                    rel_str_op758=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op758.getTree());

                    }
                    break;
                case 2 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1073:10: NUM_OP_EQ
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_EQ759=(Token)match(input,NUM_OP_EQ,FOLLOW_NUM_OP_EQ_in_rel_op7332); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_EQ759_tree = 
                    (Object)adaptor.create(NUM_OP_EQ759)
                    ;
                    adaptor.addChild(root_0, NUM_OP_EQ759_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1074:10: NUM_OP_NE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_NE760=(Token)match(input,NUM_OP_NE,FOLLOW_NUM_OP_NE_in_rel_op7343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_NE760_tree = 
                    (Object)adaptor.create(NUM_OP_NE760)
                    ;
                    adaptor.addChild(root_0, NUM_OP_NE760_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1075:10: NUM_OP_GT
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_GT761=(Token)match(input,NUM_OP_GT,FOLLOW_NUM_OP_GT_in_rel_op7354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_GT761_tree = 
                    (Object)adaptor.create(NUM_OP_GT761)
                    ;
                    adaptor.addChild(root_0, NUM_OP_GT761_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1076:10: NUM_OP_GTE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_GTE762=(Token)match(input,NUM_OP_GTE,FOLLOW_NUM_OP_GTE_in_rel_op7365); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_GTE762_tree = 
                    (Object)adaptor.create(NUM_OP_GTE762)
                    ;
                    adaptor.addChild(root_0, NUM_OP_GTE762_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1077:10: NUM_OP_LT
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_LT763=(Token)match(input,NUM_OP_LT,FOLLOW_NUM_OP_LT_in_rel_op7376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_LT763_tree = 
                    (Object)adaptor.create(NUM_OP_LT763)
                    ;
                    adaptor.addChild(root_0, NUM_OP_LT763_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1078:10: NUM_OP_LTE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_LTE764=(Token)match(input,NUM_OP_LTE,FOLLOW_NUM_OP_LTE_in_rel_op7387); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_LTE764_tree = 
                    (Object)adaptor.create(NUM_OP_LTE764)
                    ;
                    adaptor.addChild(root_0, NUM_OP_LTE764_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_str_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1081:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final QueryParser.rel_str_op_return rel_str_op() throws RecognitionException {
        QueryParser.rel_str_op_return retval = new QueryParser.rel_str_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set765=null;

        Object set765_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1081:12: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set765=(Token)input.LT(1);

            if ( (input.LA(1) >= STR_OP_EQ && input.LA(1) <= STR_OP_NE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set765)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"


    public static class reserved_identifier_whitelist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reserved_identifier_whitelist"
    // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1090:1: reserved_identifier_whitelist : ( RANK | CUBE | IN | WHEN | THEN | ELSE | END );
    public final QueryParser.reserved_identifier_whitelist_return reserved_identifier_whitelist() throws RecognitionException {
        QueryParser.reserved_identifier_whitelist_return retval = new QueryParser.reserved_identifier_whitelist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set766=null;

        Object set766_tree=null;

        try {
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:1090:31: ( RANK | CUBE | IN | WHEN | THEN | ELSE | END )
            // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set766=(Token)input.LT(1);

            if ( input.LA(1)==CUBE||(input.LA(1) >= ELSE && input.LA(1) <= END)||input.LA(1)==IN||input.LA(1)==RANK||input.LA(1)==THEN||input.LA(1)==WHEN ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set766)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reserved_identifier_whitelist"

    // $ANTLR start synpred1_QueryParser
    public final void synpred1_QueryParser_fragment() throws RecognitionException {
        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:20: ( WHEN )
        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:785:21: WHEN
        {
        match(input,WHEN,FOLLOW_WHEN_in_synpred1_QueryParser4565); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_QueryParser

    // $ANTLR start synpred2_QueryParser
    public final void synpred2_QueryParser_fragment() throws RecognitionException {
        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:861:14: ( implicit_map_type RIGHT_PAREN cast_expr )
        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:861:16: implicit_map_type RIGHT_PAREN cast_expr
        {
        pushFollow(FOLLOW_implicit_map_type_in_synpred2_QueryParser5018);
        implicit_map_type();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred2_QueryParser5020); if (state.failed) return ;

        pushFollow(FOLLOW_cast_expr_in_synpred2_QueryParser5022);
        cast_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_QueryParser

    // $ANTLR start synpred3_QueryParser
    public final void synpred3_QueryParser_fragment() throws RecognitionException {
        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:941:18: ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)
        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:941:20: identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?
        {
        pushFollow(FOLLOW_identifier_plus_in_synpred3_QueryParser6219);
        identifier_plus();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred3_QueryParser6221); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_in_synpred3_QueryParser6223);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        match(input,PERIOD,FOLLOW_PERIOD_in_synpred3_QueryParser6225); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_list_in_synpred3_QueryParser6227);
        col_ref_list();

        state._fsp--;
        if (state.failed) return ;

        if ( !(( input.LA( 1 ) == SEMI_COLON )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_QueryParser", " input.LA( 1 ) == SEMI_COLON ");
        }

        }

    }
    // $ANTLR end synpred3_QueryParser

    // $ANTLR start synpred4_QueryParser
    public final void synpred4_QueryParser_fragment() throws RecognitionException {
        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:974:41: ( INTEGER SEMI_COLON )
        // /home/hoang/DATA/WORKSPACE/pig-mrcube-build/src/org/apache/pig/parser/QueryParser.g:974:42: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred4_QueryParser6607); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred4_QueryParser6609); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_QueryParser

    // Delegated rules

    public final boolean synpred3_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA54 dfa54 = new DFA54(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA184 dfa184 = new DFA184(this);
    static final String DFA54_eotS =
        "\u0094\uffff";
    static final String DFA54_eofS =
        "\u0094\uffff";
    static final String DFA54_minS =
        "\1\4\110\10\1\4\2\uffff\110\10";
    static final String DFA54_maxS =
        "\1\u00b4\110\164\1\u00b4\2\uffff\110\164";
    static final String DFA54_acceptS =
        "\112\uffff\1\1\1\2\110\uffff";
    static final String DFA54_specialS =
        "\u0094\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\23\1\uffff\1\33\1\uffff\1\24\1\36\1\71\1\106\1\42\1\uffff"+
            "\1\41\2\uffff\1\25\1\45\1\54\1\uffff\1\44\1\uffff\1\14\2\uffff"+
            "\1\16\1\74\1\43\1\uffff\1\5\1\uffff\1\37\1\uffff\1\13\3\uffff"+
            "\1\102\6\uffff\1\76\1\uffff\1\7\1\105\1\101\2\uffff\1\10\1\66"+
            "\1\35\1\73\1\uffff\1\72\1\22\1\2\1\uffff\1\27\1\55\1\77\1\uffff"+
            "\1\21\1\uffff\1\46\1\15\1\64\4\uffff\1\62\1\6\1\100\1\uffff"+
            "\1\110\1\52\3\uffff\1\104\1\103\7\uffff\1\34\1\12\1\uffff\1"+
            "\30\1\56\1\31\1\32\11\uffff\1\3\1\4\1\65\3\uffff\1\11\1\63\1"+
            "\uffff\1\53\2\uffff\1\20\1\uffff\1\57\1\60\1\61\1\51\1\47\7"+
            "\1\1\uffff\1\50\1\75\1\107\1\17\1\26\10\uffff\1\40\1\70\36\uffff"+
            "\1\67",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\136\1\uffff\1\146\1\uffff\1\137\1\151\1\u0084\1\u0091\1"+
            "\155\1\uffff\1\154\2\uffff\1\140\1\160\1\167\1\uffff\1\157\1"+
            "\uffff\1\127\2\uffff\1\131\1\u0087\1\156\1\uffff\1\120\1\uffff"+
            "\1\152\1\uffff\1\126\3\uffff\1\u008d\6\uffff\1\u0089\1\uffff"+
            "\1\122\1\u0090\1\u008c\2\uffff\1\123\1\u0081\1\150\1\u0086\1"+
            "\uffff\1\u0085\1\135\1\115\1\uffff\1\142\1\170\1\u008a\1\uffff"+
            "\1\134\1\uffff\1\161\1\130\1\177\4\uffff\1\175\1\121\1\u008b"+
            "\1\uffff\1\u0093\1\165\3\uffff\1\u008f\1\u008e\7\uffff\1\147"+
            "\1\125\1\uffff\1\143\1\171\1\144\1\145\11\uffff\1\116\1\117"+
            "\1\u0080\3\uffff\1\124\1\176\1\uffff\1\166\2\uffff\1\133\1\uffff"+
            "\1\172\1\173\1\174\1\164\1\162\7\114\1\uffff\1\163\1\u0088\1"+
            "\u0092\1\132\1\141\10\uffff\1\153\1\u0083\36\uffff\1\u0082",
            "",
            "",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112",
            "\1\112\20\uffff\1\112\12\uffff\1\111\7\uffff\1\112\33\uffff"+
            "\1\113\2\uffff\1\112\25\uffff\1\112\2\uffff\1\111\14\uffff\1"+
            "\112\2\uffff\1\112"
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "409:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );";
        }
    }
    static final String DFA144_eotS =
        "\22\uffff";
    static final String DFA144_eofS =
        "\5\uffff\2\15\10\uffff\3\15";
    static final String DFA144_minS =
        "\1\4\4\uffff\2\6\5\uffff\1\4\2\uffff\3\6";
    static final String DFA144_maxS =
        "\1\u00b4\4\uffff\2\u008d\5\uffff\1\u00b4\2\uffff\3\u008d";
    static final String DFA144_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\2\uffff\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\5\1\6\3\uffff";
    static final String DFA144_specialS =
        "\22\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\3\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\3\7\1\10\1\7\1\uffff\1\7\2\uffff\1\7\1\6\1\7\1\uffff\1\7\1"+
            "\uffff\1\7\1\uffff\1\7\2\uffff\1\3\1\uffff\1\1\1\uffff\2\6\2"+
            "\uffff\1\1\1\uffff\1\7\3\uffff\1\1\3\7\1\3\1\uffff\1\5\2\7\1"+
            "\6\2\7\1\uffff\1\1\1\7\1\4\3\7\1\13\1\12\1\11\1\uffff\2\7\1"+
            "\uffff\1\1\1\uffff\1\7\1\2\3\uffff\1\1\7\uffff\2\7\1\uffff\4"+
            "\7\6\uffff\1\1\1\6\1\uffff\3\7\3\uffff\2\7\1\uffff\1\7\2\uffff"+
            "\1\7\1\uffff\14\7\1\6\1\7\1\1\1\uffff\2\7\1\uffff\1\6\6\uffff"+
            "\2\7\36\uffff\1\7",
            "",
            "",
            "",
            "",
            "\1\15\1\uffff\1\15\17\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\1\uffff\3\15\5\uffff\4\15\2\uffff\1\15"+
            "\4\uffff\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\17\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\1\uffff\3\15\5\uffff\4\15\2\uffff\1\15"+
            "\4\uffff\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "\1\16\1\uffff\1\16\1\uffff\5\16\1\uffff\1\16\2\uffff\3\16\1"+
            "\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\21\1\16\1\uffff\1\16"+
            "\1\uffff\1\16\1\uffff\1\16\2\uffff\1\15\1\16\2\uffff\2\15\2"+
            "\uffff\1\16\1\uffff\3\16\2\uffff\3\16\1\17\1\uffff\1\20\2\16"+
            "\1\15\3\16\1\uffff\1\16\1\uffff\3\16\2\uffff\1\15\1\uffff\3"+
            "\16\1\uffff\2\16\3\uffff\2\16\7\uffff\2\16\1\uffff\4\16\7\uffff"+
            "\1\15\1\uffff\3\16\3\uffff\2\16\1\uffff\1\16\2\uffff\1\16\1"+
            "\uffff\14\16\1\15\5\16\1\uffff\1\15\6\uffff\2\16\36\uffff\1"+
            "\16",
            "",
            "",
            "\1\15\1\uffff\1\15\17\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\1\uffff\3\15\5\uffff\4\15\2\uffff\1\15"+
            "\4\uffff\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\17\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\1\uffff\3\15\5\uffff\4\15\2\uffff\1\15"+
            "\4\uffff\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\17\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\1\uffff\3\15\5\uffff\4\15\2\uffff\1\15"+
            "\4\uffff\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15"
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "709:1: cast_expr : ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr );";
        }
    }
    static final String DFA143_eotS =
        "\106\uffff";
    static final String DFA143_eofS =
        "\106\uffff";
    static final String DFA143_minS =
        "\1\4\1\0\104\uffff";
    static final String DFA143_maxS =
        "\1\u00b4\1\0\104\uffff";
    static final String DFA143_acceptS =
        "\2\uffff\1\2\102\uffff\1\1";
    static final String DFA143_specialS =
        "\1\uffff\1\0\104\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\2\1\uffff\1\2\1\uffff\3\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\5\2\1\uffff\1\2\2\uffff\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\5\2\1\uffff\6\2\1\uffff\11\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\2\2\3\uffff\1\2\7\uffff\2\2\1\uffff\4\2\6\uffff"+
            "\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\1\2\2\uffff\1\2\1\uffff"+
            "\17\2\1\uffff\2\2\1\uffff\1\1\6\uffff\2\2\36\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "785:18: ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN rhs_operand THEN rhs_operand ( WHEN rhs_operand THEN rhs_operand )* ( ELSE rhs_operand )? END ( projection )* -> ^( CASE_EXPR ^( CASE_EXPR_LHS expr ) ( ^( CASE_EXPR_RHS rhs_operand ) )+ ) ( projection )* )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_QueryParser()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index143_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA149_eotS =
        "\115\uffff";
    static final String DFA149_eofS =
        "\115\uffff";
    static final String DFA149_minS =
        "\1\4\1\0\113\uffff";
    static final String DFA149_maxS =
        "\1\u00b4\1\0\113\uffff";
    static final String DFA149_acceptS =
        "\2\uffff\1\2\111\uffff\1\1";
    static final String DFA149_specialS =
        "\1\uffff\1\0\113\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\2\1\uffff\1\2\1\uffff\5\2\1\uffff\1\2\1\uffff\6\2\1\uffff"+
            "\1\2\2\uffff\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\6\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\1\uffff"+
            "\15\2\1\1\2\2\1\uffff\7\2\2\uffff\2\2\7\uffff\2\2\1\uffff\4"+
            "\2\6\uffff\2\2\1\uffff\3\2\2\uffff\3\2\1\uffff\1\2\2\uffff\24"+
            "\2\1\uffff\1\2\6\uffff\2\2\36\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "854:1: try_implicit_map_cast : ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_1 = input.LA(1);

                         
                        int index149_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_QueryParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA184_eotS =
        "\66\uffff";
    static final String DFA184_eofS =
        "\66\uffff";
    static final String DFA184_minS =
        "\1\33\2\53\1\4\3\43\1\uffff\7\33\1\4\1\uffff\3\0\1\33\3\0\1\33\2"+
        "\0\1\uffff\6\31\1\33\3\0\1\33\3\0\6\31\6\0";
    static final String DFA184_maxS =
        "\1\u008d\2\53\1\u00b4\3\171\1\uffff\7\u008d\1\u00b4\1\uffff\3\0"+
        "\1\u008d\3\0\1\u008d\2\0\1\uffff\6\161\1\u008d\3\0\1\u008d\3\0\6"+
        "\161\6\0";
    static final String DFA184_acceptS =
        "\7\uffff\1\2\10\uffff\1\3\12\uffff\1\1\32\uffff";
    static final String DFA184_specialS =
        "\21\uffff\1\23\1\11\1\22\1\uffff\1\12\1\21\1\0\1\uffff\1\2\1\1\10"+
        "\uffff\1\16\1\17\1\20\1\uffff\1\6\1\7\1\10\6\uffff\1\15\1\14\1\13"+
        "\1\5\1\4\1\3}>";
    static final String[] DFA184_transitionS = {
            "\1\2\15\uffff\2\2\16\uffff\1\1\2\uffff\1\2\55\uffff\1\2\33\uffff"+
            "\1\2\6\uffff\1\2",
            "\1\3",
            "\1\3",
            "\1\7\1\uffff\1\7\1\uffff\3\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\5\7\1\uffff\1\7\2\uffff\1\14\1\6\1\7\1\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\13\2\uffff\1\4\1\uffff\1\7\1\uffff\2\6\2\uffff"+
            "\1\7\1\uffff\1\10\3\uffff\1\7\1\11\2\7\1\4\1\uffff\1\5\2\7\1"+
            "\6\2\7\1\uffff\11\7\1\uffff\1\15\1\7\1\uffff\1\7\1\uffff\2\7"+
            "\3\uffff\1\7\7\uffff\1\7\1\12\1\uffff\4\7\6\uffff\1\7\1\6\1"+
            "\uffff\3\7\3\uffff\2\7\1\uffff\1\7\2\uffff\1\7\1\uffff\14\7"+
            "\1\6\2\7\1\uffff\2\7\1\uffff\1\6\6\uffff\2\7\36\uffff\1\7",
            "\1\7\54\uffff\1\7\22\uffff\1\7\1\16\1\uffff\2\7\14\uffff\1"+
            "\7\4\uffff\1\7",
            "\2\7\43\uffff\1\7\7\uffff\1\7\22\uffff\1\7\1\17\1\uffff\2\7"+
            "\14\uffff\1\7\4\uffff\1\7",
            "\2\7\43\uffff\1\7\7\uffff\1\7\22\uffff\1\7\1\17\1\uffff\2\7"+
            "\14\uffff\1\7\4\uffff\1\7",
            "",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\5\uffff\1\20\33"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\5\uffff\1\20\33"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\5\uffff\1\20\33"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\5\uffff\1\20\33"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\5\uffff\1\20\33"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\5\uffff\1\20\33"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\23\11\uffff\1\21\3\uffff\2\23\14\uffff\1\21\1\uffff\1\22"+
            "\2\uffff\1\23\13\uffff\1\24\41\uffff\1\23\33\uffff\1\23\6\uffff"+
            "\1\23",
            "\1\7\1\uffff\1\7\1\uffff\5\7\1\uffff\1\7\2\uffff\3\7\1\uffff"+
            "\1\7\1\uffff\1\7\2\uffff\1\7\1\27\1\7\1\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\7\2\uffff\1\31\1\7\2\uffff\2\32\2\uffff\1\7\1\uffff"+
            "\3\7\2\uffff\3\7\1\25\1\uffff\1\26\2\7\1\32\3\7\1\uffff\1\7"+
            "\1\uffff\3\7\2\uffff\1\30\1\uffff\3\7\1\uffff\2\7\3\uffff\2"+
            "\7\7\uffff\2\7\1\uffff\4\7\7\uffff\1\32\1\uffff\3\7\3\uffff"+
            "\2\7\1\uffff\1\7\2\uffff\1\7\1\uffff\14\7\1\32\5\7\1\uffff\1"+
            "\32\6\uffff\2\7\36\uffff\1\7",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\36\11\uffff\1\34\3\uffff\2\36\14\uffff\1\34\1\uffff\1\35"+
            "\2\uffff\1\36\55\uffff\1\36\33\uffff\1\36\6\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\41\11\uffff\1\37\3\uffff\2\41\14\uffff\1\37\1\uffff\1\40"+
            "\2\uffff\1\41\55\uffff\1\41\33\uffff\1\41\6\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\42\127\uffff\1\43",
            "\1\42\127\uffff\1\44",
            "\1\42\127\uffff\1\45",
            "\1\46\127\uffff\1\47",
            "\1\46\127\uffff\1\50",
            "\1\46\127\uffff\1\51",
            "\1\54\11\uffff\1\52\3\uffff\2\54\14\uffff\1\52\1\uffff\1\53"+
            "\2\uffff\1\54\55\uffff\1\54\33\uffff\1\54\6\uffff\1\54",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\57\11\uffff\1\55\3\uffff\2\57\14\uffff\1\55\1\uffff\1\56"+
            "\2\uffff\1\57\55\uffff\1\57\33\uffff\1\57\6\uffff\1\57",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\42\127\uffff\1\60",
            "\1\42\127\uffff\1\61",
            "\1\42\127\uffff\1\62",
            "\1\46\127\uffff\1\63",
            "\1\46\127\uffff\1\64",
            "\1\46\127\uffff\1\65",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "941:1: nested_command : ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA184_23 = input.LA(1);

                         
                        int index184_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_23);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA184_26 = input.LA(1);

                         
                        int index184_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_26);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA184_25 = input.LA(1);

                         
                        int index184_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_25);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA184_53 = input.LA(1);

                         
                        int index184_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_53);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA184_52 = input.LA(1);

                         
                        int index184_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_52);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA184_51 = input.LA(1);

                         
                        int index184_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_51);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA184_39 = input.LA(1);

                         
                        int index184_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_39);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA184_40 = input.LA(1);

                         
                        int index184_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_40);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA184_41 = input.LA(1);

                         
                        int index184_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_41);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA184_18 = input.LA(1);

                         
                        int index184_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_18);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA184_21 = input.LA(1);

                         
                        int index184_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_21);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA184_50 = input.LA(1);

                         
                        int index184_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_50);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA184_49 = input.LA(1);

                         
                        int index184_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_49);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA184_48 = input.LA(1);

                         
                        int index184_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_48);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA184_35 = input.LA(1);

                         
                        int index184_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_35);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA184_36 = input.LA(1);

                         
                        int index184_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_36);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA184_37 = input.LA(1);

                         
                        int index184_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_37);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA184_22 = input.LA(1);

                         
                        int index184_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_22);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA184_19 = input.LA(1);

                         
                        int index184_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_19);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA184_17 = input.LA(1);

                         
                        int index184_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index184_17);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_statement_in_query426 = new BitSet(new long[]{0x1A90C6044C800400L,0x6118140020008D10L,0x0000000000002440L});
    public static final BitSet FOLLOW_EOF_in_query429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_list_in_schema448 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_schema450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_statement_in_statement476 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_statement493 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_clause_in_statement510 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_clause_in_statement527 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realias_clause_in_statement544 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_register_clause_in_statement561 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_clause_in_statement578 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_statement628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_nested_op_clause637 = new BitSet(new long[]{0x008080044C800000L,0x6008040020008C10L,0x0000000000000400L});
    public static final BitSet FOLLOW_op_clause_in_nested_op_clause640 = new BitSet(new long[]{0x0000000000000000L,0x0002000200000000L});
    public static final BitSet FOLLOW_parallel_clause_in_nested_op_clause642 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_nested_op_clause645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_nested_op_clause667 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_nested_op_clause669 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_nested_op_clause671 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_nested_op_clause675 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_nested_op_clause681 = new BitSet(new long[]{0x0000000000000000L,0x0002000200000000L});
    public static final BitSet FOLLOW_parallel_clause_in_nested_op_clause683 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_nested_op_clause690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAT_ARROW_in_general_statement738 = new BitSet(new long[]{0x008080044C800000L,0x6008040020008D10L,0x0000000000000400L});
    public static final BitSet FOLLOW_op_clause_in_general_statement744 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_general_statement753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_general_statement799 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_EQUAL_in_general_statement801 = new BitSet(new long[]{0x008080044C800000L,0x6008040020008D10L,0x0000000000000400L});
    public static final BitSet FOLLOW_op_clause_in_general_statement810 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_general_statement819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAT_ARROW_in_foreach_statement854 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement856 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_foreach_statement858 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_statement862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_statement868 = new BitSet(new long[]{0x0000000000000000L,0x0010000200000000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_statement870 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_statement873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_foreach_statement933 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_statement935 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement940 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_foreach_statement942 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_statement946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_statement952 = new BitSet(new long[]{0x0000000000000000L,0x0010000200000000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_statement954 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_statement957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_foreach_plan_complex1002 = new BitSet(new long[]{0x1240060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan_complex1004 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_foreach_plan_complex1006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_foreach_plan_simple1025 = new BitSet(new long[]{0x7EF9A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_foreach_plan_simple1027 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_foreach_plan_simple1031 = new BitSet(new long[]{0x7EF9A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_foreach_plan_simple1033 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_macro_content1064 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x3FFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_macro_content_in_macro_content1068 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x3FFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_macro_content1072 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x3FFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_macro_content1084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_macro_param_clause1093 = new BitSet(new long[]{0x1200060008000000L,0x0002040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_param_clause1097 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_macro_param_clause1100 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_param_clause1102 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_macro_param_clause1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_macro_return_clause1135 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000003040L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_return_clause1139 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_macro_return_clause1142 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_return_clause1144 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_VOID_in_macro_return_clause1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_content_in_macro_body_clause1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_param_clause_in_macro_clause1196 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_macro_return_clause_in_macro_clause1198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_macro_body_clause_in_macro_clause1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1229 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1244 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_inline_return_clause1247 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1249 = new BitSet(new long[]{0x0000080002000000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_inline_param_clause1341 = new BitSet(new long[]{0x020000A00000A000L,0x0002020000000001L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1345 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_inline_param_clause1348 = new BitSet(new long[]{0x020000A00000A000L,0x0000020000000001L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1350 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_inline_param_clause1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_return_clause_in_inline_clause1379 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_clause1381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_inline_param_clause_in_inline_clause1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_implicit_tuple_type1455 = new BitSet(new long[]{0x9202064018255800L,0x00020400000051C0L,0x0000000000002240L});
    public static final BitSet FOLLOW_field_def_list_in_implicit_tuple_type1457 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_implicit_tuple_type1460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_explicit_tuple_type1480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_explicit_tuple_type1483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_explicit_tuple_type_cast1492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_explicit_tuple_type_cast1494 = new BitSet(new long[]{0x8002004010255800L,0x0002000000005000L,0x0000000000000200L});
    public static final BitSet FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1498 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_explicit_tuple_type_cast1502 = new BitSet(new long[]{0x8002004010255800L,0x0000000000005000L,0x0000000000000200L});
    public static final BitSet FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1504 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_explicit_tuple_type_cast1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_tuple_type1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_in_tuple_type1540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_implicit_bag_type1549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NULL_in_implicit_bag_type1551 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_implicit_bag_type1553 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000100L,0x0000000000000200L});
    public static final BitSet FOLLOW_tuple_type_in_implicit_bag_type1555 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_implicit_bag_type1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_implicit_bag_type1591 = new BitSet(new long[]{0x1200060008000000L,0x0001040000000100L,0x0000000000002240L});
    public static final BitSet FOLLOW_identifier_plus_in_implicit_bag_type1597 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_implicit_bag_type1599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000200L});
    public static final BitSet FOLLOW_tuple_type_in_implicit_bag_type1604 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_implicit_bag_type1609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_explicit_bag_type1632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_implicit_bag_type_in_explicit_bag_type1635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_explicit_bag_type_cast1644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_explicit_bag_type_cast1646 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_explicit_tuple_type_cast_in_explicit_bag_type_cast1648 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_explicit_bag_type_cast1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_implicit_map_type1671 = new BitSet(new long[]{0x8002004010255800L,0x00008000000051C0L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_in_implicit_map_type1673 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_implicit_map_type1676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_explicit_map_type1696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_implicit_map_type_in_explicit_map_type1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_map_type1708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_map_type1712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_explicit_type1721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_in_explicit_type1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_bag_type_in_explicit_type1729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_explicit_type1733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_implicit_type1742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_bag_type_in_implicit_type1746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_implicit_type1750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_in_type1759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_type_in_type1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_explicit_type_cast1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_explicit_type_cast1776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_cast_in_explicit_type_cast1780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_bag_type_cast_in_explicit_type_cast1784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_import_clause1795 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_import_clause1798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGISTER_in_register_clause1807 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_register_clause1810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_USING_in_register_clause1813 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_register_clause1815 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_AS_in_register_clause1817 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_register_clause1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause1830 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_define_clause1833 = new BitSet(new long[]{0xEEF3B0455CAE5F50L,0xFD2C7007B018DD3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_cmd_in_define_clause1837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_clause_in_define_clause1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_clause_in_define_clause1845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_realias_clause1855 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_EQUAL_in_realias_clause1857 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_realias_clause1859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause1878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause1881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause1918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cube_clause_in_op_clause1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause1946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause1960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause1974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause2002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_clause_in_op_clause2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause2044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause2058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause2086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause2100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause2109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_ship_clause2112 = new BitSet(new long[]{0x0000000000000000L,0x0002020000000000L});
    public static final BitSet FOLLOW_path_list_in_ship_clause2115 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_ship_clause2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list2128 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_path_list2132 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list2134 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause2151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cache_clause2154 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_path_list_in_cache_clause2157 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cache_clause2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_input_clause2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_input_clause2172 = new BitSet(new long[]{0x0000000000000000L,0x1800020000000000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_input_clause2175 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_input_clause2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause2187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_output_clause2190 = new BitSet(new long[]{0x0000000000000000L,0x1800020000000000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_output_clause2193 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_output_clause2195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause2205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_error_clause2208 = new BitSet(new long[]{0x0000000000000000L,0x0002020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause2213 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000400L});
    public static final BitSet FOLLOW_LIMIT_in_error_clause2217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause2220 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_error_clause2228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load_clause2238 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_load_clause2241 = new BitSet(new long[]{0x0000000000000102L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_USING_in_load_clause2245 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_func_clause_in_load_clause2248 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_as_clause_in_load_clause2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_clause2302 = new BitSet(new long[]{0x0000000000000000L,0x0002020000040000L});
    public static final BitSet FOLLOW_func_args_in_func_clause2304 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_clause2307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_without_columns_in_func_name_without_columns2341 = new BitSet(new long[]{0x0000001000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_set_in_func_name_without_columns2345 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_eid_in_func_name_without_columns2355 = new BitSet(new long[]{0x0000001000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_eid_in_func_name2367 = new BitSet(new long[]{0x0000001000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_set_in_func_name2371 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_eid_in_func_name2381 = new BitSet(new long[]{0x0000001000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2406 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_func_args2410 = new BitSet(new long[]{0x0000000000000000L,0x0000020000040000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2412 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_set_in_group_clause2438 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_group_item_list_in_group_clause2449 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_USING_in_group_clause2453 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_clause2456 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause2461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2471 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_group_item_list2475 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2477 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_rel_in_group_item2509 = new BitSet(new long[]{0x0000000000020010L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item2513 = new BitSet(new long[]{0x2000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_ALL_in_group_item2517 = new BitSet(new long[]{0x2000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_ANY_in_group_item2521 = new BitSet(new long[]{0x2000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifier_plus2545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reserved_identifier_whitelist_in_identifier_plus2549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_explicit_field_def2563 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COLON_in_explicit_field_def2567 = new BitSet(new long[]{0x8002004010255800L,0x00000000000051C0L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_in_explicit_field_def2569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_in_explicit_field_def2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_field_def_in_field_def2627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_type_in_field_def2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_field_def_list2660 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_field_def_list2664 = new BitSet(new long[]{0x9202064018255800L,0x00000400000051C0L,0x0000000000002240L});
    public static final BitSet FOLLOW_field_def_in_field_def_list2667 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_AS_in_as_clause2682 = new BitSet(new long[]{0x9202064018255800L,0x0000040000005100L,0x0000000000002240L});
    public static final BitSet FOLLOW_explicit_field_def_in_as_clause2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_as_clause2693 = new BitSet(new long[]{0x9202064018255800L,0x00020400000051C0L,0x0000000000002240L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause2696 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_as_clause2699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list2715 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_stream_cmd_list2719 = new BitSet(new long[]{0x0000000000000000L,0x1800020000000000L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list2721 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_set_in_stream_cmd2738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_USING_in_stream_cmd2755 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd2758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd2770 = new BitSet(new long[]{0x4000000000080002L,0x0420000100000000L});
    public static final BitSet FOLLOW_ship_clause_in_cmd2775 = new BitSet(new long[]{0x4000000000080002L,0x0420000100000000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd2779 = new BitSet(new long[]{0x4000000000080002L,0x0420000100000000L});
    public static final BitSet FOLLOW_input_clause_in_cmd2783 = new BitSet(new long[]{0x4000000000080002L,0x0420000100000000L});
    public static final BitSet FOLLOW_output_clause_in_cmd2787 = new BitSet(new long[]{0x4000000000080002L,0x0420000100000000L});
    public static final BitSet FOLLOW_error_clause_in_cmd2791 = new BitSet(new long[]{0x4000000000080002L,0x0420000100000000L});
    public static final BitSet FOLLOW_identifier_plus_in_rel2803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_previous_rel_in_rel2807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_rel2811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARROBA_in_previous_rel2820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_store_clause2829 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_store_clause2832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_store_clause2834 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_store_clause2837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_USING_in_store_clause2841 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_func_clause_in_store_clause2844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_assert_clause2856 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_assert_clause2859 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_assert_clause2861 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B019ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cond_in_assert_clause2864 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_assert_clause2868 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_assert_clause2871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause2883 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_filter_clause2886 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_filter_clause2888 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B019ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cond_in_filter_clause2891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause2900 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_stream_clause2903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_THROUGH_in_stream_clause2905 = new BitSet(new long[]{0x1200160008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_stream_clause2910 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_stream_clause2914 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause2918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause2928 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause2931 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_mr_clause2935 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause2938 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_mr_clause2940 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause2946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause2948 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause2950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause2960 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_split_clause2963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_split_clause2965 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_split_branch_in_split_clause2968 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_split_branches_in_split_clause2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_split_branch2979 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_IF_in_split_branch2981 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B019ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cond_in_split_branch2983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_split_otherwise3004 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_split_branches3016 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_split_branch_in_split_branches3019 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_split_branches_in_split_branches3021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_split_branches3041 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_split_otherwise_in_split_branches3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause3053 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_limit_clause3056 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_limit_clause3058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause3067 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_sample_clause3070 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_sample_clause3072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANK_in_rank_clause3081 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_rank_clause3084 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_rank_by_statement_in_rank_clause3088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_rank_by_statement3100 = new BitSet(new long[]{0x1280072008000000L,0x0200040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_rank_by_clause_in_rank_by_statement3103 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_DENSE_in_rank_by_statement3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_rank_by_clause3115 = new BitSet(new long[]{0x0000000100000202L});
    public static final BitSet FOLLOW_rank_list_in_rank_by_clause3145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_col_in_rank_list3154 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_rank_list3158 = new BitSet(new long[]{0x1280072008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_rank_col_in_rank_list3160 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_col_range_in_rank_col3186 = new BitSet(new long[]{0x0000000100000202L});
    public static final BitSet FOLLOW_col_ref_in_rank_col3210 = new BitSet(new long[]{0x0000000100000202L});
    public static final BitSet FOLLOW_ORDER_in_order_clause3230 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_order_clause3233 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_order_clause3235 = new BitSet(new long[]{0x1280072008000000L,0x0200040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause3238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_USING_in_order_clause3242 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_func_clause_in_order_clause3245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause3257 = new BitSet(new long[]{0x0000000100000202L});
    public static final BitSet FOLLOW_order_col_list_in_order_by_clause3288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3297 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_order_col_list3301 = new BitSet(new long[]{0x1280072008000000L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3303 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_col_range_in_order_col3334 = new BitSet(new long[]{0x0000000100000202L});
    public static final BitSet FOLLOW_col_ref_in_order_col3357 = new BitSet(new long[]{0x0000000100000202L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_order_col3382 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_order_col3385 = new BitSet(new long[]{0x0000000100000200L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_order_col3398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause3408 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_distinct_clause3411 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause3413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause3423 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_partition_clause3426 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_func_name_in_partition_clause3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_rel_list3438 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_rel_list3442 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_rel_list3444 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause3461 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause3464 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause3466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_join_clause3477 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause3480 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_USING_in_join_clause3484 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_join_type_in_join_clause3487 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause3492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type3502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3511 = new BitSet(new long[]{0x0020000002000000L,0x0000400000000020L});
    public static final BitSet FOLLOW_set_in_join_sub_clause3517 = new BitSet(new long[]{0x0000000002000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause3531 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause3534 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause3547 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3550 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_rel_in_join_item3566 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause3627 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_join_group_by_clause3630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause3639 = new BitSet(new long[]{0x1200060008000080L,0x0000040008000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause3642 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_list_in_union_clause3645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_cube_clause3654 = new BitSet(new long[]{0x1200060008000080L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_rel_in_cube_clause3656 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_cube_clause3658 = new BitSet(new long[]{0x0000000008000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_cube_rollup_list_in_cube_clause3660 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_cube_clause3664 = new BitSet(new long[]{0x0000000008000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_cube_rollup_list_in_cube_clause3666 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_CUBE_in_cube_rollup_list3699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cube_rollup_list3702 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_cube_rollup_list3705 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_cube_rollup_list3709 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_cube_rollup_list3712 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cube_rollup_list3717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROLLUP_in_cube_rollup_list3726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cube_rollup_list3729 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_cube_rollup_list3732 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_cube_rollup_list3736 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_cube_rollup_list3739 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cube_rollup_list3744 = new BitSet(new long[]{0x0000000000400002L,0x0000002000000000L});
    public static final BitSet FOLLOW_pivot_clause_in_cube_rollup_list3749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_chunksize_clause_in_cube_rollup_list3755 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_rate_clause_in_cube_rollup_list3757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_clause_in_h2irg_clause3777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_autopivot_clause_in_h2irg_clause3781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PIVOT_in_pivot_clause3790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTEGER_in_pivot_clause3793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_chunksize_clause_in_autopivot_clause3806 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_rate_clause_in_autopivot_clause3808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHUNKSIZE_in_chunksize_clause3816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTEGER_in_chunksize_clause3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RATE_in_rate_clause3827 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_rate_clause3830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause3840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_clause3843 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_flatten_clause3846 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_clause3848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_generate_as_clause3861 = new BitSet(new long[]{0x9202064018255800L,0x0000040000005100L,0x0000000000002240L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_generate_as_clause3868 = new BitSet(new long[]{0x9202064018255800L,0x00000400000051C0L,0x0000000000002240L});
    public static final BitSet FOLLOW_field_def_list_in_generate_as_clause3871 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_generate_as_clause3873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_field_def_in_generate_as_clause3880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item3891 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_generate_as_clause_in_flatten_generated_item3893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_real_arg_in_flatten_generated_item3921 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_generate_as_clause_in_flatten_generated_item3923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_real_arg3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg3951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg3964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_cond_in_cond3973 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_OR_in_cond3978 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B019ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_and_cond_in_cond3981 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_not_cond_in_and_cond3993 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AND_in_and_cond3997 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B019ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_not_cond_in_and_cond4000 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_NOT_in_not_cond4012 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_unary_cond_in_not_cond4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_unary_cond4046 = new BitSet(new long[]{0x1000000000000002L,0x8000000007E00008L,0x000000000000003FL});
    public static final BitSet FOLLOW_IS_in_unary_cond4060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_NOT_in_unary_cond4062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NULL_in_unary_cond4065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_unary_cond4095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_cond4097 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_rhs_operand_in_unary_cond4101 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unary_cond4105 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_rhs_operand_in_unary_cond4107 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_cond4114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_in_unary_cond4155 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_unary_cond4161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_rhs_operand4210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_expr_in_expr4219 = new BitSet(new long[]{0x0000000000000002L,0x0000004000010000L});
    public static final BitSet FOLLOW_set_in_expr4223 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_multi_expr_in_expr4234 = new BitSet(new long[]{0x0000000000000002L,0x0000004000010000L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr4246 = new BitSet(new long[]{0x0000000800000002L,0x0200000800000000L});
    public static final BitSet FOLLOW_set_in_multi_expr4250 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr4265 = new BitSet(new long[]{0x0000000800000002L,0x0200000800000000L});
    public static final BitSet FOLLOW_set_in_func_name_suffix4279 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_eid_in_func_name_suffix4289 = new BitSet(new long[]{0x0000001000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_scalar_in_cast_expr4324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_cast_expr4338 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cast_expr_in_cast_expr4340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_without_identifier_in_cast_expr4397 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4399 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_invoker_func_in_cast_expr4414 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4416 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_identifier_plus_in_cast_expr4431 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4433 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_identifier_plus_in_cast_expr4448 = new BitSet(new long[]{0x0000001000000000L,0x0000001000000100L});
    public static final BitSet FOLLOW_func_name_suffix_in_cast_expr4450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr4453 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2E7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4457 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_cast_expr4461 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4463 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr4471 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4473 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_func_name_without_columns_in_cast_expr4507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr4509 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2E7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4513 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_cast_expr4517 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4519 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr4527 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4529 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_CASE_in_cast_expr4560 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4569 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B019ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cond_in_cast_expr4571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4573 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_cast_expr4575 = new BitSet(new long[]{0x0000060000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4579 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B019ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cond_in_cast_expr4581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4583 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_cast_expr4585 = new BitSet(new long[]{0x0000060000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ELSE_in_cast_expr4592 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_cast_expr4594 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_END_in_cast_expr4599 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4601 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_expr_in_cast_expr4648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4650 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4654 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4656 = new BitSet(new long[]{0x0000060000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4660 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4664 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4666 = new BitSet(new long[]{0x0000060000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ELSE_in_cast_expr4673 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_rhs_operand_in_cast_expr4675 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_END_in_cast_expr4680 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4682 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_paren_expr_in_cast_expr4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_curly_expr_in_cast_expr4771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_expr_in_cast_expr4785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INVOKE_in_invoker_func4799 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000100L});
    public static final BitSet FOLLOW_AMPERSAND_in_invoker_func4803 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_invoker_func4807 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4809 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_invoker_func4813 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_invoker_func4821 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_PERIOD_in_invoker_func4823 = new BitSet(new long[]{0x1200060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_identifier_plus_in_invoker_func4832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_invoker_func4836 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2E7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4840 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_invoker_func4844 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4846 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_invoker_func4854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_paren_expr4921 = new BitSet(new long[]{0xFEFAA7E55CBF5F50L,0xFF2E7607B019FDFFL,0x0010000000302FFFL});
    public static final BitSet FOLLOW_try_implicit_map_cast_in_paren_expr4924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_try_implicit_map_cast5027 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_try_implicit_map_cast5029 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cast_expr_in_try_implicit_map_cast5031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_after_left_paren_in_try_implicit_map_cast5058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_cast_in_after_left_paren5067 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5069 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cast_expr_in_after_left_paren5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5122 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5124 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_STAR_in_after_left_paren5157 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren5161 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren5163 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5168 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5170 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_col_range_in_after_left_paren5210 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren5214 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren5216 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5221 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5223 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_cond_in_after_left_paren5335 = new BitSet(new long[]{0x0000000002000000L,0x0002010000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren5362 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren5364 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5369 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5371 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_after_left_paren5454 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_after_left_paren5460 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_after_left_paren5462 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_after_left_paren5468 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_expr5499 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_curly_expr5501 = new BitSet(new long[]{0x0000000002000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_curly_expr5505 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_curly_expr5507 = new BitSet(new long[]{0x0000000002000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_expr5512 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_curly_expr5514 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_expr5546 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_expr5548 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_curly_expr5550 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5571 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_bracket_expr5573 = new BitSet(new long[]{0x0000000002000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_expr5577 = new BitSet(new long[]{0x7EF8A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_real_arg_in_bracket_expr5579 = new BitSet(new long[]{0x0000000002000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5584 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5586 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5620 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyvalue_in_bracket_expr5622 = new BitSet(new long[]{0x0000000002000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_expr5626 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyvalue_in_bracket_expr5628 = new BitSet(new long[]{0x0000000002000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5633 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5635 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5667 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5669 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5671 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_PERIOD_in_projection5692 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_projection5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_projection5700 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_projection5702 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_projection5706 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_projection5708 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_projection5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_projection5741 = new BitSet(new long[]{0x0000000000000000L,0x0000020000100000L});
    public static final BitSet FOLLOW_set_in_projection5744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_without_identifier_in_col_ref5777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_col_ref5781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_range5794 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range5796 = new BitSet(new long[]{0x1280062008000002L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_col_range5802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range5833 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_col_range5835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_keyvalue5940 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_POUND_in_keyvalue5942 = new BitSet(new long[]{0x0008208000000000L,0x00000200001021C1L,0x0000000000000100L});
    public static final BitSet FOLLOW_literal_in_keyvalue5944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_literal_map5965 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyvalue_in_literal_map5967 = new BitSet(new long[]{0x0000000002000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_map5971 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyvalue_in_literal_map5973 = new BitSet(new long[]{0x0000000002000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_literal_map5978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_literal_map6005 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_literal_map6007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_literal_bag6025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_literal_tuple_in_literal_bag6027 = new BitSet(new long[]{0x0000000002000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_bag6031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_literal_tuple_in_literal_bag6033 = new BitSet(new long[]{0x0000000002000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_literal_bag6038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_literal_bag6065 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_literal_bag6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_literal_tuple6084 = new BitSet(new long[]{0x0008208000000000L,0x00000200001021C1L,0x0000000000000100L});
    public static final BitSet FOLLOW_literal_in_literal_tuple6086 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_tuple6090 = new BitSet(new long[]{0x0008208000000000L,0x00000200001021C1L,0x0000000000000100L});
    public static final BitSet FOLLOW_literal_in_literal_tuple6092 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_literal_tuple6097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_literal_tuple6126 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_literal_tuple6128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal6145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_map_in_literal6149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_bag_in_literal6153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_tuple_in_literal6157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_command_in_nested_blk6170 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk6172 = new BitSet(new long[]{0x1240060008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_GENERATE_in_nested_blk6177 = new BitSet(new long[]{0x7EF9A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_blk6179 = new BitSet(new long[]{0x0000000002000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_nested_blk6183 = new BitSet(new long[]{0x7EF9A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_blk6185 = new BitSet(new long[]{0x0000000002000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk6190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command6237 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6239 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_proj_in_nested_command6241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command6288 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6290 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_expr_in_nested_command6292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command6337 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6339 = new BitSet(new long[]{0x0010800404000000L,0x0000000020000400L});
    public static final BitSet FOLLOW_nested_op_in_nested_command6341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op6376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op6390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op6404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op6418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op6432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op6446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj6455 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_PERIOD_in_nested_proj6457 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_list_in_nested_proj6459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_col_ref_list6499 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6501 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_COMMA_in_col_ref_list6505 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6507 = new BitSet(new long[]{0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_col_ref_list6512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter6542 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter6545 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_nested_filter6547 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B019ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cond_in_nested_filter6550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort6559 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort6562 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_BY_in_nested_sort6564 = new BitSet(new long[]{0x1280072008000000L,0x0200040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort6568 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_USING_in_nested_sort6572 = new BitSet(new long[]{0xEEF3A0455CAE5F50L,0xFD2C7007B018DC3AL,0x0010000000300FBFL});
    public static final BitSet FOLLOW_func_clause_in_nested_sort6575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct6587 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct6590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit6599 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit6602 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit6614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_nested_limit6618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross6629 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross6632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach6640 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach6642 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_GENERATE_in_nested_foreach6644 = new BitSet(new long[]{0x7EF9A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_foreach6646 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_nested_foreach6650 = new BitSet(new long[]{0x7EF9A7A55CBE5750L,0xFF2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_foreach6652 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input6687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list6700 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_nested_op_input_list6704 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list6706 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_rel_str_op_in_eid_without_columns6734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid_without_columns6742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGISTER_in_eid_without_columns6750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid_without_columns6758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid_without_columns6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid_without_columns6774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid_without_columns6782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid_without_columns6790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROLLUP_in_eid_without_columns6798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid_without_columns6806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid_without_columns6814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid_without_columns6822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid_without_columns6830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid_without_columns6838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid_without_columns6846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid_without_columns6854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid_without_columns6862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid_without_columns6870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid_without_columns6878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid_without_columns6886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid_without_columns6894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid_without_columns6902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid_without_columns6910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid_without_columns6918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid_without_columns6926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid_without_columns6934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid_without_columns6942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid_without_columns6950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid_without_columns6958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid_without_columns6966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid_without_columns6974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_eid_without_columns6982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIGINTEGER_in_eid_without_columns6990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIGDECIMAL_in_eid_without_columns6998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATETIME_in_eid_without_columns7006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid_without_columns7014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid_without_columns7022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid_without_columns7030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid_without_columns7038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid_without_columns7046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid_without_columns7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid_without_columns7062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid_without_columns7070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid_without_columns7078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid_without_columns7086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid_without_columns7094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid_without_columns7102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid_without_columns7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid_without_columns7118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid_without_columns7126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid_without_columns7134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid_without_columns7142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid_without_columns7150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid_without_columns7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REALIAS_in_eid_without_columns7166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_COND_in_eid_without_columns7174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_eid_without_columns7182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_without_columns_in_eid7191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_eid7199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid7207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_eid7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid7223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid7231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid7239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid7247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid7255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid7263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_eid7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid7279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid7287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid7295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid7303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid7311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_str_op_in_rel_op7321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_EQ_in_rel_op7332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_NE_in_rel_op7343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_GT_in_rel_op7354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_GTE_in_rel_op7365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_LT_in_rel_op7376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_LTE_in_rel_op7387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_synpred1_QueryParser4565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_synpred2_QueryParser5018 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred2_QueryParser5020 = new BitSet(new long[]{0x7EF8A6A55CBE5750L,0xFD2C7607B011ADFFL,0x0010000000302DFFL});
    public static final BitSet FOLLOW_cast_expr_in_synpred2_QueryParser5022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_synpred3_QueryParser6219 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred3_QueryParser6221 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_in_synpred3_QueryParser6223 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_PERIOD_in_synpred3_QueryParser6225 = new BitSet(new long[]{0x1280062008000000L,0x0000040000000100L,0x0000000000002040L});
    public static final BitSet FOLLOW_col_ref_list_in_synpred3_QueryParser6227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred4_QueryParser6607 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred4_QueryParser6609 = new BitSet(new long[]{0x0000000000000002L});

}